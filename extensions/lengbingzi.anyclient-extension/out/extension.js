!function(e,t){for(var i in t)e[i]=t[i]}(exports,function(e){var t={};function i(o){if(t[o])return t[o].exports;var s=t[o]={i:o,l:!1,exports:{}};return e[o].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=e,i.c=t,i.d=function(e,t,o){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(o,s,function(t){return e[t]}.bind(null,s));return o},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=47)}([function(e,t){e.exports=require("vscode")},function(e,t,i){var o=i(23),s="object"==typeof self&&self&&self.Object===Object&&self,r=o||s||Function("return this")();e.exports=r},function(e,t,i){var o=i(17),s=i(56),r=i(57),n=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":n&&n in Object(e)?s(e):r(e)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SQLParser=void 0;const o=i(0),s=i(49);t.SQLParser=class{static parseBlockSingle(e,t){return this.parseBlocks(e,t)[0]}static parseBlocks(e,t,i=!1){const r=this.getDelimter(),n=[];let a;const d={inSingleQuoteString:!1,inDoubleQuoteString:!1,inComment:!1,sql:"",start:null,ignoreDelimiter:!1,lastWord:""};let c=new s.SqlTokenContext;const l=i?e.lineCount:Math.min(e.lineCount,5e3);for(var p=0;p<l;p++){var u=e.lineAt(p).text;a=u.length;for(let e=0;e<u.length;e++){const i=u.charAt(e);if("*"===i&&"/"===u.charAt(e+1)){e++,d.inComment=!1;continue}if(d.inComment)continue;"'"===i?d.inSingleQuoteString=!d.inSingleQuoteString:'"'===i&&(d.inDoubleQuoteString=!d.inDoubleQuoteString);if(!(d.inSingleQuoteString||d.inDoubleQuoteString)){if("-"===i&&"-"===u.charAt(e+1))break;if("/"===i&&"/"===u.charAt(e+1))break;if("/"===i&&"*"===u.charAt(e+1)){e++,d.inComment=!0;continue}if(d.lastWord.match(/begin/i)?d.ignoreDelimiter=!0:!0===d.ignoreDelimiter&&d.lastWord.match(/end/i)&&(d.ignoreDelimiter=!1),i===r&&!d.ignoreDelimiter){if(!d.start)continue;c.endToken(p,e);const i=new o.Range(d.start,new o.Position(p,e+1)),r={code:d.sql,range:i,tokens:c.tokens,scopes:c.scopes};if(t&&(i.contains(t)||i.start.line>t.line))return[r];n.push(r),d.sql="",d.start=null,c=new s.SqlTokenContext;continue}}if(c.appendChar(p,e,i),!d.start){if(i.match(/\s/))continue;d.start=new o.Position(p,e)}i.match(/\s/)&&(d.lastWord=""),d.sql=d.sql+i,d.lastWord=d.lastWord+i}d.sql&&(d.sql=d.sql+"\n",c.appendChar(p,u.length,"\n"))}if(d.start){const e=new o.Range(d.start,new o.Position(l,a)),i={code:d.sql,range:e,tokens:c.tokens,scopes:c.scopes};if(t)return[i];n.push(i)}return n}static getDelimter(){return";"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ExtensionCommands=t.RunCommands=t.CodeCommands=void 0,t.CodeCommands={sqlCompletion:"sql.completion",esCompletion:"es.completion",redisCompletion:"redis.completion",mongodbCompletion:"mongodb.completion"},t.RunCommands={runSqlCommand:"sql.runSql",runSqlAllCommand:"sql.runAllSql",runSqlBatchCommand:"sql.runBatchSql",runRedisCommand:"redis.runCommand",runRedisBatchCommand:"redis.runBatch",runEsCommand:"es.run",runEsBatchCommand:"es.runBatch"},t.ExtensionCommands={runAllSql:"ex.sql.runAll",runSelectedSql:"ex.sql.runSelected",runRedisCommand:"ex.redis.runCommand",runAllRedisCommand:"ex.redis.runAll",runSelectedRedisCommand:"ex.redis.runSelected",runEsHit:"ex.es.runHit",runEsCommand:"ex.es.runCommand",runAllEsCommand:"ex.es.runAll",runSelectedEsCommand:"ex.es.runSelected"}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,i){var o=i(86),s=i(89);e.exports=function(e,t){var i=s(e,t);return o(i)?i:void 0}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NodeFinder=void 0;const o=i(0),s=i(4);class r{static async sqlGetChildren(e){return await o.commands.executeCommand(s.CodeCommands.sqlCompletion,e)}static async SqlFindNodes(e,t,...i){return await r.sqlGetChildren({schema:e,tables:t,nodeTypes:i})}static async esFndNodes(){return await o.commands.executeCommand(s.CodeCommands.esCompletion)}}t.NodeFinder=r},function(e,t,i){var o=i(36),s=i(74),r=i(76),n=i(77),a=i(18),d=i(26);e.exports=function(e,t,i){if((e=a(e))&&(i||void 0===t))return e.slice(0,d(e)+1);if(!e||!(t=o(t)))return e;var c=n(e),l=r(c,n(t))+1;return s(c,0,l).join("")}},function(e,t,i){var o=i(18),s=/[\\^$.*+?()[\]{}|]/g,r=RegExp(s.source);e.exports=function(e){return(e=o(e))&&r.test(e)?e.replace(s,"\\$&"):e}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenContext=t.CompletionContext=void 0;t.CompletionContext=class{};t.TokenContext=class{constructor(){this.tokens=[],this.scopes=[],this.word="",this.bracketStart=[]}}},function(e,t,i){var o=i(22),s=i(24);e.exports=function(e){return null!=e&&s(e.length)&&!o(e)}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){var i=Array.isArray;e.exports=i},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CompleteSort=void 0,function(e){e.A="a",e.B="b",e.C="c",e.D="d",e.E="e"}(t.CompleteSort||(t.CompleteSort={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Pattern=t.Cursor=void 0;const o=i(0);class s{static getRangeStartTo(e){return new o.Range(this.FIRST_POSITION,e)}}t.Cursor=s,s.FIRST_POSITION=new o.Position(0,0);class r{}t.Pattern=r,r.TABLE_PATTERN="\\b(from|join|update|into)\\b\\s*\\[?((\\w|\\.|-|`|\"|')+)\\]?",r.SELECT_TABLE_PATTERN="\\b(from|join)\\b\\s*\\[?((\\w|\\.|-|`|\"|')+)\\]?",r.DML_PATTERN="\\b(update|into)\\b\\s*`{0,1}(\\w|\\.|-)+`{0,1}",r.MULTI_PATTERN=/\b(TRIGGER|PROCEDURE|FUNCTION)\b/gi},function(e,t){function i(e){if(!(this instanceof i))return new i(e);this._init(e)}e.exports=i,i.prototype._init=function(e){e=e||{},this.child=Object.create(null),this.children=[],this.name=e.name||"","string"==typeof e.string?this.string=e.string:"string"==typeof e.regex?this.regex=new RegExp("^("+e.regex+")$",null==e.flag?"i":e.flag):e.regex instanceof RegExp&&(this.regex=e.regex)},i.prototype._add=function(e){return this._find(e)||this._attach(e)},i.prototype._find=function(e){if("string"==typeof e.string)return this.child[e.string];var t,i=this.children,o=i.length;if(e.name)for(var s=0;s<o;s++)if((t=i[s]).name===e.name)return t},i.prototype._attach=function(e){return e instanceof i||(e=new i(e)),e.parent=this,null==e.string?this.children.push(e):this.child[e.string]=e,e}},function(e,t,i){var o=i(1).Symbol;e.exports=o},function(e,t,i){var o=i(36);e.exports=function(e){return null==e?"":o(e)}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlBaseChain=void 0;const o=i(38),s=i(0),r=i(14);class n extends o.BaseChain{constructor(){super(...arguments),this.functionList=this.strToCompletion(["CHAR_LENGTH","CONCAT","NOW","DATE_ADD","DATE_SUB","MAX","COUNT","MIN","SUM","AVG","LENGTH","IF","IFNULL","MD5","SHA","CURRENT_DATE","DATE_FORMAT","CAST","TRIM","LAST_INSERT_ID","MOD"],s.CompletionItemKind.Function,r.CompleteSort.D,"($1)")}getCompletionSort(e){switch(e.nodeType){case"column":return r.CompleteSort.B;case"table":return r.CompleteSort.C;case"db":case"view":case"views":return r.CompleteSort.D;case"functions":case"function":case"procedures":case"procedure":case"triggers":case"trigger":default:return r.CompleteSort.E}}}t.SqlBaseChain=n},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisParser=void 0;const o=i(0),s=i(39);t.RedisParser=class{static parseBlockSingle(e,t){return this.parseBlocks(e,t)[0]}static parseBlocks(e,t,i=!1){const r=this.getDelimter(),n=[];let a;const d={inSingleQuoteString:!1,inDoubleQuoteString:!1,inComment:!1,command:"",start:null};let c=new s.RedisTokenContext;const l=i?e.lineCount:Math.min(e.lineCount,5e3);for(let i=0;i<l;i++){let l=e.lineAt(i).text;a=l.length;for(let e=0;e<l.length;e++){const a=l.charAt(e);if("*"===a&&"/"===l.charAt(e+1)){e++,d.inComment=!1;continue}if(d.inComment)continue;"'"===a?d.inSingleQuoteString=!d.inSingleQuoteString:'"'===a&&(d.inDoubleQuoteString=!d.inDoubleQuoteString);if(!(d.inSingleQuoteString||d.inDoubleQuoteString)){if("/"===a&&"/"===l.charAt(e+1))break;if("/"===a&&"*"===l.charAt(e+1)){e++,d.inComment=!0;continue}if(a===r){if(!d.start)continue;c.endToken(i,e);const r=new o.Range(d.start,new o.Position(i,e+1)),a={code:d.command,range:r,tokens:c.tokens,scopes:c.scopes};if(t&&(r.contains(t)||r.start.line>t.line))return[a];n.push(a),d.command="",d.start=null,c=new s.RedisTokenContext;continue}}if(c.appendChar(i,e,a),!d.start){if(a.match(/\s/))continue;d.start=new o.Position(i,e)}d.command=d.command+a}d.command&&(d.command=d.command+"\n",c.appendChar(i,l.length,"\n"))}if(d.start){const e=new o.Range(d.start,new o.Position(l,a)),i={code:d.command,range:e,tokens:c.tokens,scopes:c.scopes};if(t)return[i];n.push(i)}return n}static getDelimter(){return";"}}},function(e,t,i){var o=i(53),s=i(54),r=i(55);e.exports=function(e,t,i){return t==t?r(e,t,i):o(e,s,i)}},function(e,t,i){var o=i(2),s=i(12);e.exports=function(e){if(!s(e))return!1;var t=o(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},function(e,t){var i="object"==typeof global&&global&&global.Object===Object&&global;e.exports=i},function(e,t){e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},function(e,t,i){var o=i(59);e.exports=function(e){var t=o(e),i=t%1;return t==t?i?t-i:t:0}},function(e,t){var i=/\s/;e.exports=function(e){for(var t=e.length;t--&&i.test(e.charAt(t)););return t}},function(e,t,i){var o=i(2),s=i(5);e.exports=function(e){return"symbol"==typeof e||s(e)&&"[object Symbol]"==o(e)}},function(e,t){e.exports=function(e,t){for(var i=-1,o=null==e?0:e.length,s=Array(o);++i<o;)s[i]=t(e[i],i,e);return s}},function(e,t,i){var o=i(67),s=i(5),r=Object.prototype,n=r.hasOwnProperty,a=r.propertyIsEnumerable,d=o(function(){return arguments}())?o:function(e){return s(e)&&n.call(e,"callee")&&!a.call(e,"callee")};e.exports=d},function(e,t,i){(function(e){var o=i(1),s=i(68),r=t&&!t.nodeType&&t,n=r&&"object"==typeof e&&e&&!e.nodeType&&e,a=n&&n.exports===r?o.Buffer:void 0,d=(a?a.isBuffer:void 0)||s;e.exports=d}).call(this,i(31)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){var i=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var o=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==o||"symbol"!=o&&i.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,i){var o=i(69),s=i(70),r=i(71),n=r&&r.isTypedArray,a=n?s(n):o;e.exports=a},function(e,t,i){var o=i(35),s=i(72),r=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return s(e);var t=[];for(var i in Object(e))r.call(e,i)&&"constructor"!=i&&t.push(i);return t}},function(e,t){var i=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||i)}},function(e,t,i){var o=i(17),s=i(28),r=i(13),n=i(27),a=o?o.prototype:void 0,d=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(r(t))return s(t,e)+"";if(n(t))return d?d.call(t):"";var i=t+"";return"0"==i&&1/t==-1/0?"-0":i}},function(e,t){var i=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return i.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseChain=void 0;const o=i(0),s=i(7);t.BaseChain=class{constructor(){this.needStop=!1}stop(){return this.needStop}requestStop(){this.needStop=!0}strToCompletion(e,t=o.CompletionItemKind.Keyword,i,s=""){return e.map(e=>{const r=new o.CompletionItem(e+" ");return r.insertText=new o.SnippetString(e+s),r.kind=t,i&&(r.sortText=i),r})}async findNodes(e,t,...i){const o=await s.NodeFinder.SqlFindNodes(null,[e],...i);return this.nodeToCompletion(o,t)}nodeToCompletion(e,t,i,s=""){return e.map(e=>{const r=new o.CompletionItem(e.name+" ");return r.insertText=new o.SnippetString(e.name+s),r.kind=t,r.detail=e.description,r.sortText=i||this.getCompletionSort(e),r})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisTokenContext=void 0;const o=i(0),s=i(10);class r extends s.TokenContext{appendChar(e,t,i){if(i.match(/\s/))this.endToken(e,t);else switch(i){case":":this.splitToken(e,t,i);break;default:this.addChar(e,t,i)}}addChar(e,t,i){this.wordStart||(this.wordStart=new o.Position(e,t)),this.word=this.word+i}splitToken(e,t,i){return this.endToken(e,t),this.addChar(e,t,i),this.endToken(e,t+1)}endToken(e,t){if(!this.wordStart)return;const i={content:this.word,type:this.getType(),range:new o.Range(this.wordStart,new o.Position(e,t))};return this.tokens.push(i),this.word="",this.wordStart=null,i}getToken(e){return e>0?this.tokens[e]:this.tokens[this.tokens.length+e]}getType(){const e=this.getToken(-1);return e&&e.content.match(/get|set|del|exists|expire|presist|ttl|type|incr|move/i)?"key":"text"}}t.RedisTokenContext=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ElasticMatches=void 0;const o=i(41);t.ElasticMatches=class{constructor(e,t){if(!e)return console.error("updateDecorations(): no active text editor."),void(this.Matches=[]);this.Editor=e,this.Matches=[];let i=!1;for(let s=0;s<e.document.lineCount;s++){let r=e.document.lineAt(s),n=r.text.trim();if(0===n.length)continue;i&&n.startsWith("{")&&(this.Matches[this.Matches.length-1].HasBody=!0),i=!1;let a=o.ElasticMatch.RegexMatch.exec(r.text);if(null!=a){i=!0;let e=new o.ElasticMatch(t,r,a);this.Matches.push(e)}}this.UpdateSelection(e)}UpdateSelection(e){this.Editor=e,this.Matches.forEach(t=>{var i;t.Selected=null===(i=t.Range)||void 0===i?void 0:i.contains(e.selection),t.Selected&&(this.Selection=t)})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ElasticMatch=t.ElasticItem=void 0;const o=i(0),s=i(112);class r{}t.ElasticItem=r;class n{constructor(e,t,i){this.HasBody=!1,this.Selected=!1,this.IsBulk=!1;let a=new o.Range(t.lineNumber,i[1].length+1,t.lineNumber,t.text.length),d=new o.Range(t.lineNumber,0,t.lineNumber,i[1].length);this.Method={Text:i[1],Range:d},this.Path={Text:i[2],Range:a},this.Body=new r;let c=1,l="",p=this.Method.Range.start.line+1,u=p,h=i[2].split("?")[0];for(this.IsBulk="_bulk"===h||h.endsWith("/_bulk");e.lineCount>u;){let t=e.lineAt(u).text;if(null!==n.RegexMatch.exec(t))break;l+=t+"\n",c=e.lineAt(u).text.length,u++}l=l.substring(0,l.length-1);let m=new o.Position(p,0),f=new o.Position(u-1,c);this.Body.Range=new o.Range(m,f);let y=l;this.Body.Text=y;try{y&&(this.IsBulk||(JSON.parse((0,s.default)(y)),this.HasBody=!0)),this.Range=new o.Range(this.Method.Range.start,this.Body.Range.end)}catch(e){this.HasBody=!1,this.Range=new o.Range(this.Method.Range.start,this.Path.Range.end),this.Error=this.GetErrorFromMessage(l,e.message)}}GetErrorFromMessage(e,t){let i=new r,s=/Position\s(\d+)/gim.exec(t);if(s){let t=+s[1],r=(e=e.substring(0,t)).split("\n"),n=r[r.length-1].length,a=r.length+this.Method.Range.start.line;i.Range=new o.Range(a,n,a,n+1)}return e.trim().length>0&&(i.Text=t),i}}t.ElasticMatch=n,n.RegexMatch=/^(GET|POST|DELETE|PUT)\s+([A-Za-z0-9\-\._~:\/#\[\]@!$&'"%\(\)\*+,;=`?]+)\s*$/gim},function(e,t,i){"use strict";
/*!
 * depd
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */var o=i(123).EventEmitter;function s(e,t,i){Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){var o=i();return Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:o}),o}})}function r(e){return e.toString()}s(e.exports,"callSiteToString",(function(){var e=Error.stackTraceLimit,t={},o=Error.prepareStackTrace;Error.prepareStackTrace=function(e,t){return t},Error.stackTraceLimit=2,Error.captureStackTrace(t);var s=t.stack.slice();return Error.prepareStackTrace=o,Error.stackTraceLimit=e,s[0].toString?r:i(124)})),s(e.exports,"eventListenerCount",(function(){return o.listenerCount||i(125)}))},function(e,t,i){var o=i(21),s=i(11),r=i(58),n=i(25),a=i(62),d=Math.max;e.exports=function(e,t,i,c){e=s(e)?e:a(e),i=i&&!c?n(i):0;var l=e.length;return i<0&&(i=d(l+i,0)),r(e)?i<=l&&e.indexOf(t,i)>-1:!!l&&o(e,t,i)>-1}},function(e,t,i){var o=i(81),s=i(82),r=i(25),n=i(18);e.exports=function(e,t,i){return t=(i?s(e,t,i):void 0===t)?1:r(t),o(n(e),t)}},function(e,t){e.exports=function(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}},function(e,t,i){var o=i(34),s=i(84),r=i(29),n=i(13),a=i(11),d=i(30),c=i(35),l=i(33),p=Object.prototype.hasOwnProperty;e.exports=function(e){if(null==e)return!0;if(a(e)&&(n(e)||"string"==typeof e||"function"==typeof e.splice||d(e)||l(e)||r(e)))return!e.length;var t=s(e);if("[object Map]"==t||"[object Set]"==t)return!e.size;if(c(e))return!o(e).length;for(var i in e)if(p.call(e,i))return!1;return!0}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContextFromEditor=t.deactivate=t.activate=void 0;const o=i(0),s=i(48),r=i(50),n=i(51),a=i(52),d=i(94),c=i(103),l=i(4),p=i(104),u=i(105),h=i(3),m=i(20),f=i(110),y=i(113),g=i(114);function _(e=!1,t="sql"){if(!o.window.activeTextEditor)return null;const i=o.window.activeTextEditor;if(e)return i.document.getText();const s=i.selection;return s.isEmpty?"sql"===t?h.SQLParser.parseBlockSingle(i.document,i.selection.active).code:"redis"===t?m.RedisParser.parseBlockSingle(i.document,i.selection.active).code:"es"===t?"":void 0:i.document.getText(s)}t.activate=function(e){const t=new g.ElasticCompletionItemProvider(e);e.subscriptions.push(o.languages.registerCodeLensProvider("sql",new s.SqlCodeLensProvider),o.languages.registerDocumentSymbolProvider("sql",new r.SQLSymbolProvide),o.languages.registerDocumentRangeFormattingEditProvider("sql",new a.SqlFormattingProvider),o.languages.registerCompletionItemProvider("sql",new d.SqlCompletionProvider," ",".",">","<","=","("),o.languages.registerCodeLensProvider("redis",new c.RedisCodeLensProvider),o.languages.registerCompletionItemProvider("redis",new u.RedisCompletionProvider),o.languages.registerCodeLensProvider(["es","elasticsearch"],new f.ElasticCodeLensProvider(e)),o.languages.registerCompletionItemProvider(["es","elasticsearch"],t,"/","?","&",'"','""')),new n.SqlHighlightCreator,new p.RedisHighlightCreator,e.subscriptions.push(o.commands.registerCommand(l.ExtensionCommands.runSelectedSql,async()=>{const e=_();e&&o.commands.executeCommand(l.RunCommands.runSqlBatchCommand,e)}),o.commands.registerCommand(l.ExtensionCommands.runAllSql,async()=>{const e=_(!0);e&&o.commands.executeCommand(l.RunCommands.runSqlBatchCommand,e)}),o.commands.registerCommand(l.ExtensionCommands.runSelectedRedisCommand,async()=>{const e=_(!1,"redis");e&&o.commands.executeCommand(l.RunCommands.runRedisBatchCommand,e)}),o.commands.registerCommand(l.ExtensionCommands.runAllRedisCommand,async()=>{const e=_(!0,"redis");e&&o.commands.executeCommand(l.RunCommands.runRedisBatchCommand,e)}),o.commands.registerCommand(l.ExtensionCommands.runEsHit,e=>{try{e.Method.Range.start.line;const t=o.window.activeTextEditor,i=+o.workspace.getConfiguration("editor").get("tabSize");t.edit(o=>{if(e.HasBody){t.document.getText(e.Body.Range);o.replace(e.Body.Range,(0,y.formatJsonWithComments)(e.Body.Text,i))}})}catch(e){console.log(e.message)}}),o.commands.registerCommand(l.ExtensionCommands.runEsCommand,e=>{const t=e.Method.Text,i=e.Path.Text,s=e.Body.Text;o.commands.executeCommand(l.RunCommands.runEsCommand,[t,i,s])}),o.commands.registerCommand(l.ExtensionCommands.runSelectedEsCommand,()=>{const e=_(!1,"es");o.commands.executeCommand(l.RunCommands.runEsCommand,e)}),o.commands.registerCommand(l.ExtensionCommands.runAllEsCommand,()=>{const e=_(!0,"es");o.commands.executeCommand(l.RunCommands.runEsCommand,e)}))},t.deactivate=function(){},t.getContextFromEditor=_},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlCodeLensProvider=void 0;const o=i(3),s=i(0),r=i(4);t.SqlCodeLensProvider=class{provideCodeLenses(e,t){return this.parseCodeLens(e)}resolveCodeLens(e,t){throw new Error("Method not implemented.")}parseCodeLens(e){return o.SQLParser.parseBlocks(e).map(e=>new s.CodeLens(e.range,{command:r.RunCommands.runSqlCommand,title:"▶ Run Query ",arguments:[e.code]}))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlTokenContext=void 0;const o=i(0),s=i(10);class r extends s.TokenContext{appendChar(e,t,i){var s;if(i.match(/\s/))this.endToken(e,t);else switch(i){case".":const r=this.getToken(-1);this.splitToken(e,t,i),(null===(s=null==r?void 0:r.content)||void 0===s?void 0:s.match(/into|from|update|table|join/i))&&(this.getToken(-1).type="schema_dot",this.getToken(-2).type="schema");break;case",":this.splitToken(e,t,i);break;case"(":const n=this.splitToken(e,t,i);this.bracketStart.push(n);break;case")":const a=this.bracketStart.pop(),d=this.splitToken(e,t,i);"bracketStart"===(null==a?void 0:a.type)&&this.scopes.push(new o.Range(a.range.start,d.range.end));break;default:this.addChar(e,t,i)}}addChar(e,t,i){this.wordStart||(this.wordStart=new o.Position(e,t)),this.word=this.word+i}splitToken(e,t,i){return this.endToken(e,t),this.addChar(e,t,i),this.endToken(e,t+1)}endToken(e,t){if(!this.wordStart)return;const i={content:this.word,type:this.getType(),range:new o.Range(this.wordStart,new o.Position(e,t))};return this.tokens.push(i),this.word="",this.wordStart=null,i}getToken(e){return e>0?this.tokens[e]:this.tokens[this.tokens.length+e]}getType(){var e;const t=this.getToken(-1);if(t){if(t.content.match(/into|from|update|table|join/i)||"schema_dot"===t.type)return"table";"("!==t.content||"select"!==this.word.toLowerCase()&&"table"!==(null===(e=this.getToken(-2))||void 0===e?void 0:e.type)||(t.type="bracketStart")}return"text"}}t.SqlTokenContext=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SQLSymbolProvide=void 0;const o=i(0),s=i(3);t.SQLSymbolProvide=class{provideDocumentSymbols(e,t){return s.SQLParser.parseBlocks(e).map(t=>new o.SymbolInformation(t.code,o.SymbolKind.Function,null,new o.Location(e.uri,t.range.start)))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlHighlightCreator=void 0;const o=i(0),s=i(3);t.SqlHighlightCreator=class{constructor(){this.highLightColor=o.window.createTextEditorDecorationType({light:{backgroundColor:"#5B8DDE20"},dark:{backgroundColor:"#0AAAF420"}}),o.workspace.onDidChangeTextDocument(()=>{this.updateDecoration(o.window.activeTextEditor)}),o.window.onDidChangeActiveTextEditor(this.updateDecoration),o.window.onDidChangeTextEditorSelection(e=>{const t=e.selections;"sql"==e.textEditor.document.languageId&&(t.length>0&&!t[0].start.isEqual(t[0].end)?this.updateDecoration(e.textEditor,t.map(e=>new o.Range(e.start,e.end))):this.updateDecoration(e.textEditor))}),this.updateDecoration(o.window.activeTextEditor)}async updateDecoration(e,t){const i=null==e?void 0:e.document;if("sql"==(null==i?void 0:i.languageId)){if(!t){if(!this)return;const o=s.SQLParser.parseBlocks(i).map(e=>e.range).find(t=>t.contains(e.selection)||t.start.line>e.selection.start.line);o&&(t=[o])}(null==t?void 0:t.length)>0&&e.setDecorations(this.highLightColor,t)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlFormattingProvider=void 0;const o=i(0),s=i(145);t.SqlFormattingProvider=class{provideDocumentRangeFormattingEdits(e,t,i,r){return[new o.TextEdit(t,s.default.format(e.getText(t)))]}}},function(e,t){e.exports=function(e,t,i,o){for(var s=e.length,r=i+(o?1:-1);o?r--:++r<s;)if(t(e[r],r,e))return r;return-1}},function(e,t){e.exports=function(e){return e!=e}},function(e,t){e.exports=function(e,t,i){for(var o=i-1,s=e.length;++o<s;)if(e[o]===t)return o;return-1}},function(e,t,i){var o=i(17),s=Object.prototype,r=s.hasOwnProperty,n=s.toString,a=o?o.toStringTag:void 0;e.exports=function(e){var t=r.call(e,a),i=e[a];try{e[a]=void 0;var o=!0}catch(e){}var s=n.call(e);return o&&(t?e[a]=i:delete e[a]),s}},function(e,t){var i=Object.prototype.toString;e.exports=function(e){return i.call(e)}},function(e,t,i){var o=i(2),s=i(13),r=i(5);e.exports=function(e){return"string"==typeof e||!s(e)&&r(e)&&"[object String]"==o(e)}},function(e,t,i){var o=i(60);e.exports=function(e){return e?(e=o(e))===1/0||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},function(e,t,i){var o=i(61),s=i(12),r=i(27),n=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,d=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(r(e))return NaN;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=o(e);var i=a.test(e);return i||d.test(e)?c(e.slice(2),i?2:8):n.test(e)?NaN:+e}},function(e,t,i){var o=i(26),s=/^\s+/;e.exports=function(e){return e?e.slice(0,o(e)+1).replace(s,""):e}},function(e,t,i){var o=i(63),s=i(64);e.exports=function(e){return null==e?[]:o(e,s(e))}},function(e,t,i){var o=i(28);e.exports=function(e,t){return o(t,(function(t){return e[t]}))}},function(e,t,i){var o=i(65),s=i(34),r=i(11);e.exports=function(e){return r(e)?o(e):s(e)}},function(e,t,i){var o=i(66),s=i(29),r=i(13),n=i(30),a=i(32),d=i(33),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var i=r(e),l=!i&&s(e),p=!i&&!l&&n(e),u=!i&&!l&&!p&&d(e),h=i||l||p||u,m=h?o(e.length,String):[],f=m.length;for(var y in e)!t&&!c.call(e,y)||h&&("length"==y||p&&("offset"==y||"parent"==y)||u&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||a(y,f))||m.push(y);return m}},function(e,t){e.exports=function(e,t){for(var i=-1,o=Array(e);++i<e;)o[i]=t(i);return o}},function(e,t,i){var o=i(2),s=i(5);e.exports=function(e){return s(e)&&"[object Arguments]"==o(e)}},function(e,t){e.exports=function(){return!1}},function(e,t,i){var o=i(2),s=i(24),r=i(5),n={};n["[object Float32Array]"]=n["[object Float64Array]"]=n["[object Int8Array]"]=n["[object Int16Array]"]=n["[object Int32Array]"]=n["[object Uint8Array]"]=n["[object Uint8ClampedArray]"]=n["[object Uint16Array]"]=n["[object Uint32Array]"]=!0,n["[object Arguments]"]=n["[object Array]"]=n["[object ArrayBuffer]"]=n["[object Boolean]"]=n["[object DataView]"]=n["[object Date]"]=n["[object Error]"]=n["[object Function]"]=n["[object Map]"]=n["[object Number]"]=n["[object Object]"]=n["[object RegExp]"]=n["[object Set]"]=n["[object String]"]=n["[object WeakMap]"]=!1,e.exports=function(e){return r(e)&&s(e.length)&&!!n[o(e)]}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,i){(function(e){var o=i(23),s=t&&!t.nodeType&&t,r=s&&"object"==typeof e&&e&&!e.nodeType&&e,n=r&&r.exports===s&&o.process,a=function(){try{var e=r&&r.require&&r.require("util").types;return e||n&&n.binding&&n.binding("util")}catch(e){}}();e.exports=a}).call(this,i(31)(e))},function(e,t,i){var o=i(73)(Object.keys,Object);e.exports=o},function(e,t){e.exports=function(e,t){return function(i){return e(t(i))}}},function(e,t,i){var o=i(75);e.exports=function(e,t,i){var s=e.length;return i=void 0===i?s:i,!t&&i>=s?e:o(e,t,i)}},function(e,t){e.exports=function(e,t,i){var o=-1,s=e.length;t<0&&(t=-t>s?0:s+t),(i=i>s?s:i)<0&&(i+=s),s=t>i?0:i-t>>>0,t>>>=0;for(var r=Array(s);++o<s;)r[o]=e[o+t];return r}},function(e,t,i){var o=i(21);e.exports=function(e,t){for(var i=e.length;i--&&o(t,e[i],0)>-1;);return i}},function(e,t,i){var o=i(78),s=i(79),r=i(80);e.exports=function(e){return s(e)?r(e):o(e)}},function(e,t){e.exports=function(e){return e.split("")}},function(e,t){var i=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");e.exports=function(e){return i.test(e)}},function(e,t){var i="[\\ud800-\\udfff]",o="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",s="\\ud83c[\\udffb-\\udfff]",r="[^\\ud800-\\udfff]",n="(?:\\ud83c[\\udde6-\\uddff]){2}",a="[\\ud800-\\udbff][\\udc00-\\udfff]",d="(?:"+o+"|"+s+")"+"?",c="[\\ufe0e\\ufe0f]?"+d+("(?:\\u200d(?:"+[r,n,a].join("|")+")[\\ufe0e\\ufe0f]?"+d+")*"),l="(?:"+[r+o+"?",o,n,a,i].join("|")+")",p=RegExp(s+"(?="+s+")|"+l+c,"g");e.exports=function(e){return e.match(p)||[]}},function(e,t){var i=Math.floor;e.exports=function(e,t){var o="";if(!e||t<1||t>9007199254740991)return o;do{t%2&&(o+=e),(t=i(t/2))&&(e+=e)}while(t);return o}},function(e,t,i){var o=i(83),s=i(11),r=i(32),n=i(12);e.exports=function(e,t,i){if(!n(i))return!1;var a=typeof t;return!!("number"==a?s(i)&&r(t,i.length):"string"==a&&t in i)&&o(i[t],e)}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,i){var o=i(85),s=i(90),r=i(91),n=i(92),a=i(93),d=i(2),c=i(37),l=c(o),p=c(s),u=c(r),h=c(n),m=c(a),f=d;(o&&"[object DataView]"!=f(new o(new ArrayBuffer(1)))||s&&"[object Map]"!=f(new s)||r&&"[object Promise]"!=f(r.resolve())||n&&"[object Set]"!=f(new n)||a&&"[object WeakMap]"!=f(new a))&&(f=function(e){var t=d(e),i="[object Object]"==t?e.constructor:void 0,o=i?c(i):"";if(o)switch(o){case l:return"[object DataView]";case p:return"[object Map]";case u:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return t}),e.exports=f},function(e,t,i){var o=i(6)(i(1),"DataView");e.exports=o},function(e,t,i){var o=i(22),s=i(87),r=i(12),n=i(37),a=/^\[object .+?Constructor\]$/,d=Function.prototype,c=Object.prototype,l=d.toString,p=c.hasOwnProperty,u=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!r(e)||s(e))&&(o(e)?u:a).test(n(e))}},function(e,t,i){var o,s=i(88),r=(o=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!r&&r in e}},function(e,t,i){var o=i(1)["__core-js_shared__"];e.exports=o},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,i){var o=i(6)(i(1),"Map");e.exports=o},function(e,t,i){var o=i(6)(i(1),"Promise");e.exports=o},function(e,t,i){var o=i(6)(i(1),"Set");e.exports=o},function(e,t,i){var o=i(6)(i(1),"WeakMap");e.exports=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlCompletionProvider=void 0;const o=i(95),s=i(96),r=i(97),n=i(98),a=i(99),d=i(101),c=i(102);t.SqlCompletionProvider=class{completeChain(){return[new n.DDLChain,new s.DMLChain,new r.TableChain,new a.ColumnChain,new d.TableDetectorChain,new o.KeywordChain]}async provideCompletionItems(e,t){const i=c.SqlCompletionContext.build(e,t);console.log("sqlCompletionProvider-${1}",i);let o=[];for(const e of this.completeChain())try{const t=await e.getCompletion(i);if(console.log("本次chain:",JSON.stringify(t)),t&&t.length>0&&(o=o.concat(t),e.stop()))break}catch(e){console.error(e)}return o}resolveCompletionItem(e){return e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeywordChain=void 0;const o=i(0);t.KeywordChain=class{constructor(){this.keywordList=["SCHEMA","JOIN","AND","OR","SELECT","SET","UPDATE","DELETE","TABLE","INSERT","INTO","VALUES","FROM","WHERE","IS","NULL","DATABASE","GROUP BY","ORDER BY","HAVING","LIMIT","ALTER","CREATE","DROP","FUNCTION","CASE","PROCEDURE","TRIGGER","INDEX","CHANGE","COLUMN","BETWEEN","RLIKE","ADD","SHOW","PRIVILEGES","IDENTIFIED","VIEW","CURSOR","EXPLAIN","ROLLBACK","COMMENT","COMMIT","BEGIN","DELIMITER","CALL","REPLACE","TEMPORARY","REFERENCES","USING","END","BEFORE","AFTER","GRANT","RETURNS","SOME","ANY","ASC","DESC","UNIQUE","UNION","ALL","ON","REGEXP","OUTER","INNER","EXEC","EXISTS","NOT","FOREIGN","FULL","LIKE","IN","PRIMARY","KEY","RIGHT","LEFT","TRUNCATE","IGNORE","DISTINCT","SOURCE"],this.keywordCompletionItems=[],this.keywordList.forEach(e=>{const t=new o.CompletionItem(e);t.kind=o.CompletionItemKind.Keyword,this.keywordCompletionItems.push(t)})}getCompletion(e){return console.log("------------开始执行KeyWord - Chain"),this.keywordCompletionItems}stop(){return!0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DMLChain=void 0;const o=i(0),s=i(0),r=i(14),n=i(19),a=i(7);class d extends n.SqlBaseChain{async getCompletion(e){var t,i,n,d,c;console.log("------------开始执行DML--DMLChain2");const l=null===(i=null===(t=e.tokens[0])||void 0===t?void 0:t.content)||void 0===i?void 0:i.toLowerCase();if(!l||-1===["select","insert","update","delete","call"].indexOf(l))return console.log("-------------------------2"),null;const p=null===(d=null===(n=e.previousToken)||void 0===n?void 0:n.content)||void 0===d?void 0:d.toLowerCase();if(p&&p.match(/into|from|update|table|join/i))return console.log("-------------------------DML 3",p),this.requestStop(),(await this.findNodes(null,o.CompletionItemKind.Field,"db")).concat(await this.findNodes(null,o.CompletionItemKind.Function,"tables","views","functions"));if(console.log("-------------------------5"),"."===(null===(c=e.currentToken)||void 0===c?void 0:c.content))return void console.log("-------------------------6");let u,h=e.codeBlock.tokens.filter(e=>"table"===e.type);if(h&&h.length>0&&(u=h.map(e=>e.content)),"select"===l){if(console.log("-----------------------select"),h&&0!==h.length||this.requestStop(),h&&h.length>0&&e.position.isBefore(h[0].range.start)&&this.requestStop(),console.log("-------------dml is stop:",this.needStop),this.needStop)return console.log("----dml select "),this.strToCompletion(["*"],s.CompletionItemKind.Keyword,r.CompleteSort.A).concat(this.nodeToCompletion(await a.NodeFinder.SqlFindNodes(null,null,"columns"),o.CompletionItemKind.Field,r.CompleteSort.B)).concat(this.strToCompletion(["FROM"],s.CompletionItemKind.Keyword,r.CompleteSort.C)).concat(this.functionList)}else if("delete"===l){if(console.log("-------------------------delete"),e.codeBlock.tokens.find(t=>"where"===t.content&&e.position.isAfter(t.range.end)))return this.functionList}else{if("insert"===l)return console.log("-------------------------inset"),u&&0!==u.length?(this.requestStop(),e.codeBlock.tokens.find(t=>"values"===t.content&&e.position.isAfter(t.range.end))?this.functionList:this.nodeToCompletion(await a.NodeFinder.SqlFindNodes(null,u,"columns"),o.CompletionItemKind.Field,r.CompleteSort.B)):null;if("call"===l)return console.log("-------------------------all"),(await this.findNodes(null,o.CompletionItemKind.Field,"db")).concat(await this.findNodes(null,o.CompletionItemKind.Function,"procedures"))}return console.log("-------------------------end,stop",this.stop()),null}}t.DMLChain=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TableChain=void 0;const o=i(0),s=i(14),r=i(7),n=i(19);class a extends n.SqlBaseChain{async getCompletion(e){var t,i;console.log("------------开始执行Table--tableChain1");if("."===(null===(t=e.currentToken)||void 0===t?void 0:t.content)){let t=e.codeBlock.tokens.find(e=>"on"===e.content.toLowerCase()||"where"===e.content.toLowerCase());if(t&&e.position.isAfter(t.range.start))return null;console.log("------------tableChain2进入");const o=null===(i=e.previousToken)||void 0===i?void 0:i.content,s=await this.generateTableCompletionItem(o);if(s&&s.length>0)return this.requestStop(),s}return null}async generateTableCompletionItem(e){const t=await this.getNodeList(e);return t&&t.length>0?t.map(e=>{const t=new o.CompletionItem(e.name);switch(e.description&&(t.detail=e.description),t.insertText=e.name,e.nodeType){case"tables":t.kind=o.CompletionItemKind.Field,t.sortText=s.CompleteSort.B;break;case"views":t.kind=o.CompletionItemKind.Module,t.sortText=s.CompleteSort.C;break;default:t.kind=o.CompletionItemKind.Field,t.sortText=s.CompleteSort.D}return t}):[]}async getNodeList(e){if(!e)return[];return await r.NodeFinder.SqlFindNodes(e,null,"tables","views","functions")}}t.TableChain=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DDLChain=void 0;const o=i(0),s=i(19);class r extends s.SqlBaseChain{constructor(){super(...arguments),this.keywordCompletionItems=this.strToCompletion(["Table","Procedure","View","Function","Trigger"]),this.typeList=this.strToCompletion(["INTEGER","CHAR","VARCHAR","DECIMAL","SMALLINT","TINYINT","MEDIUMINT","BIGINT","CHARACTER","NUMERIC","BIT","INT","FLOAT","DOUBLE","TEXT","SET","BLOB","TIMESTAMP","DATE","TIME","YEAR","DATETIME"],o.CompletionItemKind.Variable)}async getCompletion(e){var t,i,s,r,n,a;console.log("------------开始执行DDL--DDLChain1");const d=null===(i=null===(t=e.tokens[0])||void 0===t?void 0:t.content)||void 0===i?void 0:i.toLowerCase();if(!d)return this.needStop=!0,[];const c=null===(r=null===(s=e.tokens[1])||void 0===s?void 0:s.content)||void 0===r?void 0:r.toLowerCase(),l=null===(a=null===(n=e.tokens[2])||void 0===n?void 0:n.content)||void 0===a?void 0:a.toLowerCase(),p="create"===d,u="alter"===d;if(-1==["create","alter","drop"].indexOf(d))return[];if(this.needStop=!0,!c)return this.keywordCompletionItems;if(p){if(!l)return this.strToCompletion(["tableName ( \n)"]);if(l&&"table"===c)return this.strToCompletion(["AUTO_INCREMENT","NULL","NOT","PRIMARY","CURRENT_TIME","REFERENCES","DEFAULT","COMMENT","UNIQUE","KEY","FOREIGN","CASCADE","RESTRICT","UNSIGNED","CURRENT_TIMESTAMP"]).concat(this.typeList)}else{let e;switch(c){case"table":e="tables";break;case"procedure":e="procedures";break;case"function":e="functions";break;case"view":e="views";break;case"trigger":e="triggers"}if(e)return u?(await this.findNodes(null,o.CompletionItemKind.Function,e)).concat(await this.findNodes(null,o.CompletionItemKind.Field,"db")).concat(this.typeList):(await this.findNodes(null,o.CompletionItemKind.Function,e)).concat(await this.findNodes(null,o.CompletionItemKind.Field,"db"))}return[]}}t.DDLChain=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ColumnChain=void 0;const o=i(0),s=i(15),r=i(100),n=i(14),a=i(7);t.ColumnChain=class{constructor(){this.needStop=!0}async getCompletion(e){var t,i,o,n;console.log("------------开始执行Column--ColumnChain");null===(i=null===(t=e.tokens[0])||void 0===t?void 0:t.content)||void 0===i||i.toLowerCase();let a=null===(o=e.previousToken)||void 0===o?void 0:o.content;if("."===(null===(n=e.currentToken)||void 0===n?void 0:n.content)){const t=e.codeBlock.tokens.find(e=>"on"===e.content.toLowerCase()||"where"===e.content.toLowerCase()),i=e.codeBlock.tokens.find(e=>"from"===e.content.toLowerCase());let o=!1;if(i&&e.position.isBefore(i.range.start)&&(o=!0),t&&e.position.isAfter(t.range.end)&&(o=!0),!o)return null;-1!==a.indexOf("=")&&(a=a.split("=")[1]);let s=await this.generateColumnCompletionItem(a);if(console.log("columnChain-main->1"),null!==s&&s.length>0)return console.log("columnChain-main->2"),this.needStop=!0,s;console.log("columnChain-main->3"),console.log("context.currentCode:",e.currentCode),console.log("context.codeBlock.code",e.codeBlock.code);const n=e.codeBlock.code,[,d]=r.TableUtil.getSelectTableNameAlias(n);if(d.has(a)){let e=await this.generateColumnCompletionItem(d.get(a));return this.needStop=!0,e}}const d=e.codeBlock.tokens.filter(t=>t.content.match(/\b(on|where|by|having)\b/i)||"set"===t.content&&e.position.isAfter(t.range.end));for(const t of d)if(e.position.isAfter(t.range.end)){const t=r.TableUtil.getTableName(e.currentCode,s.Pattern.TABLE_PATTERN);if(t)return this.needStop=!0,await this.generateColumnCompletionItem(t)}return null}stop(){return this.needStop}async generateColumnCompletionItem(e){if(!e)return[];let t="";const i=e.split(".");2===i.length&&(t=i[0],e=i[1]),console.log("columnChain=----------1");let s=await a.NodeFinder.SqlFindNodes(t,[e],"columns");return s&&0!==s.length?(console.log("columnChain=----------3"),s.map(e=>{console.log("columnChain=----------4",e.name);const t=new o.CompletionItem(e.name);return t.detail=e.description,t.insertText=e.name,t.kind=o.CompletionItemKind.Field,t.sortText=n.CompleteSort.B,t})):(console.log("columnChain=----------2"),[])}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TableUtil=void 0;t.TableUtil=class{static getTableName(e,t){const i=new RegExp(t,"img").exec(e);return i?i[0].replace(/\bfrom|join|update|into\b/i,"").replace(/`|"|'/g,"").replace(/^\s*\[(.+)\]$/,"$1").trim():null}static getSelectTableNames(e){const t=new RegExp("\\b(from|join)\\b\\s*\\[?((\\w|\\.|-|`|\"|')+)\\]?","ig");let i=[];for(;;){let o=t.exec(e);if(!o)break;i.push(o[2])}return i}static getSelectTableNameAlias(e){const t=/(?:FROM|JOIN)\s+(\w+(\.\w+)?)\s+(?:AS\s+)?(\w+)/gi;let i,o=new Map;const s=[];for(;null!==(i=t.exec(e));){const e=i[1],t=i[4]?i[4]:i[3];o.set(t,e),s.push(e)}return[s,o]}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TableDetectorChain=void 0;const o=i(0),s=i(15);t.TableDetectorChain=class{getCompletion(e){var t,i,r,n;console.log("------------开始执行TableDetectorChain");const a=new RegExp(s.Pattern.TABLE_PATTERN+" *((\\w)*)?","ig");if((null===(i=null===(t=e.previousToken)||void 0===t?void 0:t.content)||void 0===i?void 0:i.match(/\b(select|HAVING|\(|on|where|and|,|=|<|>)\b/gi))||(null===(n=null===(r=e.currentToken)||void 0===r?void 0:r.content)||void 0===n?void 0:n.match(/(<|>|,|=)$/))){const t=[];let i=a.exec(e.codeBlock.code);for(;null!==i;){const s=i[4];if(s)t.push(new o.CompletionItem(s,o.CompletionItemKind.Interface));else{const e=i[2].replace(/\w*?\./,"");t.push(new o.CompletionItem(e,o.CompletionItemKind.Interface))}i=a.exec(e.codeBlock.code)}return t}return null}stop(){return!0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SqlCompletionContext=void 0;const o=i(15),s=i(0),r=i(3),n=i(10);class a extends n.CompletionContext{static build(e,t){const i=new n.CompletionContext,o=this.obtainCursorSql(e,t).trim();i.position=t,i.codeBlock=r.SQLParser.parseBlockSingle(e,t),i.tokens=i.codeBlock.tokens;for(let e=0;e<i.tokens.length;e++){const o=i.tokens[e];if(o.range.contains(t)||o.range.start.isAfter(t)){i.currentToken=o,i.tokens[e-1]&&(i.previousToken=i.tokens[e-1]);break}}return!i.previousToken&&i.tokens.length>0&&(i.previousToken=i.tokens[i.tokens.length-1]),i.codeBlock.code.trim()?(i.currentCode=o.trim(),i):i}static obtainCursorSql(e,t,i,r){i||(i=e.getText(new s.Range(new s.Position(0,0),t))),r&&(i=i.replace(new RegExp(r,"g"),";"));const n=i.match(/(?:[^;"']+|["'][^"']*["'])+/g);if(!n)return"";if(1===n.length)return n[0];const a=[],d=e.getText(o.Cursor.getRangeStartTo(t)).length;let c=0;for(let e=0;e<n.length;e++){const t=n[e],i=t.trim();if(i&&a.push(i),c+=t.length+1,d<c)return!i&&n.length>1?n[e-1]:i}return a[a.length-1]}}t.SqlCompletionContext=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisCodeLensProvider=void 0;const o=i(20),s=i(0),r=i(4);t.RedisCodeLensProvider=class{provideCodeLenses(e,t){return this.parseCodeLens(e)}resolveCodeLens(e,t){throw new Error("Method not implemented.")}parseCodeLens(e){return o.RedisParser.parseBlocks(e).map(e=>new s.CodeLens(e.range,{command:r.RunCommands.runRedisCommand,title:"▶ Run Query",arguments:[e.code]}))}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisHighlightCreator=void 0;const o=i(0),s=i(20);t.RedisHighlightCreator=class{constructor(){this.highLightColor=o.window.createTextEditorDecorationType({light:{backgroundColor:"#5B8DDE20"},dark:{backgroundColor:"#0AAAF420"}}),o.workspace.onDidChangeTextDocument(()=>{this.updateDecoration(o.window.activeTextEditor)}),o.window.onDidChangeActiveTextEditor(this.updateDecoration),o.window.onDidChangeTextEditorSelection(e=>{const t=e.selections;"redis"===e.textEditor.document.languageId&&(t.length>0&&!t[0].start.isEqual(t[0].end)?this.updateDecoration(e.textEditor,t.map(e=>new o.Range(e.start,e.end))):this.updateDecoration(e.textEditor))}),this.updateDecoration(o.window.activeTextEditor)}async updateDecoration(e,t){const i=null==e?void 0:e.document;if("redis"===(null==i?void 0:i.languageId)){if(!t){if(!this)return;const o=s.RedisParser.parseBlocks(i).map(e=>e.range).find(t=>t.contains(e.selection)||t.start.line>e.selection.start.line);o&&(t=[o])}(null==t?void 0:t.length)>0&&e.setDecorations(this.highLightColor,t)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisCompletionProvider=void 0;const o=i(106),s=i(108),r=i(109);t.RedisCompletionProvider=class{completeChain(){return[new s.DMLChain,new r.KeywordChain]}async provideCompletionItems(e,t){const i=o.RedisCompletionContext.build(e,t);let s=[];for(const e of this.completeChain())try{const t=await e.getCompletion(i);if(null!==t&&(s=s.concat(t),e.stop()))break}catch(e){console.error(e)}return s}resolveCompletionItem(e){return e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisCompletionContext=void 0;const o=i(15),s=i(0),r=i(107),n=i(10);class a extends n.CompletionContext{static build(e,t){const i=new a,o=this.obtainCursorSql(e,t).trim();i.position=t,i.codeBlock=r.RedisParser.parseBlockSingle(e,t),i.tokens=i.codeBlock.tokens;for(let e=0;e<i.tokens.length;e++){const o=i.tokens[e];if(o.range.contains(t)||o.range.start.isAfter(t)){i.currentToken=o,i.tokens[e-1]&&(i.previousToken=i.tokens[e-1]);break}}return!i.previousToken&&i.tokens.length>0&&(i.previousToken=i.tokens[i.tokens.length-1]),i.codeBlock.code.trim()?(i.currentCode=o.trim(),i):i}static obtainCursorSql(e,t,i,r){i||(i=e.getText(new s.Range(new s.Position(0,0),t))),r&&(i=i.replace(new RegExp(r,"g"),";"));const n=i.match(/(?:[^;"']+|["'][^"']*["'])+/g);if(!n)return"";if(1===n.length)return n[0];const a=[],d=e.getText(o.Cursor.getRangeStartTo(t)).length;let c=0;for(let e=0;e<n.length;e++){const t=n[e],i=t.trim();if(i&&a.push(i),c+=t.length+1,d<c)return!i&&n.length>1?n[e-1]:i}return a[a.length-1]}}t.RedisCompletionContext=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RedisParser=void 0;const o=i(0),s=i(39);t.RedisParser=class{static parseBlockSingle(e,t){return this.parseBlocks(e,t)[0]}static parseBlocks(e,t,i=!1){const r=this.getDelimter(),n=[];let a;const d={inSingleQuoteString:!1,inDoubleQuoteString:!1,inComment:!1,command:"",start:null};let c=new s.RedisTokenContext;const l=i?e.lineCount:Math.min(e.lineCount,5e3);for(let i=0;i<l;i++){let l=e.lineAt(i).text;a=l.length;for(let e=0;e<l.length;e++){const a=l.charAt(e);if("*"===a&&"/"===l.charAt(e+1)){e++,d.inComment=!1;continue}if(d.inComment)continue;"'"===a?d.inSingleQuoteString=!d.inSingleQuoteString:'"'===a&&(d.inDoubleQuoteString=!d.inDoubleQuoteString);if(!(d.inSingleQuoteString||d.inDoubleQuoteString)){if("/"===a&&"/"===l.charAt(e+1))break;if("/"===a&&"*"===l.charAt(e+1)){e++,d.inComment=!0;continue}if(a===r){if(!d.start)continue;c.endToken(i,e);const r=new o.Range(d.start,new o.Position(i,e+1)),a={code:d.command,range:r,tokens:c.tokens,scopes:c.scopes};if(t&&(r.contains(t)||r.start.line>t.line))return[a];n.push(a),d.command="",d.start=null,c=new s.RedisTokenContext;continue}}if(c.appendChar(i,e,a),!d.start){if(a.match(/\s/))continue;d.start=new o.Position(i,e)}d.command=d.command+a}d.command&&(d.command=d.command+"\n",c.appendChar(i,l.length,"\n"))}if(d.start){const e=new o.Range(d.start,new o.Position(l,a)),i={code:d.command,range:e,tokens:c.tokens,scopes:c.scopes};if(t)return[i];n.push(i)}return n}static getDelimter(){return";"}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DMLChain=void 0;const o=i(38);class s extends o.BaseChain{async getCompletion(e){var t,i;console.log("------------开始执行DML--DMLChain");null===(i=null===(t=e.tokens[0])||void 0===t?void 0:t.content)||void 0===i||i.toLowerCase();return[]}getCompletionSort(e){return"a"}}t.DMLChain=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeywordChain=void 0;const o=i(0);t.KeywordChain=class{constructor(){this.firstKeywordList=["Type","TTL","Expire","DEL","Exists","Set","Get","Mget","Hget","Lset","Lpush","Flushall"],this.secondKeywordList=["Pexpireat","Rename","Persist","Move","Dump","Pttl","Renamenx","Expireat","keys Setnx","Getrange","Mset","Setex","Getbit","Setbit","Decr","Decrby","Strlen","Msetnx","Incrby","Incrbyfloat","Setrange","Psetex","Append","Getset","Incr","Hmset","Hmget","Hset","Hgetall","Hexists","Hincrby","Hlen","Hdel","Hvals","Hincrbyfloat","Hkeys","Hsetnx","Lindex","Rpush","Lrange","Rpoplpush","Blpop","Brpop","Brpoplpush","Lrem","Llen","Ltrim","Lpop","Lpushx","Linsert","Rpop","Rpushx","Sunion","Scard","Standmember","Smembers","Sinter","Srem","Smove","Sadd","Sismemer","Sdiffstore","Sdiff","Sscaan","Sinterstore","Sunionstore","Spop","Zrevrank","Zlexcount","Zunionstore","Zremrangebyrank","Zcard","Zrem","Zinterstore","Zrank","Zincrby","Zrangebyscore","Zrangebylex","Zscore","Zremrangebyscore","Zscan","Zrevrangebyscore","Zremrangebylex","Zrevrange","Zrange","Zcount","Zadd","Flushdb","Save","Showlog","Lastsave","Command","Slaveof","Dbsize","Bgrewriteaof","Cluster","Slots","Config","Shutdown","Sync","Client","Kill","Role","Monitor","Command","Getkeys","Getname","Resetstat","Command","Count","Time","Info","Config","rewrite","List","Setname","Bgsave","Script","kill","Load","Eval","Evalsha","Exists","Flush","Exec","Watch","Discrad","Unwatch","Multi","Pgmerge","Pfadd","Pfcount","Unsubscribe","Subscribe","Pubsub","Punsubscribe","Publish","Psubscribe","Geohash","Geopos","Geodist","Georadius","Geoadd","Georadiusbymember"],this.keywordCompletionItems=[],this.strToCompletion(this.firstKeywordList,"a"),this.strToCompletion(this.secondKeywordList,"b")}strToCompletion(e,t){e.map(e=>{const i=new o.CompletionItem(e);i.kind=o.CompletionItemKind.Keyword,i.sortText=t,this.keywordCompletionItems.push(i)})}getCompletion(e){return this.keywordCompletionItems}stop(){return!0}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ElasticCodeLensProvider=void 0;const o=i(0),s=i(111),r=i(40),n=i(4),a=i(0);t.ElasticCodeLensProvider=class{constructor(e){this.context=e,this.decoration=new s.ElasticDecoration(e)}provideCodeLenses(e,t){let i=new r.ElasticMatches(a.window.activeTextEditor,e),s=[];return i.Matches.forEach(e=>{var t;if(s.push(new o.CodeLens(e.Method.Range,{title:"▶ Run Query",command:n.ExtensionCommands.runEsCommand,arguments:[e]})),e.HasBody){let t={title:"⚡ Auto indent",command:n.ExtensionCommands.runEsHit,arguments:[e]};s.push(new o.CodeLens(e.Method.Range,t))}e.HasBody&&(null===(t=e.Error)||void 0===t?void 0:t.Text)&&s.push(new o.CodeLens(e.Method.Range,{title:"⚠️ Invalid Json",command:""}))}),s}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ElasticDecoration=void 0;const o=i(0);t.ElasticDecoration=class{constructor(e){this.context=e,this.pHighlight=o.window.createTextEditorDecorationType({light:{color:"rgb(0,191,171)"},dark:{color:"rgb(0,191,171)"}}),this.bHighlight=o.window.createTextEditorDecorationType({isWholeLine:!0,light:{gutterIconSize:"contain",backgroundColor:"rgba(200, 200, 200, 0.2)",gutterIconPath:this.context.asAbsolutePath("./media/gutter-dis-light.svg")},dark:{gutterIconSize:"contain",backgroundColor:"rgba(50, 50, 50, 0.3)",gutterIconPath:this.context.asAbsolutePath("./media/gutter-dis-dark.svg")}}),this.bHighlightSelected=o.window.createTextEditorDecorationType({isWholeLine:!0,gutterIconPath:this.context.asAbsolutePath("./media/gutter.svg"),gutterIconSize:"contain",light:{backgroundColor:"rgba(200, 200, 200, 0.2)"},dark:{backgroundColor:"rgba(50, 50, 50, 0.3)"}}),this.mHighlight=o.window.createTextEditorDecorationType({rangeBehavior:o.DecorationRangeBehavior.ClosedClosed,light:{color:"#EF5098"},dark:{color:"#EF5098"},overviewRulerColor:"#0271bc",overviewRulerLane:o.OverviewRulerLane.Left}),this.errHighlight=o.window.createTextEditorDecorationType({borderWidth:"1px",borderStyle:"solid",light:{borderColor:"rgba(255,0,0,0.5)",backgroundColor:"rgba(255,0,0,0.25)"},dark:{borderColor:"rgba(255,0,0,0.5)",backgroundColor:"rgba(255,0,0,0.25)"},overviewRulerColor:"rgba(255,0,0,0.5)",overviewRulerLane:o.OverviewRulerLane.Left})}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=Symbol("singleComment"),s=Symbol("multiComment"),r=()=>"",n=(e,t,i)=>e.slice(t,i).replace(/\S/g," "),a=(e,t)=>{let i=t-1,o=0;for(;"\\"===e[i];)i-=1,o+=1;return Boolean(o%2)};t.default=function(e,{whitespace:t=!0}={}){if("string"!=typeof e)throw new TypeError(`Expected argument \`jsonString\` to be a \`string\`, got \`${typeof e}\``);const i=t?n:r;let d=!1,c=!1,l=0,p="";for(let t=0;t<e.length;t++){const r=e[t],n=e[t+1];if(!c&&'"'===r){a(e,t)||(d=!d)}if(!d)if(c||r+n!=="//"){if(c===o&&r+n==="\r\n"){t++,c=!1,p+=i(e,l,t),l=t;continue}if(c===o&&"\n"===r)c=!1,p+=i(e,l,t),l=t;else{if(!c&&r+n==="/*"){p+=e.slice(l,t),l=t,c=s,t++;continue}if(c===s&&r+n==="*/"){t++,c=!1,p+=i(e,l,t+1),l=t+1;continue}}}else p+=e.slice(l,t),l=t,c=o,t++}return p+(c?i(e.slice(l)):e.slice(l))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatJsonWithComments=void 0;t.formatJsonWithComments=function(e,t){let i=[],o=0;e=e.replace(/(\s*)(\/\/.*|\/\*[\s\S]*?\*\/)(\s*)/g,(t,s,r,n,a)=>{let d=e.slice(0,a).replace(/\s/g,"").length;return i.push({comment:r,originalOffset:a,leadingSpaces:s,trailingSpaces:n,nonWhitespaceOffset:d+o}),o-=r.replace(/\s/g,"").length,""});try{const o=JSON.parse(e);let s=JSON.stringify(o,null,t),r=s,n=0;for(let{comment:e,leadingSpaces:t,trailingSpaces:o,nonWhitespaceOffset:a}of i){let i=0,o=0;for(let e=0;e<s.length;e++)if(/\s/.test(s[e])||o++,o>=a){i=e;break}r=[r.slice(0,i+n+1),t,e,r.slice(i+n+1)].join(""),n=n+t.length+e.length}return r}catch(t){return console.error("Error parsing JSON:",t),e}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ElasticCompletionItemProvider=void 0;const o=i(41),s=i(40),r=i(0),n=i(115),a=i(116),d=i(139),c=i(7);t.ElasticCompletionItemProvider=class{constructor(e){this.context=e,this.restSpec=this.buildRestSpecRouter()}buildRestSpecRouter(){const e=i(141).default,t=Object.keys(e),o={};return t.forEach(t=>{const i=e[t].default,s=i._common;delete i._common;const r=Object.keys(i),n=o[t]=a();r.forEach(e=>{const t=i[e];s&&(t.url.params?Object.keys(s.params).forEach(e=>t.url.params[e]=s.params[e]):t.url.params=s.params);const o=t.url.paths.map(e=>e.replace(/\{/g,":").replace(/\}/g,""));t.methods.forEach(e=>o.forEach(i=>n.define(`${e}${i}`)[0].spec=t))})}),o}provideCompletionItems(e,t,i){return this.asyncProvideCompletionItems(e,t,i)}provideHover(e,t){return this.asyncProvideHover(e,t)}async asyncProvideHover(e,t){let i=await this.getElasticVersion()||"6.0.0";if(!i)return;let s=d(i,Object.keys(this.restSpec)),a=this.restSpec[s];if(!a)return;const c=e.lineAt(t);let l=o.ElasticMatch.RegexMatch.exec(c.text),p=[];if(null!==l){let e=c.range,t=l[2].split("?")[0];t.split("/").pop();const i=a.match(`${l[1]}${t}`);if(!i)return;if(i.node.spec.body&&p.push(""+i.node.spec.body.description),i.node.spec.url.params){p.push(n.EOL+"url params:");for(let e in i.node.spec.url.params){let t=`* ${e} *(${i.node.spec.url.params[e].type})*`;p.push(t)}}let o=[`${i.node.spec.methods.join(" | ")} **${i.node.string}** ([documentation](${i.node.spec.documentation}))`,p.join(n.EOL)];return Promise.resolve(new r.Hover(o,e))}}async asyncProvideCompletionItems(e,t,i){const o=r.window.activeTextEditor;console.log("1-----------------");let n=new s.ElasticMatches(o,e).Selection;if(!n)return this.keyWordCompletion(e,t);console.log("2-----------------");let a=d("6.0.0",Object.keys(this.restSpec)),c=this.restSpec[a];return c?this.isPathCompletion(n,t)?this.providePathCompletionItem(n,c):this.isPathParamCompletion(n,t)?this.providePathParamCompletionItem(n,c):(console.log("end------------------\x3e",e.lineAt(t.line)),this.keyWordCompletion(e,t)):this.keyWordCompletion(e,t)}keyWordCompletion(e,t){return e.lineAt(t.line).text.startsWith("//")?[]:["query","match","match_all","term","terms","bool","must","should","must_not","filter","range","prefix","wildcard","regexp","fuzzy","multi_match","nested","has_child","has_parent","function_score","script_score","boosting","dis_max","constant_score","span_term","span_first","span_multi","span_or","span_and","span_not","span_containing","span_near","exists","ids","type","common_terms","percolate","more_like_this","rank_feature","rank_features","script","geo_shape","geo_distance","geo_bounding_box","shape","parent_id","gt","lt","eq"].map(e=>({label:e}))}async providePathParamCompletionItem(e,t){const i=t.match(`${e.Method.Text}${e.Path.Text.split("?")[0]}`);return i?Object.keys(i.node.spec.url.params).map(e=>new r.CompletionItem(e)):[]}async providePathCompletionItem(e,t){let i,o=e.Path.Text.split("/").filter(e=>e.length),s=t.child[e.Method.Text];if(o.forEach(e=>{s&&(i=s,s=e in s.child?s.child[e]:s.children[0])}),!s)return[];let n=[],a=s.children[0];return a&&("index"===a.name?(n=n.concat((await this.listIndices()).map(e=>({label:e}))),n=n.concat((await this.listAliases()).map(e=>({label:e})))):"name"===a.name&&i&&"_alias"===i.string?n=n.concat((await this.listAliases()).map(e=>({label:e}))):"repository"===a.name?n=n.concat((await this.listRepositories()).map(e=>({label:e}))):n.push({label:`<${a.name}>`})),n=n.concat(Object.keys(s.child).map(e=>({label:e}))),n.filter(e=>e.label.length).map(e=>new r.CompletionItem(e.label))}isPathCompletion(e,t){return e.Method.Range.start.line===t.line&&"/"===e.Path.Text[e.Path.Text.length-1]}isPathParamCompletion(e,t){return e.Method.Range.start.line===t.line&&("?"===e.Path.Text[e.Path.Text.length-1]||"&"===e.Path.Text[e.Path.Text.length-1])}isBodyCompletion(e,t){return e.Body.Range.start.line<t.line&&e.Body.Range.end.line>t.line}async listIndices(){return c.NodeFinder.esFndNodes()}async listAliases(){return[]}async listRepositories(){return[]}async getElasticVersion(){return"6.0.0"}}},function(e,t){e.exports=require("os")},function(e,t,i){e.exports=i(16),i(117),i(119),i(137)},function(e,t,i){var o=i(118),s=i(16);s.prototype.define=function(e){if("string"!=typeof e)throw new TypeError("Only strings can be defined.");try{return function e(t,i){var r=t[0],n=s.parse(r),a=n.name,d=Object.keys(n.string).map((function(e){return{name:a,string:e}}));n.regex&&d.push({name:a,regex:n.regex});d.length||(d=[{name:a}]);return d=d.map(i._add,i),t.length-1?o(d.map(e.bind(null,t.slice(1)))):d}(e.split("/"),this)}catch(t){throw t.route=e,t}}},function(e,t){e.exports=function(e,t){return t="number"==typeof t?t:1/0,function e(i,o){return i.reduce((function(i,s){return Array.isArray(s)&&o<t?i.concat(e(s,o+1)):i.concat(s)}),[])}(e,1)}},function(e,t,i){var o=i(120);function s(e){try{return decodeURIComponent(e)}catch(e){return-1}}i(16).prototype.match=function(e){var t,i,r,n,a,d=this,c=e.split("/"),l=c.length,p={param:{}};e:for(;l;){if(t=s(c.shift()),o(-1!==t,404,"malformed url: "+e),l=c.length,!(i=d.child[t])){for(var u=0,h=(r=d.children).length;u<h;u++)if(!(n=(i=r[u]).regex)||n.test(t)){if((a=i.name)&&(p.param[a]=t),!l)return p.node=i,p;d=i;continue e}return}if((a=i.name)&&(p.param[a]=t),!l)return p.node=i,p;d=i}}},function(e,t,i){var o=i(121),s=i(134);function r(e,t,i,s){if(!e)throw o(t,i,s)}e.exports=r,r.fail=function(e,t,i){r(!1,e,t,i)},r.equal=function(e,t,i,o,s){r(e==t,i,o,s)},r.notEqual=function(e,t,i,o,s){r(e!=t,i,o,s)},r.ok=function(e,t,i,o){r(e,t,i,o)},r.strictEqual=function(e,t,i,o,s){r(e===t,i,o,s)},r.notStrictEqual=function(e,t,i,o,s){r(e!==t,i,o,s)},r.deepEqual=function(e,t,i,o,n){r(s(e,t),i,o,n)},r.notDeepEqual=function(e,t,i,o,n){r(!s(e,t),i,o,n)}},function(e,t,i){"use strict";
/*!
 * http-errors
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var o,s=i(122)("http-errors"),r=i(127),n=i(128),a=i(130),d=i(133);function c(e){return Number(String(e).charAt(0)+"00")}function l(e,t){var i=Object.getOwnPropertyDescriptor(e,"name");i&&i.configurable&&(i.value=t,Object.defineProperty(e,"name",i))}function p(e){return"Error"!==e.substr(-5)?e+"Error":e}e.exports=function e(){for(var t,i,o=500,r={},a=0;a<arguments.length;a++){var d=arguments[a];if(d instanceof Error)o=(t=d).status||t.statusCode||o;else switch(typeof d){case"string":i=d;break;case"number":o=d,0!==a&&s("non-first-argument status code; replace with createError("+d+", ...)");break;case"object":r=d}}"number"==typeof o&&(o<400||o>=600)&&s("non-error status code; use only 4xx or 5xx status codes");("number"!=typeof o||!n[o]&&(o<400||o>=600))&&(o=500);var l=e[o]||e[c(o)];t||(t=l?new l(i):new Error(i||n[o]),Error.captureStackTrace(t,e));l&&t instanceof l&&t.status===o||(t.expose=o<500,t.status=t.statusCode=o);for(var p in r)"status"!==p&&"statusCode"!==p&&(t[p]=r[p]);return t},e.exports.HttpError=function(){function e(){throw new TypeError("cannot construct abstract class")}return a(e,Error),e}(),e.exports.isHttpError=(o=e.exports.HttpError,function(e){return!(!e||"object"!=typeof e)&&(e instanceof o||e instanceof Error&&"boolean"==typeof e.expose&&"number"==typeof e.statusCode&&e.status===e.statusCode)}),function(e,t,i){t.forEach((function(t){var o,s=d(n[t]);switch(c(t)){case 400:o=function(e,t,i){var o=p(t);function s(e){var t=null!=e?e:n[i],a=new Error(t);return Error.captureStackTrace(a,s),r(a,s.prototype),Object.defineProperty(a,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(a,"name",{enumerable:!1,configurable:!0,value:o,writable:!0}),a}return a(s,e),l(s,o),s.prototype.status=i,s.prototype.statusCode=i,s.prototype.expose=!0,s}(i,s,t);break;case 500:o=function(e,t,i){var o=p(t);function s(e){var t=null!=e?e:n[i],a=new Error(t);return Error.captureStackTrace(a,s),r(a,s.prototype),Object.defineProperty(a,"message",{enumerable:!0,configurable:!0,value:t,writable:!0}),Object.defineProperty(a,"name",{enumerable:!1,configurable:!0,value:o,writable:!0}),a}return a(s,e),l(s,o),s.prototype.status=i,s.prototype.statusCode=i,s.prototype.expose=!1,s}(i,s,t)}o&&(e[t]=o,e[s]=o)})),e["I'mateapot"]=s.function(e.ImATeapot,'"I\'mateapot"; use "ImATeapot" instead')}(e.exports,n.codes,e.exports.HttpError)},function(module,exports,__webpack_require__){
/*!
 * depd
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
var callSiteToString=__webpack_require__(42).callSiteToString,eventListenerCount=__webpack_require__(42).eventListenerCount,relative=__webpack_require__(126).relative;module.exports=depd;var basePath=process.cwd();function containsNamespace(e,t){for(var i=e.split(/[ ,]+/),o=String(t).toLowerCase(),s=0;s<i.length;s++){var r=i[s];if(r&&("*"===r||r.toLowerCase()===o))return!0}return!1}function convertDataDescriptorToAccessor(e,t,i){var o=Object.getOwnPropertyDescriptor(e,t),s=o.value;return o.get=function(){return s},o.writable&&(o.set=function(e){return s=e}),delete o.value,delete o.writable,Object.defineProperty(e,t,o),o}function createArgumentsString(e){for(var t="",i=0;i<e;i++)t+=", arg"+i;return t.substr(2)}function createStackString(e){var t=this.name+": "+this.namespace;this.message&&(t+=" deprecated "+this.message);for(var i=0;i<e.length;i++)t+="\n    at "+callSiteToString(e[i]);return t}function depd(e){if(!e)throw new TypeError("argument namespace is required");var t=callSiteLocation(getStack()[1])[0];function i(e){log.call(i,e)}return i._file=t,i._ignored=isignored(e),i._namespace=e,i._traced=istraced(e),i._warned=Object.create(null),i.function=wrapfunction,i.property=wrapproperty,i}function isignored(e){return!!process.noDeprecation||containsNamespace(process.env.NO_DEPRECATION||"",e)}function istraced(e){return!!process.traceDeprecation||containsNamespace(process.env.TRACE_DEPRECATION||"",e)}function log(e,t){var i=0!==eventListenerCount(process,"deprecation");if(i||!this._ignored){var o,s,r,n,a=0,d=!1,c=getStack(),l=this._file;for(t?(n=t,(r=callSiteLocation(c[1])).name=n.name,l=r[0]):r=n=callSiteLocation(c[a=2]);a<c.length;a++)if((s=(o=callSiteLocation(c[a]))[0])===l)d=!0;else if(s===this._file)l=this._file;else if(d)break;var p=o?n.join(":")+"__"+o.join(":"):void 0;if(void 0===p||!(p in this._warned)){this._warned[p]=!0;var u=e;if(u||(u=r!==n&&r.name?defaultMessage(r):defaultMessage(n)),i){var h=DeprecationError(this._namespace,u,c.slice(a));process.emit("deprecation",h)}else{var m=(process.stderr.isTTY?formatColor:formatPlain).call(this,u,o,c.slice(a));process.stderr.write(m+"\n","utf8")}}}}function callSiteLocation(e){var t=e.getFileName()||"<anonymous>",i=e.getLineNumber(),o=e.getColumnNumber();e.isEval()&&(t=e.getEvalOrigin()+", "+t);var s=[t,i,o];return s.callSite=e,s.name=e.getFunctionName(),s}function defaultMessage(e){var t=e.callSite,i=e.name;i||(i="<anonymous@"+formatLocation(e)+">");var o=t.getThis(),s=o&&t.getTypeName();return"Object"===s&&(s=void 0),"Function"===s&&(s=o.name||s),s&&t.getMethodName()?s+"."+i:i}function formatPlain(e,t,i){var o=(new Date).toUTCString()+" "+this._namespace+" deprecated "+e;if(this._traced){for(var s=0;s<i.length;s++)o+="\n    at "+callSiteToString(i[s]);return o}return t&&(o+=" at "+formatLocation(t)),o}function formatColor(e,t,i){var o="[36;1m"+this._namespace+"[22;39m [33;1mdeprecated[22;39m [0m"+e+"[39m";if(this._traced){for(var s=0;s<i.length;s++)o+="\n    [36mat "+callSiteToString(i[s])+"[39m";return o}return t&&(o+=" [36m"+formatLocation(t)+"[39m"),o}function formatLocation(e){return relative(basePath,e[0])+":"+e[1]+":"+e[2]}function getStack(){var e=Error.stackTraceLimit,t={},i=Error.prepareStackTrace;Error.prepareStackTrace=prepareObjectStackTrace,Error.stackTraceLimit=Math.max(10,e),Error.captureStackTrace(t);var o=t.stack.slice(1);return Error.prepareStackTrace=i,Error.stackTraceLimit=e,o}function prepareObjectStackTrace(e,t){return t}function wrapfunction(fn,message){if("function"!=typeof fn)throw new TypeError("argument fn must be a function");var args=createArgumentsString(fn.length),deprecate=this,stack=getStack(),site=callSiteLocation(stack[1]);site.name=fn.name;var deprecatedfn=eval("(function ("+args+') {\n"use strict"\nlog.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n})');return deprecatedfn}function wrapproperty(e,t,i){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new TypeError("argument obj must be object");var o=Object.getOwnPropertyDescriptor(e,t);if(!o)throw new TypeError("must call property on owner object");if(!o.configurable)throw new TypeError("property must be configurable");var s=this,r=callSiteLocation(getStack()[1]);r.name=t,"value"in o&&(o=convertDataDescriptorToAccessor(e,t,i));var n=o.get,a=o.set;"function"==typeof n&&(o.get=function(){return log.call(s,i,r),n.apply(this,arguments)}),"function"==typeof a&&(o.set=function(){return log.call(s,i,r),a.apply(this,arguments)}),Object.defineProperty(e,t,o)}function DeprecationError(e,t,i){var o,s=new Error;return Object.defineProperty(s,"constructor",{value:DeprecationError}),Object.defineProperty(s,"message",{configurable:!0,enumerable:!1,value:t,writable:!0}),Object.defineProperty(s,"name",{enumerable:!1,configurable:!0,value:"DeprecationError",writable:!0}),Object.defineProperty(s,"namespace",{configurable:!0,enumerable:!1,value:e,writable:!0}),Object.defineProperty(s,"stack",{configurable:!0,enumerable:!1,get:function(){return void 0!==o?o:o=createStackString.call(this,i)},set:function(e){o=e}}),s}},function(e,t){e.exports=require("events")},function(e,t,i){"use strict";
/*!
 * depd
 * Copyright(c) 2014 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){var t=!0,i=function(e){var t,i="";e.isNative()?i="native":e.isEval()?(t=e.getScriptNameOrSourceURL())||(i=e.getEvalOrigin()):t=e.getFileName();if(t){i+=t;var o=e.getLineNumber();if(null!=o){i+=":"+o;var s=e.getColumnNumber();s&&(i+=":"+s)}}return i||"unknown source"}(e),o=e.getFunctionName(),s=e.isConstructor(),r=!(e.isToplevel()||s),n="";if(r){var a=e.getMethodName(),d=(c=e.receiver).constructor&&c.constructor.name||null;o?(d&&0!==o.indexOf(d)&&(n+=d+"."),n+=o,a&&o.lastIndexOf("."+a)!==o.length-a.length-1&&(n+=" [as "+a+"]")):n+=d+"."+(a||"<anonymous>")}else s?n+="new "+(o||"<anonymous>"):o?n+=o:(t=!1,n+=i);var c;t&&(n+=" ("+i+")");return n}},function(e,t,i){"use strict";
/*!
 * depd
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e,t){return e.listeners(t).length}},function(e,t){e.exports=require("path")},function(e,t,i){"use strict";e.exports=Object.setPrototypeOf||({__proto__:[]}instanceof Array?function(e,t){return e.__proto__=t,e}:function(e,t){for(var i in t)Object.prototype.hasOwnProperty.call(e,i)||(e[i]=t[i]);return e})},function(e,t,i){"use strict";
/*!
 * statuses
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */var o=i(129);function s(e){if("number"==typeof e){if(!s[e])throw new Error("invalid status code: "+e);return e}if("string"!=typeof e)throw new TypeError("code must be a number or string");var t=parseInt(e,10);if(!isNaN(t)){if(!s[t])throw new Error("invalid status code: "+t);return t}if(!(t=s[e.toLowerCase()]))throw new Error('invalid status message: "'+e+'"');return t}e.exports=s,s.STATUS_CODES=o,s.codes=function(e,t){var i=[];return Object.keys(t).forEach((function(o){var s=t[o],r=Number(o);e[r]=s,e[s]=r,e[s.toLowerCase()]=r,i.push(r)})),i}(s,o),s.redirect={300:!0,301:!0,302:!0,303:!0,305:!0,307:!0,308:!0},s.empty={204:!0,205:!0,304:!0},s.retry={502:!0,503:!0,504:!0}},function(e){e.exports=JSON.parse('{"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","306":"(Unused)","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I\'m a teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Unordered Collection","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}')},function(e,t,i){try{var o=i(131);if("function"!=typeof o.inherits)throw"";e.exports=o.inherits}catch(t){e.exports=i(132)}},function(e,t){e.exports=require("util")},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var i=function(){};i.prototype=t.prototype,e.prototype=new i,e.prototype.constructor=e}}},function(e,t,i){"use strict";
/*!
 * toidentifier
 * Copyright(c) 2016 Douglas Christopher Wilson
 * MIT Licensed
 */e.exports=function(e){return e.split(" ").map((function(e){return e.slice(0,1).toUpperCase()+e.slice(1)})).join("").replace(/[^ _0-9a-z]/gi,"")}},function(e,t,i){var o=Array.prototype.slice,s=i(135),r=i(136),n=e.exports=function(e,t,i){return i||(i={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?i.strict?e===t:e==t:function(e,t,i){var c,l;if(a(e)||a(t))return!1;if(e.prototype!==t.prototype)return!1;if(r(e))return!!r(t)&&(e=o.call(e),t=o.call(t),n(e,t,i));if(d(e)){if(!d(t))return!1;if(e.length!==t.length)return!1;for(c=0;c<e.length;c++)if(e[c]!==t[c])return!1;return!0}try{var p=s(e),u=s(t)}catch(e){return!1}if(p.length!=u.length)return!1;for(p.sort(),u.sort(),c=p.length-1;c>=0;c--)if(p[c]!=u[c])return!1;for(c=p.length-1;c>=0;c--)if(l=p[c],!n(e[l],t[l],i))return!1;return typeof e==typeof t}(e,t,i))};function a(e){return null==e}function d(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}},function(e,t){function i(e){var t=[];for(var i in e)t.push(i);return t}(e.exports="function"==typeof Object.keys?Object.keys:i).shim=i},function(e,t){var i="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();function o(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function s(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}(t=e.exports=i?o:s).supported=o,t.unsupported=s},function(e,t,i){var o=i(138);function s(e){return/^[\w\.\-][\w\.\-\|]+[\w\.\-]$/.test(e)}i(16).parse=function(e){var t=function(e){var t={name:"",string:{},regex:""};if(i=e,""===i||/^[\w\.-]+$/.test(i))return t.string[e]=!0,t;var i;if(s(e))return e.split("|").forEach((function(e){t.string[e]=!0})),t;if(!(e=e.replace(/^\:\w+\b/,(function(e){return t.name=e.slice(1),""}))))return t;if(/^\(.+\)$/.test(e)&&(e=e.slice(1,-1)))return s(e)?e.split("|").filter((function(e){t.string[e]=!0})):t.regex=e,t}(e);return o(t,"Invalid parsed string: "+e),t}},function(e,t){e.exports=require("assert")},function(e,t,i){const o=i(140);e.exports=function(e,t){if(!t.length)return null;const i=o.sort(t),s=i.map(t=>{const i=o(t),s=o(e);return Math.abs(100*i.major+10*i.minor+i.patch-(100*s.major+10*s.minor+s.patch))}),r=Math.min.apply(null,s);return i[s.indexOf(r)]}},function(e,t){var i;t=e.exports=z,i="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:function(){},t.SEMVER_SPEC_VERSION="2.0.0";var o=Number.MAX_SAFE_INTEGER||9007199254740991,s=t.re=[],r=t.src=[],n=0,a=n++;r[a]="0|[1-9]\\d*";var d=n++;r[d]="[0-9]+";var c=n++;r[c]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var l=n++;r[l]="("+r[a]+")\\.("+r[a]+")\\.("+r[a]+")";var p=n++;r[p]="("+r[d]+")\\.("+r[d]+")\\.("+r[d]+")";var u=n++;r[u]="(?:"+r[a]+"|"+r[c]+")";var h=n++;r[h]="(?:"+r[d]+"|"+r[c]+")";var m=n++;r[m]="(?:-("+r[u]+"(?:\\."+r[u]+")*))";var f=n++;r[f]="(?:-?("+r[h]+"(?:\\."+r[h]+")*))";var y=n++;r[y]="[0-9A-Za-z-]+";var g=n++;r[g]="(?:\\+("+r[y]+"(?:\\."+r[y]+")*))";var _=n++,b="v?"+r[l]+r[m]+"?"+r[g]+"?";r[_]="^"+b+"$";var w="[v=\\s]*"+r[p]+r[f]+"?"+r[g]+"?",x=n++;r[x]="^"+w+"$";var v=n++;r[v]="((?:<|>)?=?)";var T=n++;r[T]=r[d]+"|x|X|\\*";var E=n++;r[E]=r[a]+"|x|X|\\*";var S=n++;r[S]="[v=\\s]*("+r[E]+")(?:\\.("+r[E]+")(?:\\.("+r[E]+")(?:"+r[m]+")?"+r[g]+"?)?)?";var O=n++;r[O]="[v=\\s]*("+r[T]+")(?:\\.("+r[T]+")(?:\\.("+r[T]+")(?:"+r[f]+")?"+r[g]+"?)?)?";var A=n++;r[A]="^"+r[v]+"\\s*"+r[S]+"$";var q=n++;r[q]="^"+r[v]+"\\s*"+r[O]+"$";var R=n++;r[R]="(?:^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])";var N=n++;r[N]="(?:~>?)";var C=n++;r[C]="(\\s*)"+r[N]+"\\s+",s[C]=new RegExp(r[C],"g");var k=n++;r[k]="^"+r[N]+r[S]+"$";var I=n++;r[I]="^"+r[N]+r[O]+"$";var D=n++;r[D]="(?:\\^)";var P=n++;r[P]="(\\s*)"+r[D]+"\\s+",s[P]=new RegExp(r[P],"g");var L=n++;r[L]="^"+r[D]+r[S]+"$";var W=n++;r[W]="^"+r[D]+r[O]+"$";var G=n++;r[G]="^"+r[v]+"\\s*("+w+")$|^$";var J=n++;r[J]="^"+r[v]+"\\s*("+b+")$|^$";var M=n++;r[M]="(\\s*)"+r[v]+"\\s*("+w+"|"+r[S]+")",s[M]=new RegExp(r[M],"g");var j=n++;r[j]="^\\s*("+r[S]+")\\s+-\\s+("+r[S]+")\\s*$";var U=n++;r[U]="^\\s*("+r[O]+")\\s+-\\s+("+r[O]+")\\s*$";var B=n++;r[B]="(<|>)?=?\\s*\\*";for(var F=0;F<35;F++)i(F,r[F]),s[F]||(s[F]=new RegExp(r[F]));function H(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof z)return e;if("string"!=typeof e)return null;if(e.length>256)return null;if(!(t.loose?s[x]:s[_]).test(e))return null;try{return new z(e,t)}catch(e){return null}}function z(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof z){if(e.loose===t.loose)return e;e=e.version}else if("string"!=typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>256)throw new TypeError("version is longer than 256 characters");if(!(this instanceof z))return new z(e,t);i("SemVer",e,t),this.options=t,this.loose=!!t.loose;var r=e.trim().match(t.loose?s[x]:s[_]);if(!r)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+r[1],this.minor=+r[2],this.patch=+r[3],this.major>o||this.major<0)throw new TypeError("Invalid major version");if(this.minor>o||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>o||this.patch<0)throw new TypeError("Invalid patch version");r[4]?this.prerelease=r[4].split(".").map((function(e){if(/^[0-9]+$/.test(e)){var t=+e;if(t>=0&&t<o)return t}return e})):this.prerelease=[],this.build=r[5]?r[5].split("."):[],this.format()}t.parse=H,t.valid=function(e,t){var i=H(e,t);return i?i.version:null},t.clean=function(e,t){var i=H(e.trim().replace(/^[=v]+/,""),t);return i?i.version:null},t.SemVer=z,z.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},z.prototype.toString=function(){return this.version},z.prototype.compare=function(e){return i("SemVer.compare",this.version,this.options,e),e instanceof z||(e=new z(e,this.options)),this.compareMain(e)||this.comparePre(e)},z.prototype.compareMain=function(e){return e instanceof z||(e=new z(e,this.options)),Q(this.major,e.major)||Q(this.minor,e.minor)||Q(this.patch,e.patch)},z.prototype.comparePre=function(e){if(e instanceof z||(e=new z(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var t=0;do{var o=this.prerelease[t],s=e.prerelease[t];if(i("prerelease compare",t,o,s),void 0===o&&void 0===s)return 0;if(void 0===s)return 1;if(void 0===o)return-1;if(o!==s)return Q(o,s)}while(++t)},z.prototype.inc=function(e,t){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",t);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",t);break;case"prepatch":this.prerelease.length=0,this.inc("patch",t),this.inc("pre",t);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",t),this.inc("pre",t);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{for(var i=this.prerelease.length;--i>=0;)"number"==typeof this.prerelease[i]&&(this.prerelease[i]++,i=-2);-1===i&&this.prerelease.push(0)}t&&(this.prerelease[0]===t?isNaN(this.prerelease[1])&&(this.prerelease=[t,0]):this.prerelease=[t,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this},t.inc=function(e,t,i,o){"string"==typeof i&&(o=i,i=void 0);try{return new z(e,i).inc(t,o).version}catch(e){return null}},t.diff=function(e,t){if($(e,t))return null;var i=H(e),o=H(t),s="";if(i.prerelease.length||o.prerelease.length){s="pre";var r="prerelease"}for(var n in i)if(("major"===n||"minor"===n||"patch"===n)&&i[n]!==o[n])return s+n;return r},t.compareIdentifiers=Q;var V=/^[0-9]+$/;function Q(e,t){var i=V.test(e),o=V.test(t);return i&&o&&(e=+e,t=+t),e===t?0:i&&!o?-1:o&&!i?1:e<t?-1:1}function K(e,t,i){return new z(e,i).compare(new z(t,i))}function Y(e,t,i){return K(e,t,i)>0}function X(e,t,i){return K(e,t,i)<0}function $(e,t,i){return 0===K(e,t,i)}function Z(e,t,i){return 0!==K(e,t,i)}function ee(e,t,i){return K(e,t,i)>=0}function te(e,t,i){return K(e,t,i)<=0}function ie(e,t,i,o){switch(t){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof i&&(i=i.version),e===i;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof i&&(i=i.version),e!==i;case"":case"=":case"==":return $(e,i,o);case"!=":return Z(e,i,o);case">":return Y(e,i,o);case">=":return ee(e,i,o);case"<":return X(e,i,o);case"<=":return te(e,i,o);default:throw new TypeError("Invalid operator: "+t)}}function oe(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof oe){if(e.loose===!!t.loose)return e;e=e.value}if(!(this instanceof oe))return new oe(e,t);i("comparator",e,t),this.options=t,this.loose=!!t.loose,this.parse(e),this.semver===se?this.value="":this.value=this.operator+this.semver.version,i("comp",this)}t.rcompareIdentifiers=function(e,t){return Q(t,e)},t.major=function(e,t){return new z(e,t).major},t.minor=function(e,t){return new z(e,t).minor},t.patch=function(e,t){return new z(e,t).patch},t.compare=K,t.compareLoose=function(e,t){return K(e,t,!0)},t.rcompare=function(e,t,i){return K(t,e,i)},t.sort=function(e,i){return e.sort((function(e,o){return t.compare(e,o,i)}))},t.rsort=function(e,i){return e.sort((function(e,o){return t.rcompare(e,o,i)}))},t.gt=Y,t.lt=X,t.eq=$,t.neq=Z,t.gte=ee,t.lte=te,t.cmp=ie,t.Comparator=oe;var se={};function re(e,t){if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),e instanceof re)return e.loose===!!t.loose&&e.includePrerelease===!!t.includePrerelease?e:new re(e.raw,t);if(e instanceof oe)return new re(e.value,t);if(!(this instanceof re))return new re(e,t);if(this.options=t,this.loose=!!t.loose,this.includePrerelease=!!t.includePrerelease,this.raw=e,this.set=e.split(/\s*\|\|\s*/).map((function(e){return this.parseRange(e.trim())}),this).filter((function(e){return e.length})),!this.set.length)throw new TypeError("Invalid SemVer Range: "+e);this.format()}function ne(e){return!e||"x"===e.toLowerCase()||"*"===e}function ae(e,t,i,o,s,r,n,a,d,c,l,p,u){return((t=ne(i)?"":ne(o)?">="+i+".0.0":ne(s)?">="+i+"."+o+".0":">="+t)+" "+(a=ne(d)?"":ne(c)?"<"+(+d+1)+".0.0":ne(l)?"<"+d+"."+(+c+1)+".0":p?"<="+d+"."+c+"."+l+"-"+p:"<="+a)).trim()}function de(e,t,o){for(var s=0;s<e.length;s++)if(!e[s].test(t))return!1;if(t.prerelease.length&&!o.includePrerelease){for(s=0;s<e.length;s++)if(i(e[s].semver),e[s].semver!==se&&e[s].semver.prerelease.length>0){var r=e[s].semver;if(r.major===t.major&&r.minor===t.minor&&r.patch===t.patch)return!0}return!1}return!0}function ce(e,t,i){try{t=new re(t,i)}catch(e){return!1}return t.test(e)}function le(e,t,i,o){var s,r,n,a,d;switch(e=new z(e,o),t=new re(t,o),i){case">":s=Y,r=te,n=X,a=">",d=">=";break;case"<":s=X,r=ee,n=Y,a="<",d="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(ce(e,t,o))return!1;for(var c=0;c<t.set.length;++c){var l=t.set[c],p=null,u=null;if(l.forEach((function(e){e.semver===se&&(e=new oe(">=0.0.0")),p=p||e,u=u||e,s(e.semver,p.semver,o)?p=e:n(e.semver,u.semver,o)&&(u=e)})),p.operator===a||p.operator===d)return!1;if((!u.operator||u.operator===a)&&r(e,u.semver))return!1;if(u.operator===d&&n(e,u.semver))return!1}return!0}oe.prototype.parse=function(e){var t=this.options.loose?s[G]:s[J],i=e.match(t);if(!i)throw new TypeError("Invalid comparator: "+e);this.operator=i[1],"="===this.operator&&(this.operator=""),i[2]?this.semver=new z(i[2],this.options.loose):this.semver=se},oe.prototype.toString=function(){return this.value},oe.prototype.test=function(e){return i("Comparator.test",e,this.options.loose),this.semver===se||("string"==typeof e&&(e=new z(e,this.options)),ie(e,this.operator,this.semver,this.options))},oe.prototype.intersects=function(e,t){if(!(e instanceof oe))throw new TypeError("a Comparator is required");var i;if(t&&"object"==typeof t||(t={loose:!!t,includePrerelease:!1}),""===this.operator)return i=new re(e.value,t),ce(this.value,i,t);if(""===e.operator)return i=new re(this.value,t),ce(e.semver,i,t);var o=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),s=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),r=this.semver.version===e.semver.version,n=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),a=ie(this.semver,"<",e.semver,t)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),d=ie(this.semver,">",e.semver,t)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return o||s||r&&n||a||d},t.Range=re,re.prototype.format=function(){return this.range=this.set.map((function(e){return e.join(" ").trim()})).join("||").trim(),this.range},re.prototype.toString=function(){return this.range},re.prototype.parseRange=function(e){var t=this.options.loose;e=e.trim();var o=t?s[U]:s[j];e=e.replace(o,ae),i("hyphen replace",e),e=e.replace(s[M],"$1$2$3"),i("comparator trim",e,s[M]),e=(e=(e=e.replace(s[C],"$1~")).replace(s[P],"$1^")).split(/\s+/).join(" ");var r=t?s[G]:s[J],n=e.split(" ").map((function(e){return function(e,t){return i("comp",e,t),e=function(e,t){return e.trim().split(/\s+/).map((function(e){return function(e,t){i("caret",e,t);var o=t.loose?s[W]:s[L];return e.replace(o,(function(t,o,s,r,n){var a;return i("caret",e,t,o,s,r,n),ne(o)?a="":ne(s)?a=">="+o+".0.0 <"+(+o+1)+".0.0":ne(r)?a="0"===o?">="+o+"."+s+".0 <"+o+"."+(+s+1)+".0":">="+o+"."+s+".0 <"+(+o+1)+".0.0":n?(i("replaceCaret pr",n),a="0"===o?"0"===s?">="+o+"."+s+"."+r+"-"+n+" <"+o+"."+s+"."+(+r+1):">="+o+"."+s+"."+r+"-"+n+" <"+o+"."+(+s+1)+".0":">="+o+"."+s+"."+r+"-"+n+" <"+(+o+1)+".0.0"):(i("no pr"),a="0"===o?"0"===s?">="+o+"."+s+"."+r+" <"+o+"."+s+"."+(+r+1):">="+o+"."+s+"."+r+" <"+o+"."+(+s+1)+".0":">="+o+"."+s+"."+r+" <"+(+o+1)+".0.0"),i("caret return",a),a}))}(e,t)})).join(" ")}(e,t),i("caret",e),e=function(e,t){return e.trim().split(/\s+/).map((function(e){return function(e,t){var o=t.loose?s[I]:s[k];return e.replace(o,(function(t,o,s,r,n){var a;return i("tilde",e,t,o,s,r,n),ne(o)?a="":ne(s)?a=">="+o+".0.0 <"+(+o+1)+".0.0":ne(r)?a=">="+o+"."+s+".0 <"+o+"."+(+s+1)+".0":n?(i("replaceTilde pr",n),a=">="+o+"."+s+"."+r+"-"+n+" <"+o+"."+(+s+1)+".0"):a=">="+o+"."+s+"."+r+" <"+o+"."+(+s+1)+".0",i("tilde return",a),a}))}(e,t)})).join(" ")}(e,t),i("tildes",e),e=function(e,t){return i("replaceXRanges",e,t),e.split(/\s+/).map((function(e){return function(e,t){e=e.trim();var o=t.loose?s[q]:s[A];return e.replace(o,(function(t,o,s,r,n,a){i("xRange",e,t,o,s,r,n,a);var d=ne(s),c=d||ne(r),l=c||ne(n);return"="===o&&l&&(o=""),d?t=">"===o||"<"===o?"<0.0.0":"*":o&&l?(c&&(r=0),n=0,">"===o?(o=">=",c?(s=+s+1,r=0,n=0):(r=+r+1,n=0)):"<="===o&&(o="<",c?s=+s+1:r=+r+1),t=o+s+"."+r+"."+n):c?t=">="+s+".0.0 <"+(+s+1)+".0.0":l&&(t=">="+s+"."+r+".0 <"+s+"."+(+r+1)+".0"),i("xRange return",t),t}))}(e,t)})).join(" ")}(e,t),i("xrange",e),e=function(e,t){return i("replaceStars",e,t),e.trim().replace(s[B],"")}(e,t),i("stars",e),e}(e,this.options)}),this).join(" ").split(/\s+/);return this.options.loose&&(n=n.filter((function(e){return!!e.match(r)}))),n=n.map((function(e){return new oe(e,this.options)}),this)},re.prototype.intersects=function(e,t){if(!(e instanceof re))throw new TypeError("a Range is required");return this.set.some((function(i){return i.every((function(i){return e.set.some((function(e){return e.every((function(e){return i.intersects(e,t)}))}))}))}))},t.toComparators=function(e,t){return new re(e,t).set.map((function(e){return e.map((function(e){return e.value})).join(" ").trim().split(" ")}))},re.prototype.test=function(e){if(!e)return!1;"string"==typeof e&&(e=new z(e,this.options));for(var t=0;t<this.set.length;t++)if(de(this.set[t],e,this.options))return!0;return!1},t.satisfies=ce,t.maxSatisfying=function(e,t,i){var o=null,s=null;try{var r=new re(t,i)}catch(e){return null}return e.forEach((function(e){r.test(e)&&(o&&-1!==s.compare(e)||(s=new z(o=e,i)))})),o},t.minSatisfying=function(e,t,i){var o=null,s=null;try{var r=new re(t,i)}catch(e){return null}return e.forEach((function(e){r.test(e)&&(o&&1!==s.compare(e)||(s=new z(o=e,i)))})),o},t.minVersion=function(e,t){e=new re(e,t);var i=new z("0.0.0");if(e.test(i))return i;if(i=new z("0.0.0-0"),e.test(i))return i;i=null;for(var o=0;o<e.set.length;++o){e.set[o].forEach((function(e){var t=new z(e.semver.version);switch(e.operator){case">":0===t.prerelease.length?t.patch++:t.prerelease.push(0),t.raw=t.format();case"":case">=":i&&!Y(i,t)||(i=t);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+e.operator)}}))}if(i&&e.test(i))return i;return null},t.validRange=function(e,t){try{return new re(e,t).range||"*"}catch(e){return null}},t.ltr=function(e,t,i){return le(e,t,"<",i)},t.gtr=function(e,t,i){return le(e,t,">",i)},t.outside=le,t.prerelease=function(e,t){var i=H(e,t);return i&&i.prerelease.length?i.prerelease:null},t.intersects=function(e,t,i){return e=new re(e,i),t=new re(t,i),e.intersects(t)},t.coerce=function(e){if(e instanceof z)return e;if("string"!=typeof e)return null;var t=e.match(s[R]);if(null==t)return null;return H(t[1]+"."+(t[2]||"0")+"."+(t[3]||"0"))}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=i(142),s=i(143),r=i(144);t.default={"2.4.6":o,"5.6.4":s,"6.0.0":r}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=JSON.parse('{"bulk":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-bulk.html","methods":["POST","PUT"],"url":{"path":"/_bulk","paths":["/_bulk","/{index}/_bulk","/{index}/{type}/_bulk"],"parts":{"index":{"type":"string","description":"Default index for items which don\'t provide one"},"type":{"type":"string","description":"Default document type for items which don\'t provide one"}},"params":{"consistency":{"type":"enum","options":["one","quorum","all"],"description":"Explicit write consistency setting for the operation"},"refresh":{"type":"boolean","description":"Refresh the index after performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"type":{"type":"string","description":"Default document type for items which don\'t provide one"},"fields":{"type":"list","description":"Default comma-separated list of fields to return in the response for updates"}}},"body":{"description":"The operation definition and data (action-data pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),s=JSON.parse('{"cat.aliases":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-alias.html","methods":["GET"],"url":{"path":"/_cat/aliases","paths":["/_cat/aliases","/_cat/aliases/{name}"],"parts":{"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),r=JSON.parse('{"cat.allocation":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-allocation.html","methods":["GET"],"url":{"path":"/_cat/allocation","paths":["/_cat/allocation","/_cat/allocation/{node_id}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information"}},"params":{"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","m","g"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),n=JSON.parse('{"cat.count":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-count.html","methods":["GET"],"url":{"path":"/_cat/count","paths":["/_cat/count","/_cat/count/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),a=JSON.parse('{"cat.fielddata":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-fielddata.html","methods":["GET"],"url":{"path":"/_cat/fielddata","paths":["/_cat/fielddata","/_cat/fielddata/{fields}"],"parts":{"fields":{"type":"list","description":"A comma-separated list of fields to return the fielddata size"}},"params":{"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","m","g"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false},"fields":{"type":"list","description":"A comma-separated list of fields to return in the output"}}},"body":null}}'),d=JSON.parse('{"cat.health":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-health.html","methods":["GET"],"url":{"path":"/_cat/health","paths":["/_cat/health"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"ts":{"type":"boolean","description":"Set to false to disable timestamping","default":true},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),c=JSON.parse('{"cat.help":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat.html","methods":["GET"],"url":{"path":"/_cat","paths":["/_cat"],"parts":{},"params":{"help":{"type":"boolean","description":"Return help information","default":false}}},"body":null}}'),l=JSON.parse('{"cat.indices":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-indices.html","methods":["GET"],"url":{"path":"/_cat/indices","paths":["/_cat/indices","/_cat/indices/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","m","g"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"pri":{"type":"boolean","description":"Set to true to return stats only for primary shards","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),p=JSON.parse('{"cat.master":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-master.html","methods":["GET"],"url":{"path":"/_cat/master","paths":["/_cat/master"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),u=JSON.parse('{"cat.nodeattrs":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-nodeattrs.html","methods":["GET"],"url":{"path":"/_cat/nodeattrs","paths":["/_cat/nodeattrs"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),h=JSON.parse('{"cat.nodes":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-nodes.html","methods":["GET"],"url":{"path":"/_cat/nodes","paths":["/_cat/nodes"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),m=JSON.parse('{"cat.pending_tasks":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-pending-tasks.html","methods":["GET"],"url":{"path":"/_cat/pending_tasks","paths":["/_cat/pending_tasks"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),f=JSON.parse('{"cat.plugins":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-plugins.html","methods":["GET"],"url":{"path":"/_cat/plugins","paths":["/_cat/plugins"],"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),y=JSON.parse('{"cat.recovery":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-recovery.html","methods":["GET"],"url":{"path":"/_cat/recovery","paths":["/_cat/recovery","/_cat/recovery/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","m","g"]},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),g=JSON.parse('{"cat.repositories":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-repositories.html","methods":["GET"],"url":{"path":"/_cat/repositories","paths":["/_cat/repositories"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node","default":false},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),_=JSON.parse('{"cat.segments":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-segments.html","methods":["GET"],"url":{"path":"/_cat/segments","paths":["/_cat/segments","/_cat/segments/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),b=JSON.parse('{"cat.shards":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-shards.html","methods":["GET"],"url":{"path":"/_cat/shards","paths":["/_cat/shards","/_cat/shards/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),w=JSON.parse('{"cat.snapshots":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-snapshots.html","methods":["GET"],"url":{"path":"/_cat/snapshots/{repository}","paths":["/_cat/snapshots/{repository}"],"parts":{"repository":{"type":"list","required":true,"description":"Name of repository from which to fetch the snapshot information"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Set to true to ignore unavailable snapshots","default":false},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),x=JSON.parse('{"cat.thread_pool":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cat-thread-pool.html","methods":["GET"],"url":{"path":"/_cat/thread_pool","paths":["/_cat/thread_pool"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false},"full_id":{"type":"boolean","description":"Enables displaying the complete node ids","default":false}}},"body":null}}'),v=JSON.parse('{"clear_scroll":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-scroll.html","methods":["DELETE"],"url":{"path":"/_search/scroll/{scroll_id}","paths":["/_search/scroll/{scroll_id}","/_search/scroll"],"parts":{"scroll_id":{"type":"list","description":"A comma-separated list of scroll IDs to clear"}},"params":{}},"body":{"description":"A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter"}}}'),T=JSON.parse('{"cluster.get_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-update-settings.html","methods":["GET"],"url":{"path":"/_cluster/settings","paths":["/_cluster/settings"],"parts":{},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),E=JSON.parse('{"cluster.health":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-health.html","methods":["GET"],"url":{"path":"/_cluster/health","paths":["/_cluster/health","/_cluster/health/{index}"],"parts":{"index":{"type":"list","description":"Limit the information returned to a specific index"}},"params":{"level":{"type":"enum","options":["cluster","indices","shards"],"default":"cluster","description":"Specify the level of detail for returned information"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"wait_for_active_shards":{"type":"number","description":"Wait until the specified number of shards is active"},"wait_for_nodes":{"type":"string","description":"Wait until the specified number of nodes is available"},"wait_for_relocating_shards":{"type":"number","description":"Wait until the specified number of relocating shards is finished"},"wait_for_status":{"type":"enum","options":["green","yellow","red"],"default":null,"description":"Wait until cluster is in a specific state"}}},"body":null}}'),S=JSON.parse('{"cluster.pending_tasks":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-pending.html","methods":["GET"],"url":{"path":"/_cluster/pending_tasks","paths":["/_cluster/pending_tasks"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),O=JSON.parse('{"cluster.put_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-update-settings.html","methods":["PUT"],"url":{"path":"/_cluster/settings","paths":["/_cluster/settings"],"parts":{},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart)."}}}'),A=JSON.parse('{"cluster.reroute":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-reroute.html","methods":["POST"],"url":{"path":"/_cluster/reroute","paths":["/_cluster/reroute"],"parts":{},"params":{"dry_run":{"type":"boolean","description":"Simulate the operation only and return the resulting state"},"explain":{"type":"boolean","description":"Return an explanation of why the commands can or cannot be executed"},"metric":{"type":"list","options":["_all","blocks","metadata","nodes","routing_table","master_node","version"],"description":"Limit the information returned to the specified metrics. Defaults to all but metadata"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The definition of `commands` to perform (`move`, `cancel`, `allocate`)"}}}'),q=JSON.parse('{"cluster.state":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-state.html","methods":["GET"],"url":{"path":"/_cluster/state","paths":["/_cluster/state","/_cluster/state/{metric}","/_cluster/state/{metric}/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"metric":{"type":"list","options":["_all","blocks","metadata","nodes","routing_table","routing_nodes","master_node","version"],"description":"Limit the information returned to the specified metrics"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),R=JSON.parse('{"cluster.stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-stats.html","methods":["GET"],"url":{"path":"/_cluster/stats","paths":["/_cluster/stats","/_cluster/stats/nodes/{node_id}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),N=JSON.parse('{"count":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-count.html","methods":["POST","GET"],"url":{"path":"/_count","paths":["/_count","/{index}/_count","/{index}/{type}/_count"],"parts":{"index":{"type":"list","description":"A comma-separated list of indices to restrict the results"},"type":{"type":"list","description":"A comma-separated list of types to restrict the results"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"min_score":{"type":"number","description":"Include only documents with a specific `_score` value in the result"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"lowercase_expanded_terms":{"type":"boolean","description":"Specify whether query terms should be lowercased"}}},"body":{"description":"A query to restrict the results specified with the Query DSL (optional)"}}}'),C=JSON.parse('{"count_percolate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_percolate/count","paths":["/{index}/{type}/_percolate/count","/{index}/{type}/{id}/_percolate/count"],"parts":{"index":{"type":"string","required":true,"description":"The index of the document being count percolated."},"type":{"type":"string","required":true,"description":"The type of the document being count percolated."},"id":{"type":"string","required":false,"description":"Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster."}},"params":{"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"percolate_index":{"type":"string","description":"The index to count percolate the document into. Defaults to index."},"percolate_type":{"type":"string","description":"The type to count percolate document into. Defaults to type."},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The count percolator request definition using the percolate DSL","required":false}}}'),k=JSON.parse('{"delete":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-delete.html","methods":["DELETE"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"consistency":{"type":"enum","options":["one","quorum","all"],"description":"Specific write consistency setting for the operation"},"parent":{"type":"string","description":"ID of parent document"},"refresh":{"type":"boolean","description":"Refresh the index after performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),I=JSON.parse('{"delete_script":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-scripting.html","methods":["DELETE"],"url":{"path":"/_scripts/{lang}/{id}","paths":["/_scripts/{lang}/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"lang":{"type":"string","description":"Script language","required":true}},"params":{"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),D=JSON.parse('{"delete_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-template.html","methods":["DELETE"],"url":{"path":"/_search/template/{id}","paths":["/_search/template/{id}"],"parts":{"id":{"type":"string","description":"Template ID","required":true}},"params":{"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),P=JSON.parse('{"exists":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html","methods":["HEAD"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document (use `_all` to fetch the first document matching the ID across all types)"}},"params":{"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"}}},"body":null}}'),L=JSON.parse('{"explain":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-explain.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/{id}/_explain","paths":["/{index}/{type}/{id}/_explain"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)"},"analyzer":{"type":"string","description":"The analyzer for the query string query"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The default field for query string query (default: _all)"},"fields":{"type":"list","description":"A comma-separated list of fields to return in the response"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"lowercase_expanded_terms":{"type":"boolean","description":"Specify whether query terms should be lowercased"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"}}},"body":{"description":"The query definition using the Query DSL"}}}'),W=JSON.parse('{"field_stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-field-stats.html","methods":["GET","POST"],"url":{"path":"/_field_stats","paths":["/_field_stats","/{index}/_field_stats"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"fields":{"type":"list","description":"A comma-separated list of fields for to get field statistics for (min value, max value, and more)"},"level":{"type":"enum","options":["indices","cluster"],"default":"cluster","description":"Defines if field stats should be returned on a per index level or on a cluster wide level"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":{"description":"Field json objects containing the name and optionally a range to filter out indices result, that have results outside the defined bounds","required":false}}}'),G=JSON.parse('{"get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html","methods":["GET"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document (use `_all` to fetch the first document matching the ID across all types)"}},"params":{"fields":{"type":"list","description":"A comma-separated list of fields to return in the response"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),J=JSON.parse('{"get_script":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-scripting.html","methods":["GET"],"url":{"path":"/_scripts/{lang}/{id}","paths":["/_scripts/{lang}/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"lang":{"type":"string","description":"Script language","required":true}},"params":{"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),M=JSON.parse('{"get_source":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-get.html","methods":["GET"],"url":{"path":"/{index}/{type}/{id}/_source","paths":["/{index}/{type}/{id}/_source"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document; use `_all` to fetch the first document matching the ID across all types"}},"params":{"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),j=JSON.parse('{"get_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-template.html","methods":["GET"],"url":{"path":"/_search/template/{id}","paths":["/_search/template/{id}"],"parts":{"id":{"type":"string","description":"Template ID","required":true}},"params":{"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),U=JSON.parse('{"index":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-index_.html","methods":["POST","PUT"],"url":{"path":"/{index}/{type}","paths":["/{index}/{type}","/{index}/{type}/{id}"],"parts":{"id":{"type":"string","description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"consistency":{"type":"enum","options":["one","quorum","all"],"description":"Explicit write consistency setting for the operation"},"op_type":{"type":"enum","options":["index","create"],"default":"index","description":"Explicit operation type"},"parent":{"type":"string","description":"ID of the parent document"},"refresh":{"type":"boolean","description":"Refresh the affected shards after performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The document","required":true}}}'),B=JSON.parse('{"indices.analyze":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-analyze.html","methods":["GET","POST"],"url":{"path":"/_analyze","paths":["/_analyze","/{index}/_analyze"],"parts":{"index":{"type":"string","description":"The name of the index to scope the operation"}},"params":{"analyzer":{"type":"string","description":"The name of the analyzer to use"},"char_filters":{"type":"list","description":"Deprecated : A comma-separated list of character filters to use for the analysis"},"char_filter":{"type":"list","description":"A comma-separated list of character filters to use for the analysis"},"field":{"type":"string","description":"Use the analyzer configured for this field (instead of passing the analyzer name)"},"filters":{"type":"list","description":"Deprecated : A comma-separated list of filters to use for the analysis"},"filter":{"type":"list","description":"A comma-separated list of filters to use for the analysis"},"index":{"type":"string","description":"The name of the index to scope the operation"},"prefer_local":{"type":"boolean","description":"With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)"},"text":{"type":"list","description":"The text on which the analysis should be performed (when request body is not used)"},"tokenizer":{"type":"string","description":"The name of the tokenizer to use for the analysis"},"explain":{"type":"boolean","description":"With `true`, outputs more advanced details. (default: false)"},"attributes":{"type":"list","description":"A comma-separated list of token attributes to output, this parameter works only with `explain=true`"},"format":{"type":"enum","options":["detailed","text"],"default":"detailed","description":"Format of the output"}}},"body":{"description":"The text on which the analysis should be performed"}}}'),F=JSON.parse('{"indices.clear_cache":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-clearcache.html","methods":["POST","GET"],"url":{"path":"/_cache/clear","paths":["/_cache/clear","/{index}/_cache/clear"],"parts":{"index":{"type":"list","description":"A comma-separated list of index name to limit the operation"}},"params":{"field_data":{"type":"boolean","description":"Clear field data"},"fielddata":{"type":"boolean","description":"Clear field data"},"fields":{"type":"list","description":"A comma-separated list of fields to clear when using the `field_data` parameter (default: all)"},"query":{"type":"boolean","description":"Clear query caches"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"index":{"type":"list","description":"A comma-separated list of index name to limit the operation"},"recycler":{"type":"boolean","description":"Clear the recycler cache"},"request":{"type":"boolean","description":"Clear request cache"}}},"body":null}}'),H=JSON.parse('{"indices.close":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html","methods":["POST"],"url":{"path":"/{index}/_close","paths":["/{index}/_close"],"parts":{"index":{"type":"list","required":true,"description":"A comma separated list of indices to close"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),z=JSON.parse('{"indices.create":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-create-index.html","methods":["PUT","POST"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"string","required":true,"description":"The name of the index"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"update_all_types":{"type":"boolean","description":"Whether to update the mapping for all fields with the same name across all types or not"}}},"body":{"description":"The configuration for the index (`settings` and `mappings`)"}}}'),V=JSON.parse('{"indices.delete":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-delete-index.html","methods":["DELETE"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),Q=JSON.parse('{"indices.delete_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html","methods":["DELETE"],"url":{"path":"/{index}/_alias/{name}","paths":["/{index}/_alias/{name}","/{index}/_aliases/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names (supports wildcards); use `_all` for all indices"},"name":{"type":"list","required":true,"description":"A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices."}},"params":{"timeout":{"type":"time","description":"Explicit timestamp for the document"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),K=JSON.parse('{"indices.delete_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html","methods":["DELETE"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),Y=JSON.parse('{"indices.delete_warmer":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-warmers.html","methods":["DELETE"],"url":{"path":"/{index}/_warmer/{name}","paths":["/{index}/_warmer/{name}","/{index}/_warmers/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names to delete warmers from (supports wildcards); use `_all` to perform the operation on all indices."},"name":{"type":"list","required":true,"description":"A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters."}},"params":{"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"name":{"type":"list","description":"A comma-separated list of warmer names to delete (supports wildcards); use `_all` to delete all warmers in the specified indices. You must specify a name either in the uri or in the parameters."}}},"body":null}}'),X=JSON.parse('{"indices.exists":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-exists.html","methods":["HEAD"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of indices to check"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),$=JSON.parse('{"indices.exists_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html","methods":["HEAD"],"url":{"path":"/_alias/{name}","paths":["/_alias/{name}","/{index}/_alias/{name}","/{index}/_alias"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":["open","closed"],"description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),Z=JSON.parse('{"indices.exists_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html","methods":["HEAD"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ee=JSON.parse('{"indices.exists_type":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-types-exists.html","methods":["HEAD"],"url":{"path":"/{index}/{type}","paths":["/{index}/{type}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names; use `_all` to check the types across all indices"},"type":{"type":"list","required":true,"description":"A comma-separated list of document types to check"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),te=JSON.parse('{"indices.flush":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-flush.html","methods":["POST","GET"],"url":{"path":"/_flush","paths":["/_flush","/{index}/_flush"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string for all indices"}},"params":{"force":{"type":"boolean","description":"Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)"},"wait_if_ongoing":{"type":"boolean","description":"If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is false and will cause an exception to be thrown on the shard level if another flush operation is already running."},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),ie=JSON.parse('{"indices.flush_synced":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-synced-flush.html","methods":["POST","GET"],"url":{"path":"/_flush/synced","paths":["/_flush/synced","/{index}/_flush/synced"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string for all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),oe=JSON.parse('{"indices.forcemerge":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-forcemerge.html","methods":["POST","GET"],"url":{"path":"/_forcemerge","paths":["/_forcemerge","/{index}/_forcemerge"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"flush":{"type":"boolean","description":"Specify whether the index should be flushed after performing the operation (default: true)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"max_num_segments":{"type":"number","description":"The number of segments the index should be merged into (default: dynamic)"},"only_expunge_deletes":{"type":"boolean","description":"Specify whether the operation should only expunge deleted documents"},"operation_threading":{"description":"TODO: ?"},"wait_for_merge":{"type":"boolean","description":"Specify whether the request should block until the merge process is finished (default: true)"}}},"body":null}}'),se=JSON.parse('{"indices.get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-index.html","methods":["GET"],"url":{"path":"/{index}","paths":["/{index}","/{index}/{feature}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names"},"feature":{"type":"list","description":"A comma-separated list of features","options":["_settings","_mappings","_warmers","_aliases"]}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Ignore unavailable indexes (default: false)"},"allow_no_indices":{"type":"boolean","description":"Ignore if a wildcard expression resolves to no concrete indices (default: false)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether wildcard expressions should get expanded to open or closed indices (default: open)"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"human":{"type":"boolean","description":"Whether to return version and creation date values in human-readable format.","default":false}}},"body":null}}'),re=JSON.parse('{"indices.get_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html","methods":["GET"],"url":{"path":"/_alias/","paths":["/_alias","/_alias/{name}","/{index}/_alias/{name}","/{index}/_alias"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ne=JSON.parse('{"indices.get_aliases":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html","methods":["GET"],"url":{"path":"/_aliases","paths":["/_aliases","/{index}/_aliases","/{index}/_aliases/{name}","/_aliases/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to filter"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ae=JSON.parse('{"indices.get_field_mapping":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-field-mapping.html","methods":["GET"],"url":{"path":"/_mapping/field/{fields}","paths":["/_mapping/field/{fields}","/{index}/_mapping/field/{fields}","/_mapping/{type}/field/{fields}","/{index}/_mapping/{type}/field/{fields}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names"},"type":{"type":"list","description":"A comma-separated list of document types"},"fields":{"type":"list","description":"A comma-separated list of fields","required":true}},"params":{"include_defaults":{"type":"boolean","description":"Whether the default mapping values should be returned as well"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),de=JSON.parse('{"indices.get_mapping":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-mapping.html","methods":["GET"],"url":{"path":"/_mapping","paths":["/_mapping","/{index}/_mapping","/_mapping/{type}","/{index}/_mapping/{type}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names"},"type":{"type":"list","description":"A comma-separated list of document types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ce=JSON.parse('{"indices.get_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-get-settings.html","methods":["GET"],"url":{"path":"/_settings","paths":["/_settings","/{index}/_settings","/{index}/_settings/{name}","/_settings/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"name":{"type":"list","description":"The name of the settings that should be included"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":["open","closed"],"description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"human":{"type":"boolean","description":"Whether to return version and creation date values in human-readable format.","default":false}}},"body":null}}'),le=JSON.parse('{"indices.get_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html","methods":["GET"],"url":{"path":"/_template/{name}","paths":["/_template","/_template/{name}"],"parts":{"name":{"type":"list","required":false,"description":"The comma separated names of the index templates"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),pe=JSON.parse('{"indices.get_upgrade":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-upgrade.html","methods":["GET"],"url":{"path":"/_upgrade","paths":["/_upgrade","/{index}/_upgrade"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false}}},"body":null}}'),ue=JSON.parse('{"indices.get_warmer":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-warmers.html","methods":["GET"],"url":{"path":"/_warmer","paths":["/_warmer","/{index}/_warmer","/{index}/_warmer/{name}","/_warmer/{name}","/{index}/{type}/_warmer/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to restrict the operation; use `_all` to perform the operation on all indices"},"name":{"type":"list","description":"The name of the warmer (supports wildcards); leave empty to get all warmers"},"type":{"type":"list","description":"A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),he=JSON.parse('{"indices.open":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-open-close.html","methods":["POST"],"url":{"path":"/{index}/_open","paths":["/{index}/_open"],"parts":{"index":{"type":"list","required":true,"description":"A comma separated list of indices to open"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"closed","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),me=JSON.parse('{"indices.optimize":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-optimize.html","methods":["POST","GET"],"url":{"path":"/_optimize","paths":["/_optimize","/{index}/_optimize"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"flush":{"type":"boolean","description":"Specify whether the index should be flushed after performing the operation (default: true)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"max_num_segments":{"type":"number","description":"The number of segments the index should be merged into (default: dynamic)"},"only_expunge_deletes":{"type":"boolean","description":"Specify whether the operation should only expunge deleted documents"},"operation_threading":{"description":"TODO: ?"},"wait_for_merge":{"type":"boolean","description":"Specify whether the request should block until the merge process is finished (default: true)"}}},"body":null}}'),fe=JSON.parse('{"indices.put_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html","methods":["PUT","POST"],"url":{"path":"/{index}/_alias/{name}","paths":["/{index}/_alias/{name}","/{index}/_aliases/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices."},"name":{"type":"string","required":true,"description":"The name of the alias to be created or updated"}},"params":{"timeout":{"type":"time","description":"Explicit timestamp for the document"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The settings for the alias, such as `routing` or `filter`","required":false}}}'),ye=JSON.parse('{"indices.put_mapping":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-put-mapping.html","methods":["PUT","POST"],"url":{"path":"/{index}/{type}/_mapping","paths":["/{index}/{type}/_mapping","/{index}/_mapping/{type}","/_mapping/{type}","/{index}/{type}/_mappings","/{index}/_mappings/{type}","/_mappings/{type}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices."},"type":{"type":"string","required":true,"description":"The name of the document type"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"update_all_types":{"type":"boolean","description":"Whether to update the mapping for all fields with the same name across all types or not"}}},"body":{"description":"The mapping definition","required":true}}}'),ge=JSON.parse('{"indices.put_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-update-settings.html","methods":["PUT"],"url":{"path":"/_settings","paths":["/_settings","/{index}/_settings"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"}}},"body":{"description":"The index settings to be updated","required":true}}}'),_e=JSON.parse('{"indices.put_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-templates.html","methods":["PUT","POST"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"order":{"type":"number","description":"The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)"},"create":{"type":"boolean","description":"Whether the index template should only be added if new or can also replace an existing one","default":false},"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"}}},"body":{"description":"The template definition","required":true}}}'),be=JSON.parse('{"indices.put_warmer":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-warmers.html","methods":["PUT","POST"],"url":{"path":"/{index}/_warmer/{name}","paths":["/_warmer/{name}","/{index}/_warmer/{name}","/{index}/{type}/_warmer/{name}","/_warmers/{name}","/{index}/_warmers/{name}","/{index}/{type}/_warmers/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices"},"name":{"type":"string","required":true,"description":"The name of the warmer"},"type":{"type":"list","description":"A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types"}},"params":{"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed) in the search request to warm"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices in the search request to warm. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both, in the search request to warm."},"request_cache":{"type":"boolean","description":"Specify whether the request to be warmed should use the request cache, defaults to index level setting"}}},"body":{"description":"The search request definition for the warmer (query, filters, facets, sorting, etc)","required":true}}}'),we=JSON.parse('{"indices.recovery":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-recovery.html","methods":["GET"],"url":{"path":"/_recovery","paths":["/_recovery","/{index}/_recovery"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"detailed":{"type":"boolean","description":"Whether to display detailed information about shard recovery","default":false},"active_only":{"type":"boolean","description":"Display only those recoveries that are currently on-going","default":false},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false}}},"body":null}}'),xe=JSON.parse('{"indices.refresh":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-refresh.html","methods":["POST","GET"],"url":{"path":"/_refresh","paths":["/_refresh","/{index}/_refresh"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"force":{"type":"boolean","description":"Force a refresh even if not required","default":false},"operation_threading":{"description":"TODO: ?"}}},"body":null}}'),ve=JSON.parse('{"indices.segments":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-segments.html","methods":["GET"],"url":{"path":"/_segments","paths":["/_segments","/{index}/_segments"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false},"operation_threading":{"description":"TODO: ?"},"verbose":{"type":"boolean","description":"Includes detailed memory usage by Lucene.","default":false}}},"body":null}}'),Te=JSON.parse('{"indices.shard_stores":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-shards-stores.html","methods":["GET"],"url":{"path":"/_shard_stores","paths":["/_shard_stores","/{index}/_shard_stores"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"status":{"type":"list","options":["green","yellow","red","all"],"description":"A comma-separated list of statuses used to filter on shards to get store information for"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"}}},"body":null}}'),Ee=JSON.parse('{"indices.stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-stats.html","methods":["GET"],"url":{"path":"/_stats","paths":["/_stats","/_stats/{metric}","/{index}/_stats","/{index}/_stats/{metric}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"metric":{"type":"list","options":["_all","completion","docs","fielddata","query_cache","flush","get","indexing","merge","percolate","request_cache","refresh","search","segments","store","warmer","suggest"],"description":"Limit the information returned the specific metrics."}},"params":{"completion_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` index metric (supports wildcards)"},"fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)"},"groups":{"type":"list","description":"A comma-separated list of search groups for `search` index metric"},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false},"level":{"type":"enum","description":"Return stats aggregated at cluster, index or shard level","options":["cluster","indices","shards"],"default":"indices"},"types":{"type":"list","description":"A comma-separated list of document types for the `indexing` index metric"}}},"body":null}}'),Se=JSON.parse('{"indices.update_aliases":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-aliases.html","methods":["POST"],"url":{"path":"/_aliases","paths":["/_aliases"],"parts":{},"params":{"timeout":{"type":"time","description":"Request timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The definition of `actions` to perform","required":true}}}'),Oe=JSON.parse('{"indices.upgrade":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/indices-upgrade.html","methods":["POST"],"url":{"path":"/_upgrade","paths":["/_upgrade","/{index}/_upgrade"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"wait_for_completion":{"type":"boolean","description":"Specify whether the request should block until the all segments are upgraded (default: false)"},"only_ancient_segments":{"type":"boolean","description":"If true, only ancient (an older Lucene major release) segments will be upgraded"}}},"body":null}}'),Ae=JSON.parse('{"indices.validate_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-validate.html","methods":["GET","POST"],"url":{"path":"/_validate/query","paths":["/_validate/query","/{index}/_validate/query","/{index}/{type}/_validate/query"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types"}},"params":{"explain":{"type":"boolean","description":"Return detailed information about the error"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"lowercase_expanded_terms":{"type":"boolean","description":"Specify whether query terms should be lowercased"},"rewrite":{"type":"boolean","description":"Provide a more detailed explanation showing the actual Lucene query that will be executed."}}},"body":{"description":"The query definition specified with the Query DSL"}}}'),qe=JSON.parse('{"info":{"documentation":"https://www.elastic.co/guide/","methods":["GET"],"url":{"path":"/","paths":["/"],"parts":{},"params":{}},"body":null}}'),Re=JSON.parse('{"mget":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-get.html","methods":["GET","POST"],"url":{"path":"/_mget","paths":["/_mget","/{index}/_mget","/{index}/{type}/_mget"],"parts":{"index":{"type":"string","description":"The name of the index"},"type":{"type":"string","description":"The type of the document"}},"params":{"fields":{"type":"list","description":"A comma-separated list of fields to return in the response"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"}}},"body":{"description":"Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.","required":true}}}'),Ne=JSON.parse('{"mpercolate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html","methods":["GET","POST"],"url":{"path":"/_mpercolate","paths":["/_mpercolate","/{index}/_mpercolate","/{index}/{type}/_mpercolate"],"parts":{"index":{"type":"string","description":"The index of the document being count percolated to use as default"},"type":{"type":"string","description":"The type of the document being percolated to use as default."}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":{"description":"The percolate request definitions (header & body pair), separated by newlines","required":true,"serialize":"bulk"}}}'),Ce=JSON.parse('{"msearch":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-multi-search.html","methods":["GET","POST"],"url":{"path":"/_msearch","paths":["/_msearch","/{index}/_msearch","/{index}/{type}/_msearch"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to use as default"},"type":{"type":"list","description":"A comma-separated list of document types to use as default"}},"params":{"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch","count","scan"],"description":"Search operation type"}}},"body":{"description":"The request definitions (metadata-search request definition pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),ke=JSON.parse('{"mtermvectors":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-multi-termvectors.html","methods":["GET","POST"],"url":{"path":"/_mtermvectors","paths":["/_mtermvectors","/{index}/_mtermvectors","/{index}/{type}/_mtermvectors"],"parts":{"index":{"type":"string","description":"The index in which the document resides."},"type":{"type":"string","description":"The type of the document."}},"params":{"ids":{"type":"list","description":"A comma-separated list of documents ids. You must define ids as parameter or set \\"ids\\" or \\"docs\\" in the request body","required":false},"term_statistics":{"type":"boolean","description":"Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":false,"required":false},"field_statistics":{"type":"boolean","description":"Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"fields":{"type":"list","description":"A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"offsets":{"type":"boolean","description":"Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"positions":{"type":"boolean","description":"Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"payloads":{"type":"boolean","description":"Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"routing":{"type":"string","description":"Specific routing value. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"parent":{"type":"string","description":"Parent id of documents. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"realtime":{"type":"boolean","description":"Specifies if requests are real-time as opposed to near-real-time (default: true).","required":false},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.","required":false}}}'),Ie=JSON.parse('{"nodes.hot_threads":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-hot-threads.html","methods":["GET"],"url":{"path":"/_nodes/hot_threads","paths":["/_cluster/nodes/hotthreads","/_cluster/nodes/hot_threads","/_cluster/nodes/{node_id}/hotthreads","/_cluster/nodes/{node_id}/hot_threads","/_nodes/hotthreads","/_nodes/hot_threads","/_nodes/{node_id}/hotthreads","/_nodes/{node_id}/hot_threads"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"interval":{"type":"time","description":"The interval for the second sampling of threads"},"snapshots":{"type":"number","description":"Number of samples of thread stacktrace (default: 10)"},"threads":{"type":"number","description":"Specify the number of threads to provide information for (default: 3)"},"ignore_idle_threads":{"type":"boolean","description":"Don\'t show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)"},"type":{"type":"enum","options":["cpu","wait","block"],"description":"The type to sample (default: cpu)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),De=JSON.parse('{"nodes.info":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-info.html","methods":["GET"],"url":{"path":"/_nodes","paths":["/_nodes","/_nodes/{node_id}","/_nodes/{metric}","/_nodes/{node_id}/{metric}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"metric":{"type":"list","options":["settings","os","process","jvm","thread_pool","transport","http","plugins"],"description":"A comma-separated list of metrics you wish returned. Leave empty to return all."}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),Pe=JSON.parse('{"nodes.stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-nodes-stats.html","methods":["GET"],"url":{"path":"/_nodes/stats","paths":["/_nodes/stats","/_nodes/{node_id}/stats","/_nodes/stats/{metric}","/_nodes/{node_id}/stats/{metric}","/_nodes/stats/{metric}/{index_metric}","/_nodes/{node_id}/stats/{metric}/{index_metric}"],"parts":{"metric":{"type":"list","options":["_all","breaker","fs","http","indices","jvm","os","process","thread_pool","transport"],"description":"Limit the information returned to the specified metrics"},"index_metric":{"type":"list","options":["_all","completion","docs","fielddata","query_cache","flush","get","indexing","merge","percolate","request_cache","refresh","search","segments","store","warmer","suggest"],"description":"Limit the information returned for `indices` metric to the specific index metrics. Isn\'t used if `indices` (or `all`) metric isn\'t specified."},"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"completion_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` index metric (supports wildcards)"},"fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)"},"groups":{"type":"boolean","description":"A comma-separated list of search groups for `search` index metric"},"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false},"level":{"type":"enum","description":"Return indices stats aggregated at node, index or shard level","options":["node","indices","shards"],"default":"node"},"types":{"type":"list","description":"A comma-separated list of document types for the `indexing` index metric"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),Le=JSON.parse('{"percolate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-percolate.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_percolate","paths":["/{index}/{type}/_percolate","/{index}/{type}/{id}/_percolate"],"parts":{"index":{"type":"string","required":true,"description":"The index of the document being percolated."},"type":{"type":"string","required":true,"description":"The type of the document being percolated."},"id":{"type":"string","required":false,"description":"Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster."}},"params":{"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"percolate_index":{"type":"string","description":"The index to percolate the document into. Defaults to index."},"percolate_type":{"type":"string","description":"The type to percolate document into. Defaults to type."},"percolate_routing":{"type":"string","description":"The routing value to use when percolating the existing document."},"percolate_preference":{"type":"string","description":"Which shard to prefer when executing the percolate request."},"percolate_format":{"type":"enum","options":["ids"],"description":"Return an array of matching query IDs instead of objects"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The percolator request definition using the percolate DSL","required":false}}}'),We=JSON.parse('{"ping":{"documentation":"https://www.elastic.co/guide/","methods":["HEAD"],"url":{"path":"/","paths":["/"],"parts":{},"params":{}},"body":null}}'),Ge=JSON.parse('{"put_script":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-scripting.html","methods":["PUT","POST"],"url":{"path":"/_scripts/{lang}/{id}","paths":["/_scripts/{lang}/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"lang":{"type":"string","description":"Script language","required":true}},"params":{"op_type":{"type":"enum","options":["index","create"],"default":"index","description":"Explicit operation type"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The document","required":true}}}'),Je=JSON.parse('{"put_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-template.html","methods":["PUT","POST"],"url":{"path":"/_search/template/{id}","paths":["/_search/template/{id}"],"parts":{"id":{"type":"string","description":"Template ID","required":true}},"params":{"op_type":{"type":"enum","options":["index","create"],"default":"index","description":"Explicit operation type"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The document","required":true}}}'),Me=JSON.parse('{"reindex":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-reindex.html","methods":["POST"],"url":{"path":"/_reindex","paths":["/_reindex"],"parts":{},"params":{"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"consistency":{"type":"enum","options":["one","quorum","all"],"description":"Explicit write consistency setting for the operation"},"wait_for_completion":{"type":"boolean","default":false,"description":"Should the request should block until the reindex is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle for this request in sub-requests per second. 0 means set no throttle."}}},"body":{"description":"The search definition using the Query DSL and the prototype for the index request.","required":true}}}'),je=JSON.parse('{"reindex_rethrottle":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-reindex.html","methods":["POST"],"url":{"path":"/_reindex/{task_id}/_rethrottle","paths":["/_reindex/{task_id}/_rethrottle","/_update_by_query/{task_id}/_rethrottle"],"parts":{"task_id":{"type":"string","description":"The task id to rethrottle"}},"params":{"requests_per_second":{"type":"number","required":true,"description":"The throttle to set on this request in sub-requests per second. \\"unlimited\\" means set no throttle, otherwise it must be a float greater than 0."}}},"body":null}}'),Ue=JSON.parse('{"render_search_template":{"documentation":"http://www.elasticsearch.org/guide/en/elasticsearch/reference/2.4/search-template.html","methods":["GET","POST"],"url":{"path":"/_render/template","paths":["/_render/template","/_render/template/{id}"],"parts":{"id":{"type":"string","description":"The id of the stored search template"}}},"body":{"description":"The search definition template and its params"}}}'),Be=JSON.parse('{"scroll":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-scroll.html","methods":["GET","POST"],"url":{"path":"/_search/scroll","paths":["/_search/scroll","/_search/scroll/{scroll_id}"],"parts":{"scroll_id":{"type":"string","description":"The scroll ID"}},"params":{"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"scroll_id":{"type":"string","description":"The scroll ID for scrolled search"}}},"body":{"description":"The scroll ID if not passed by URL or query parameter."}}}'),Fe=JSON.parse('{"search":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-search.html","methods":["GET","POST"],"url":{"path":"/_search","paths":["/_search","/{index}/_search","/{index}/{type}/_search"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"explain":{"type":"boolean","description":"Specify whether to return detailed information about score computation as part of a hit"},"fields":{"type":"list","description":"A comma-separated list of fields to return as part of a hit"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields to return as the field data representation of a field for each hit"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"lowercase_expanded_terms":{"type":"boolean","description":"Specify whether query terms should be lowercased"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch","count","scan"],"description":"Search operation type"},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"suggest_field":{"type":"string","description":"Specify which field to use for suggestions"},"suggest_mode":{"type":"enum","options":["missing","popular","always"],"default":"missing","description":"Specify suggest mode"},"suggest_size":{"type":"number","description":"How many suggestions to return in response"},"suggest_text":{"type":"string","description":"The source text for which the suggestions should be returned"},"timeout":{"type":"time","description":"Explicit operation timeout"},"track_scores":{"type":"boolean","description":"Whether to calculate and return scores even if they are not used for sorting"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"}}},"body":{"description":"The search definition using the Query DSL"}}}'),He=JSON.parse('{"search_exists":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-exists.html","methods":["POST","GET"],"url":{"path":"/_search/exists","paths":["/_search/exists","/{index}/_search/exists","/{index}/{type}/_search/exists"],"parts":{"index":{"type":"list","description":"A comma-separated list of indices to restrict the results"},"type":{"type":"list","description":"A comma-separated list of types to restrict the results"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"min_score":{"type":"number","description":"Include only documents with a specific `_score` value in the result"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"lowercase_expanded_terms":{"type":"boolean","description":"Specify whether query terms should be lowercased"}}},"body":{"description":"A query to restrict the results specified with the Query DSL (optional)"}}}'),ze=JSON.parse('{"search_shards":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-shards.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_search_shards","paths":["/_search_shards","/{index}/_search_shards","/{index}/{type}/_search_shards"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),Ve=JSON.parse('{"search_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html","methods":["GET","POST"],"url":{"path":"/_search/template","paths":["/_search/template","/{index}/_search/template","/{index}/{type}/_search/template"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch","count","scan"],"description":"Search operation type"}}},"body":{"description":"The search definition template and its params"}}}'),Qe=JSON.parse('{"snapshot.create":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["PUT","POST"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"wait_for_completion":{"type":"boolean","description":"Should this request wait until the operation has completed before returning","default":false}}},"body":{"description":"The snapshot definition","required":false}}}'),Ke=JSON.parse('{"snapshot.create_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["PUT","POST"],"url":{"path":"/_snapshot/{repository}","paths":["/_snapshot/{repository}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"verify":{"type":"boolean","description":"Whether to verify the repository after creation"}}},"body":{"description":"The repository definition","required":true}}}'),Ye=JSON.parse('{"snapshot.delete":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["DELETE"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),Xe=JSON.parse('{"snapshot.delete_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["DELETE"],"url":{"path":"/_snapshot/{repository}","paths":["/_snapshot/{repository}"],"parts":{"repository":{"type":"list","required":true,"description":"A comma-separated list of repository names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),$e=JSON.parse('{"snapshot.get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"list","required":true,"description":"A comma-separated list of snapshot names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),Ze=JSON.parse('{"snapshot.get_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot","paths":["/_snapshot","/_snapshot/{repository}"],"parts":{"repository":{"type":"list","description":"A comma-separated list of repository names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),et=JSON.parse('{"snapshot.restore":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["POST"],"url":{"path":"/_snapshot/{repository}/{snapshot}/_restore","paths":["/_snapshot/{repository}/{snapshot}/_restore"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"wait_for_completion":{"type":"boolean","description":"Should this request wait until the operation has completed before returning","default":false}}},"body":{"description":"Details of what to restore","required":false}}}'),tt=JSON.parse('{"snapshot.status":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot/_status","paths":["/_snapshot/_status","/_snapshot/{repository}/_status","/_snapshot/{repository}/{snapshot}/_status"],"parts":{"repository":{"type":"string","description":"A repository name"},"snapshot":{"type":"list","description":"A comma-separated list of snapshot names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),it=JSON.parse('{"snapshot.verify_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/modules-snapshots.html","methods":["POST"],"url":{"path":"/_snapshot/{repository}/_verify","paths":["/_snapshot/{repository}/_verify"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),ot=JSON.parse('{"suggest":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-suggesters.html","methods":["POST","GET"],"url":{"path":"/_suggest","paths":["/_suggest","/{index}/_suggest"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"}}},"body":{"description":"The request definition","required":true}}}'),st=JSON.parse('{"tasks.cancel":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/tasks.html#_task_cancellation","methods":["POST"],"url":{"path":"/_tasks","paths":["/_tasks/_cancel","/_tasks/{task_id}/_cancel"],"parts":{"task_id":{"type":"string","description":"Cancel the task with specified id"}},"params":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be cancelled. Leave empty to cancel all."},"parent_node":{"type":"string","description":"Cancel tasks with specified parent node."},"parent_task":{"type":"string","description":"Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all."}}},"body":null}}'),rt=JSON.parse('{"tasks.list":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/tasks.html#_current_tasks_information","methods":["GET"],"url":{"path":"/_tasks","paths":["/_tasks","/_tasks/{task_id}"],"parts":{"task_id":{"type":"string","description":"Return the task with specified id (node_id:task_number)"}},"params":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be returned. Leave empty to return all."},"detailed":{"type":"boolean","description":"Return detailed task information (default: false)"},"parent_node":{"type":"string","description":"Return tasks with specified parent node."},"parent_task":{"type":"string","description":"Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all."},"wait_for_completion":{"type":"boolean","description":"Wait for the matching tasks to complete (default: false)"}}},"body":null}}'),nt=JSON.parse('{"termvectors":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-termvectors.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_termvectors","paths":["/{index}/{type}/_termvectors","/{index}/{type}/{id}/_termvectors"],"parts":{"index":{"type":"string","description":"The index in which the document resides.","required":true},"type":{"type":"string","description":"The type of the document.","required":true},"id":{"type":"string","description":"The id of the document, when not specified a doc param should be supplied."}},"params":{"term_statistics":{"type":"boolean","description":"Specifies if total term frequency and document frequency should be returned.","default":false,"required":false},"field_statistics":{"type":"boolean","description":"Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.","default":true,"required":false},"dfs":{"type":"boolean","description":"Specifies if distributed frequencies should be returned instead shard frequencies.","default":false,"required":false},"fields":{"type":"list","description":"A comma-separated list of fields to return.","required":false},"offsets":{"type":"boolean","description":"Specifies if term offsets should be returned.","default":true,"required":false},"positions":{"type":"boolean","description":"Specifies if term positions should be returned.","default":true,"required":false},"payloads":{"type":"boolean","description":"Specifies if term payloads should be returned.","default":true,"required":false},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random).","required":false},"routing":{"type":"string","description":"Specific routing value.","required":false},"parent":{"type":"string","description":"Parent id of documents.","required":false},"realtime":{"type":"boolean","description":"Specifies if request is real-time as opposed to near-real-time (default: true).","required":false},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"Define parameters and or supply a document to get termvectors for. See documentation.","required":false}}}'),at=JSON.parse('{"update":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update.html","methods":["POST"],"url":{"path":"/{index}/{type}/{id}/_update","paths":["/{index}/{type}/{id}/_update"],"parts":{"id":{"type":"string","required":true,"description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"consistency":{"type":"enum","options":["one","quorum","all"],"description":"Explicit write consistency setting for the operation"},"fields":{"type":"list","description":"A comma-separated list of fields to return in the response"},"lang":{"type":"string","description":"The script language (default: groovy)"},"parent":{"type":"string","description":"ID of the parent document. Is is only used for routing and when for the upsert request"},"refresh":{"type":"boolean","description":"Refresh the index after performing the operation"},"retry_on_conflict":{"type":"number","description":"Specify how many times should the operation be retried when a conflict occurs (default: 0)"},"routing":{"type":"string","description":"Specific routing value"},"script":{"type":"string","description":"The URL-encoded script definition (instead of using request body)"},"script_id":{"type":"string","description":"The id of a stored script"},"scripted_upsert":{"type":"boolean","description":"True if the script referenced in script or script_id should be called to perform inserts - defaults to false"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","force"],"description":"Specific version type"}}},"body":{"description":"The request definition using either `script` or partial `doc`"}}}'),dt=JSON.parse('{"update_by_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/2.4/docs-update-by-query.html","methods":["POST"],"url":{"path":"/{index}/_update_by_query","paths":["/{index}/_update_by_query","/{index}/{type}/_update_by_query"],"comment":"most things below this are just copied from search.json","parts":{"index":{"required":true,"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"explain":{"type":"boolean","description":"Specify whether to return detailed information about score computation as part of a hit"},"fields":{"type":"list","description":"A comma-separated list of fields to return as part of a hit"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields to return as the field data representation of a field for each hit"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"conflicts":{"note":"This is not copied from search","type":"enum","options":["abort","proceed"],"default":"abort","description":"What to do when the reindex hits version conflicts?"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"lowercase_expanded_terms":{"type":"boolean","description":"Specify whether query terms should be lowercased"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"search_timeout":{"type":"time","description":"Explicit timeout for each search request. Defaults to no timeout."},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"suggest_field":{"type":"string","description":"Specify which field to use for suggestions"},"suggest_mode":{"type":"enum","options":["missing","popular","always"],"default":"missing","description":"Specify suggest mode"},"suggest_size":{"type":"number","description":"How many suggestions to return in response"},"suggest_text":{"type":"string","description":"The source text for which the suggestions should be returned"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"track_scores":{"type":"boolean","description":"Whether to calculate and return scores even if they are not used for sorting"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"version_type":{"type":"boolean","description":"Should the document increment the version number (internal) on hit or not (reindex)"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"consistency":{"type":"enum","options":["one","quorum","all"],"description":"Explicit write consistency setting for the operation"},"scroll_size":{"type":"number","defaut_value":100,"description":"Size on the scroll request powering the update_by_query"},"wait_for_completion":{"type":"boolean","default":false,"description":"Should the request should block until the reindex is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle for this request in sub-requests per second. 0 means set no throttle."}}},"body":{"description":"The search definition using the Query DSL"}}}');t.default={bulk:o.bulk,"cat.aliases":s["cat.aliases"],"cat.allocation":r["cat.allocation"],"cat.count":n["cat.count"],"cat.fielddata":a["cat.fielddata"],"cat.health":d["cat.health"],"cat.help":c["cat.help"],"cat.indices":l["cat.indices"],"cat.master":p["cat.master"],"cat.nodeattrs":u["cat.nodeattrs"],"cat.nodes":h["cat.nodes"],"cat.pending_tasks":m["cat.pending_tasks"],"cat.plugins":f["cat.plugins"],"cat.recovery":y["cat.recovery"],"cat.repositories":g["cat.repositories"],"cat.segments":_["cat.segments"],"cat.shards":b["cat.shards"],"cat.snapshots":w["cat.snapshots"],"cat.thread_pool":x["cat.thread_pool"],clear_scroll:v.clear_scroll,"cluster.get_settings":T["cluster.get_settings"],"cluster.health":E["cluster.health"],"cluster.pending_tasks":S["cluster.pending_tasks"],"cluster.put_settings":O["cluster.put_settings"],"cluster.reroute":A["cluster.reroute"],"cluster.state":q["cluster.state"],"cluster.stats":R["cluster.stats"],count:N.count,count_percolate:C.count_percolate,delete:k.delete,delete_script:I.delete_script,delete_template:D.delete_template,exists:P.exists,explain:L.explain,field_stats:W.field_stats,get:G.get,get_script:J.get_script,get_source:M.get_source,get_template:j.get_template,index:U.index,"indices.analyze":B["indices.analyze"],"indices.clear_cache":F["indices.clear_cache"],"indices.close":H["indices.close"],"indices.create":z["indices.create"],"indices.delete":V["indices.delete"],"indices.delete_alias":Q["indices.delete_alias"],"indices.delete_template":K["indices.delete_template"],"indices.delete_warmer":Y["indices.delete_warmer"],"indices.exists":X["indices.exists"],"indices.exists_alias":$["indices.exists_alias"],"indices.exists_template":Z["indices.exists_template"],"indices.exists_type":ee["indices.exists_type"],"indices.flush":te["indices.flush"],"indices.flush_synced":ie["indices.flush_synced"],"indices.forcemerge":oe["indices.forcemerge"],"indices.get":se["indices.get"],"indices.get_alias":re["indices.get_alias"],"indices.get_aliases":ne["indices.get_aliases"],"indices.get_field_mapping":ae["indices.get_field_mapping"],"indices.get_mapping":de["indices.get_mapping"],"indices.get_settings":ce["indices.get_settings"],"indices.get_template":le["indices.get_template"],"indices.get_upgrade":pe["indices.get_upgrade"],"indices.get_warmer":ue["indices.get_warmer"],"indices.open":he["indices.open"],"indices.optimize":me["indices.optimize"],"indices.put_alias":fe["indices.put_alias"],"indices.put_mapping":ye["indices.put_mapping"],"indices.put_settings":ge["indices.put_settings"],"indices.put_template":_e["indices.put_template"],"indices.put_warmer":be["indices.put_warmer"],"indices.recovery":we["indices.recovery"],"indices.refresh":xe["indices.refresh"],"indices.segments":ve["indices.segments"],"indices.shard_stores":Te["indices.shard_stores"],"indices.stats":Ee["indices.stats"],"indices.update_aliases":Se["indices.update_aliases"],"indices.upgrade":Oe["indices.upgrade"],"indices.validate_query":Ae["indices.validate_query"],info:qe.info,mget:Re.mget,mpercolate:Ne.mpercolate,msearch:Ce.msearch,mtermvectors:ke.mtermvectors,"nodes.hot_threads":Ie["nodes.hot_threads"],"nodes.info":De["nodes.info"],"nodes.stats":Pe["nodes.stats"],percolate:Le.percolate,ping:We.ping,put_script:Ge.put_script,put_template:Je.put_template,reindex:Me.reindex,reindex_rethrottle:je.reindex_rethrottle,render_search_template:Ue.render_search_template,scroll:Be.scroll,search:Fe.search,search_exists:He.search_exists,search_shards:ze.search_shards,search_template:Ve.search_template,"snapshot.create":Qe["snapshot.create"],"snapshot.create_repository":Ke["snapshot.create_repository"],"snapshot.delete":Ye["snapshot.delete"],"snapshot.delete_repository":Xe["snapshot.delete_repository"],"snapshot.get":$e["snapshot.get"],"snapshot.get_repository":Ze["snapshot.get_repository"],"snapshot.restore":et["snapshot.restore"],"snapshot.status":tt["snapshot.status"],"snapshot.verify_repository":it["snapshot.verify_repository"],suggest:ot.suggest,"tasks.cancel":st["tasks.cancel"],"tasks.list":rt["tasks.list"],termvectors:nt.termvectors,update:at.update,update_by_query:dt.update_by_query}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=JSON.parse('{"description":"Parameters that are accepted by all API endpoints.","documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html","params":{"pretty":{"type":"boolean","description":"Pretty format the returned JSON response.","default":false},"human":{"type":"boolean","description":"Return human readable values for statistics.","default":true},"error_trace":{"type":"boolean","description":"Include the stack trace of returned errors.","default":false},"source":{"type":"string","description":"The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests."},"filter_path":{"type":"list","description":"A comma-separated list of filters used to reduce the respone."}}}'),s=JSON.parse('{"bulk":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-bulk.html","methods":["POST","PUT"],"url":{"path":"/_bulk","paths":["/_bulk","/{index}/_bulk","/{index}/{type}/_bulk"],"parts":{"index":{"type":"string","description":"Default index for items which don\'t provide one"},"type":{"type":"string","description":"Default document type for items which don\'t provide one"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"type":{"type":"string","description":"Default document type for items which don\'t provide one"},"fields":{"type":"list","description":"Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request"},"_source":{"type":"list","description":"True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request"},"_source_exclude":{"type":"list","description":"Default list of fields to exclude from the returned _source field, can be overridden on each sub-request"},"_source_include":{"type":"list","description":"Default list of fields to extract and return from the _source field, can be overridden on each sub-request"},"pipeline":{"type":"string","description":"The pipeline id to preprocess incoming documents with"}}},"body":{"description":"The operation definition and data (action-data pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),r=JSON.parse('{"cat.aliases":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-alias.html","methods":["GET"],"url":{"path":"/_cat/aliases","paths":["/_cat/aliases","/_cat/aliases/{name}"],"parts":{"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),n=JSON.parse('{"cat.allocation":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-allocation.html","methods":["GET"],"url":{"path":"/_cat/allocation","paths":["/_cat/allocation","/_cat/allocation/{node_id}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),a=JSON.parse('{"cat.count":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-count.html","methods":["GET"],"url":{"path":"/_cat/count","paths":["/_cat/count","/_cat/count/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),d=JSON.parse('{"cat.fielddata":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-fielddata.html","methods":["GET"],"url":{"path":"/_cat/fielddata","paths":["/_cat/fielddata","/_cat/fielddata/{fields}"],"parts":{"fields":{"type":"list","description":"A comma-separated list of fields to return the fielddata size"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false},"fields":{"type":"list","description":"A comma-separated list of fields to return in the output"}}},"body":null}}'),c=JSON.parse('{"cat.health":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-health.html","methods":["GET"],"url":{"path":"/_cat/health","paths":["/_cat/health"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"ts":{"type":"boolean","description":"Set to false to disable timestamping","default":true},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),l=JSON.parse('{"cat.help":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat.html","methods":["GET"],"url":{"path":"/_cat","paths":["/_cat"],"parts":{},"params":{"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"}}},"body":null}}'),p=JSON.parse('{"cat.indices":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-indices.html","methods":["GET"],"url":{"path":"/_cat/indices","paths":["/_cat/indices","/_cat/indices/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","m","g"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"health":{"type":"enum","options":["green","yellow","red"],"default":null,"description":"A health status (\\"green\\", \\"yellow\\", or \\"red\\" to filter only indices matching the specified health status"},"help":{"type":"boolean","description":"Return help information","default":false},"pri":{"type":"boolean","description":"Set to true to return stats only for primary shards","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),u=JSON.parse('{"cat.master":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-master.html","methods":["GET"],"url":{"path":"/_cat/master","paths":["/_cat/master"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),h=JSON.parse('{"cat.nodeattrs":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-nodeattrs.html","methods":["GET"],"url":{"path":"/_cat/nodeattrs","paths":["/_cat/nodeattrs"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),m=JSON.parse('{"cat.nodes":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-nodes.html","methods":["GET"],"url":{"path":"/_cat/nodes","paths":["/_cat/nodes"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"full_id":{"type":"boolean","description":"Return the full node ID instead of the shortened version (default: false)"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),f=JSON.parse('{"cat.pending_tasks":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-pending-tasks.html","methods":["GET"],"url":{"path":"/_cat/pending_tasks","paths":["/_cat/pending_tasks"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),y=JSON.parse('{"cat.plugins":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-plugins.html","methods":["GET"],"url":{"path":"/_cat/plugins","paths":["/_cat/plugins"],"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),g=JSON.parse('{"cat.recovery":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-recovery.html","methods":["GET"],"url":{"path":"/_cat/recovery","paths":["/_cat/recovery","/_cat/recovery/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),_=JSON.parse('{"cat.repositories":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-repositories.html","methods":["GET"],"url":{"path":"/_cat/repositories","paths":["/_cat/repositories"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node","default":false},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),b=JSON.parse('{"cat.segments":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-segments.html","methods":["GET"],"url":{"path":"/_cat/segments","paths":["/_cat/segments","/_cat/segments/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),w=JSON.parse('{"cat.shards":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-shards.html","methods":["GET"],"url":{"path":"/_cat/shards","paths":["/_cat/shards","/_cat/shards/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),x=JSON.parse('{"cat.snapshots":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-snapshots.html","methods":["GET"],"url":{"path":"/_cat/snapshots","paths":["/_cat/snapshots","/_cat/snapshots/{repository}"],"parts":{"repository":{"type":"list","required":true,"description":"Name of repository from which to fetch the snapshot information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"ignore_unavailable":{"type":"boolean","description":"Set to true to ignore unavailable snapshots","default":false},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),v=JSON.parse('{"cat.tasks":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html","methods":["GET"],"url":{"path":"/_cat/tasks","paths":["/_cat/tasks"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be returned. Leave empty to return all."},"detailed":{"type":"boolean","description":"Return detailed task information (default: false)"},"parent_node":{"type":"string","description":"Return tasks with specified parent node."},"parent_task":{"type":"number","description":"Return tasks with specified parent task id. Set to -1 to return all."},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),T=JSON.parse('{"cat.templates":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-templates.html","methods":["GET"],"url":{"path":"/_cat/templates","paths":["/_cat/templates","/_cat/templates/{name}"],"parts":{"name":{"type":"string","description":"A pattern that returned template names must match"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),E=JSON.parse('{"cat.thread_pool":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cat-thread-pool.html","methods":["GET"],"url":{"path":"/_cat/thread_pool","paths":["/_cat/thread_pool","/_cat/thread_pool/{thread_pool_patterns}"],"parts":{"thread_pool_patterns":{"type":"list","description":"A comma-separated list of regular-expressions to filter the thread pools in the output"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"size":{"type":"enum","description":"The multiplier in which to display values","options":["","k","m","g","t","p"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),S=JSON.parse('{"clear_scroll":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-request-scroll.html","methods":["DELETE"],"url":{"path":"/_search/scroll/{scroll_id}","paths":["/_search/scroll/{scroll_id}","/_search/scroll"],"parts":{"scroll_id":{"type":"list","description":"A comma-separated list of scroll IDs to clear"}},"params":{}},"body":{"description":"A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter"}}}'),O=JSON.parse('{"cluster.allocation_explain":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-allocation-explain.html","methods":["GET","POST"],"url":{"path":"/_cluster/allocation/explain","paths":["/_cluster/allocation/explain"],"parts":{},"params":{"include_yes_decisions":{"type":"boolean","description":"Return \'YES\' decisions in explanation (default: false)"},"include_disk_info":{"type":"boolean","description":"Return information about disk usage and shard sizes (default: false)"}}},"body":{"description":"The index, shard, and primary flag to explain. Empty means \'explain the first unassigned shard\'"}}}'),A=JSON.parse('{"cluster.get_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-update-settings.html","methods":["GET"],"url":{"path":"/_cluster/settings","paths":["/_cluster/settings"],"parts":{},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"include_defaults":{"type":"boolean","description":"Whether to return all default clusters setting.","default":false}}},"body":null}}'),q=JSON.parse('{"cluster.health":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-health.html","methods":["GET"],"url":{"path":"/_cluster/health","paths":["/_cluster/health","/_cluster/health/{index}"],"parts":{"index":{"type":"list","description":"Limit the information returned to a specific index"}},"params":{"level":{"type":"enum","options":["cluster","indices","shards"],"default":"cluster","description":"Specify the level of detail for returned information"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"wait_for_active_shards":{"type":"string","description":"Wait until the specified number of shards is active"},"wait_for_nodes":{"type":"string","description":"Wait until the specified number of nodes is available"},"wait_for_events":{"type":"enum","options":["immediate","urgent","high","normal","low","languid"],"description":"Wait until all currently queued events with the given priority are processed"},"wait_for_no_relocating_shards":{"type":"boolean","description":"Whether to wait until there are no relocating shards in the cluster"},"wait_for_status":{"type":"enum","options":["green","yellow","red"],"default":null,"description":"Wait until cluster is in a specific state"}}},"body":null}}'),R=JSON.parse('{"cluster.pending_tasks":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-pending.html","methods":["GET"],"url":{"path":"/_cluster/pending_tasks","paths":["/_cluster/pending_tasks"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),N=JSON.parse('{"cluster.put_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-update-settings.html","methods":["PUT"],"url":{"path":"/_cluster/settings","paths":["/_cluster/settings"],"parts":{},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart)."}}}'),C=JSON.parse('{"cluster.reroute":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-reroute.html","methods":["POST"],"url":{"path":"/_cluster/reroute","paths":["/_cluster/reroute"],"parts":{},"params":{"dry_run":{"type":"boolean","description":"Simulate the operation only and return the resulting state"},"explain":{"type":"boolean","description":"Return an explanation of why the commands can or cannot be executed"},"retry_failed":{"type":"boolean","description":"Retries allocation of shards that are blocked due to too many subsequent allocation failures"},"metric":{"type":"list","options":["_all","blocks","metadata","nodes","routing_table","master_node","version"],"description":"Limit the information returned to the specified metrics. Defaults to all but metadata"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The definition of `commands` to perform (`move`, `cancel`, `allocate`)"}}}'),k=JSON.parse('{"cluster.state":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-state.html","methods":["GET"],"url":{"path":"/_cluster/state","paths":["/_cluster/state","/_cluster/state/{metric}","/_cluster/state/{metric}/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"metric":{"type":"list","options":["_all","blocks","metadata","nodes","routing_table","routing_nodes","master_node","version"],"description":"Limit the information returned to the specified metrics"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),I=JSON.parse('{"cluster.stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-stats.html","methods":["GET"],"url":{"path":"/_cluster/stats","paths":["/_cluster/stats","/_cluster/stats/nodes/{node_id}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),D=JSON.parse('{"count":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-count.html","methods":["POST","GET"],"url":{"path":"/_count","paths":["/_count","/{index}/_count","/{index}/{type}/_count"],"parts":{"index":{"type":"list","description":"A comma-separated list of indices to restrict the results"},"type":{"type":"list","description":"A comma-separated list of types to restrict the results"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"min_score":{"type":"number","description":"Include only documents with a specific `_score` value in the result"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"terminate_after":{"type":"number","description":"The maximum count for each shard, upon reaching which the query execution will terminate early"}}},"body":{"description":"A query to restrict the results specified with the Query DSL (optional)"}}}'),P=JSON.parse('{"count_percolate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_percolate/count","paths":["/{index}/{type}/_percolate/count","/{index}/{type}/{id}/_percolate/count"],"parts":{"index":{"type":"string","required":true,"description":"The index of the document being count percolated."},"type":{"type":"string","required":true,"description":"The type of the document being count percolated."},"id":{"type":"string","required":false,"description":"Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster."}},"params":{"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"percolate_index":{"type":"string","description":"The index to count percolate the document into. Defaults to index."},"percolate_type":{"type":"string","description":"The type to count percolate document into. Defaults to type."},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The count percolator request definition using the percolate DSL","required":false}}}'),L=JSON.parse('{"create":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-index_.html","methods":["PUT","POST"],"url":{"path":"/{index}/{type}/{id}/_create","paths":["/{index}/{type}/{id}/_create"],"parts":{"id":{"type":"string","required":true,"description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"parent":{"type":"string","description":"ID of the parent document"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"},"pipeline":{"type":"string","description":"The pipeline id to preprocess incoming documents with"}}},"body":{"description":"The document","required":true}}}'),W=JSON.parse('{"delete":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-delete.html","methods":["DELETE"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"parent":{"type":"string","description":"ID of parent document"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),G=JSON.parse('{"delete_by_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-delete-by-query.html","methods":["POST"],"url":{"path":"/{index}/_delete_by_query","paths":["/{index}/_delete_by_query","/{index}/{type}/_delete_by_query"],"comment":"most things below this are just copied from search.json","parts":{"index":{"required":true,"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"conflicts":{"note":"This is not copied from search","type":"enum","options":["abort","proceed"],"default":"abort","description":"What to do when the delete-by-query hits version conflicts?"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"search_timeout":{"type":"time","description":"Explicit timeout for each search request. Defaults to no timeout."},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"scroll_size":{"type":"number","defaut_value":100,"description":"Size on the scroll request powering the update_by_query"},"wait_for_completion":{"type":"boolean","default":true,"description":"Should the request should block until the delete-by-query is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle for this request in sub-requests per second. -1 means no throttle."},"slices":{"type":"number","default":1,"description":"The number of slices this task should be divided into. Defaults to 1 meaning the task isn\'t sliced into subtasks."}}},"body":{"description":"The search definition using the Query DSL","required":true}}}'),J=JSON.parse('{"delete_script":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html","methods":["DELETE"],"url":{"path":"/_scripts/{lang}","paths":["/_scripts/{lang}","/_scripts/{lang}/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"lang":{"type":"string","description":"Script language","required":true}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),M=JSON.parse('{"delete_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html","methods":["DELETE"],"url":{"path":"/_search/template/{id}","paths":["/_search/template/{id}"],"parts":{"id":{"type":"string","description":"Template ID","required":true}},"params":{}},"body":null}}'),j=JSON.parse('{"exists":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html","methods":["HEAD"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document (use `_all` to fetch the first document matching the ID across all types)"}},"params":{"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),U=JSON.parse('{"exists_source":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html","methods":["HEAD"],"url":{"path":"/{index}/{type}/{id}/_source","paths":["/{index}/{type}/{id}/_source"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document; use `_all` to fetch the first document matching the ID across all types"}},"params":{"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),B=JSON.parse('{"explain":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-explain.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/{id}/_explain","paths":["/{index}/{type}/{id}/_explain"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)"},"analyzer":{"type":"string","description":"The analyzer for the query string query"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The default field for query string query (default: _all)"},"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"}}},"body":{"description":"The query definition using the Query DSL"}}}'),F=JSON.parse('{"field_caps":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-field-caps.html","methods":["GET","POST"],"url":{"path":"/_field_caps","paths":["/_field_caps","/{index}/_field_caps"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"fields":{"type":"list","description":"A comma-separated list of field names"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":{"description":"Field json objects containing an array of field names","required":false}}}'),H=JSON.parse('{"field_stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-field-stats.html","methods":["GET","POST"],"url":{"path":"/_field_stats","paths":["/_field_stats","/{index}/_field_stats"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"fields":{"type":"list","description":"A comma-separated list of fields for to get field statistics for (min value, max value, and more)"},"level":{"type":"enum","options":["indices","cluster"],"default":"cluster","description":"Defines if field stats should be returned on a per index level or on a cluster wide level"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":{"description":"Field json objects containing the name and optionally a range to filter out indices result, that have results outside the defined bounds","required":false}}}'),z=JSON.parse('{"get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html","methods":["GET"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document (use `_all` to fetch the first document matching the ID across all types)"}},"params":{"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),V=JSON.parse('{"get_script":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html","methods":["GET"],"url":{"path":"/_scripts/{lang}","paths":["/_scripts/{lang}","/_scripts/{lang}/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"lang":{"type":"string","description":"Script language","required":true}},"params":{}},"body":null}}'),Q=JSON.parse('{"get_source":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-get.html","methods":["GET"],"url":{"path":"/{index}/{type}/{id}/_source","paths":["/{index}/{type}/{id}/_source"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document; use `_all` to fetch the first document matching the ID across all types"}},"params":{"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),K=JSON.parse('{"get_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html","methods":["GET"],"url":{"path":"/_search/template/{id}","paths":["/_search/template/{id}"],"parts":{"id":{"type":"string","description":"Template ID","required":true}},"params":{}},"body":null}}'),Y=JSON.parse('{"index":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-index_.html","methods":["POST","PUT"],"url":{"path":"/{index}/{type}","paths":["/{index}/{type}","/{index}/{type}/{id}"],"parts":{"id":{"type":"string","description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"op_type":{"type":"enum","options":["index","create"],"default":"index","description":"Explicit operation type"},"parent":{"type":"string","description":"ID of the parent document"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"},"pipeline":{"type":"string","description":"The pipeline id to preprocess incoming documents with"}}},"body":{"description":"The document","required":true}}}'),X=JSON.parse('{"indices.analyze":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-analyze.html","methods":["GET","POST"],"url":{"path":"/_analyze","paths":["/_analyze","/{index}/_analyze"],"parts":{"index":{"type":"string","description":"The name of the index to scope the operation"}},"params":{"analyzer":{"type":"string","description":"The name of the analyzer to use"},"char_filter":{"type":"list","description":"A comma-separated list of character filters to use for the analysis"},"field":{"type":"string","description":"Use the analyzer configured for this field (instead of passing the analyzer name)"},"filter":{"type":"list","description":"A comma-separated list of filters to use for the analysis"},"index":{"type":"string","description":"The name of the index to scope the operation"},"prefer_local":{"type":"boolean","description":"With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)"},"text":{"type":"list","description":"The text on which the analysis should be performed (when request body is not used)"},"tokenizer":{"type":"string","description":"The name of the tokenizer to use for the analysis"},"explain":{"type":"boolean","description":"With `true`, outputs more advanced details. (default: false)"},"attributes":{"type":"list","description":"A comma-separated list of token attributes to output, this parameter works only with `explain=true`"},"format":{"type":"enum","options":["detailed","text"],"default":"detailed","description":"Format of the output"}}},"body":{"description":"The text on which the analysis should be performed"}}}'),$=JSON.parse('{"indices.clear_cache":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-clearcache.html","methods":["POST","GET"],"url":{"path":"/_cache/clear","paths":["/_cache/clear","/{index}/_cache/clear"],"parts":{"index":{"type":"list","description":"A comma-separated list of index name to limit the operation"}},"params":{"field_data":{"type":"boolean","description":"Clear field data"},"fielddata":{"type":"boolean","description":"Clear field data"},"fields":{"type":"list","description":"A comma-separated list of fields to clear when using the `field_data` parameter (default: all)"},"query":{"type":"boolean","description":"Clear query caches"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"index":{"type":"list","description":"A comma-separated list of index name to limit the operation"},"recycler":{"type":"boolean","description":"Clear the recycler cache"},"request_cache":{"type":"boolean","description":"Clear request cache"},"request":{"type":"boolean","description":"Clear request cache"}}},"body":null}}'),Z=JSON.parse('{"indices.close":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-open-close.html","methods":["POST"],"url":{"path":"/{index}/_close","paths":["/{index}/_close"],"parts":{"index":{"type":"list","required":true,"description":"A comma separated list of indices to close"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),ee=JSON.parse('{"indices.create":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-create-index.html","methods":["PUT"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"string","required":true,"description":"The name of the index"}},"params":{"wait_for_active_shards":{"type":"string","description":"Set the number of active shards to wait for before the operation returns."},"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"update_all_types":{"type":"boolean","description":"Whether to update the mapping for all fields with the same name across all types or not"}}},"body":{"description":"The configuration for the index (`settings` and `mappings`)"}}}'),te=JSON.parse('{"indices.delete":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-delete-index.html","methods":["DELETE"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),ie=JSON.parse('{"indices.delete_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html","methods":["DELETE"],"url":{"path":"/{index}/_alias/{name}","paths":["/{index}/_alias/{name}","/{index}/_aliases/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names (supports wildcards); use `_all` for all indices"},"name":{"type":"list","required":true,"description":"A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices."}},"params":{"timeout":{"type":"time","description":"Explicit timestamp for the document"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),oe=JSON.parse('{"indices.delete_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html","methods":["DELETE"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),se=JSON.parse('{"indices.exists":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-exists.html","methods":["HEAD"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Ignore unavailable indexes (default: false)"},"allow_no_indices":{"type":"boolean","description":"Ignore if a wildcard expression resolves to no concrete indices (default: false)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether wildcard expressions should get expanded to open or closed indices (default: open)"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"include_defaults":{"type":"boolean","description":"Whether to return all default setting for each of the indices.","default":false}}},"body":null}}'),re=JSON.parse('{"indices.exists_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html","methods":["HEAD"],"url":{"path":"/_alias/{name}","paths":["/_alias/{name}","/{index}/_alias/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"all","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ne=JSON.parse('{"indices.exists_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html","methods":["HEAD"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"list","required":true,"description":"The comma separated names of the index templates"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ae=JSON.parse('{"indices.exists_type":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-types-exists.html","methods":["HEAD"],"url":{"path":"/{index}/_mapping/{type}","paths":["/{index}/_mapping/{type}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names; use `_all` to check the types across all indices"},"type":{"type":"list","required":true,"description":"A comma-separated list of document types to check"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),de=JSON.parse('{"indices.flush":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-flush.html","methods":["POST","GET"],"url":{"path":"/_flush","paths":["/_flush","/{index}/_flush"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string for all indices"}},"params":{"force":{"type":"boolean","description":"Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)"},"wait_if_ongoing":{"type":"boolean","description":"If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running."},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),ce=JSON.parse('{"indices.flush_synced":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-synced-flush.html","methods":["POST","GET"],"url":{"path":"/_flush/synced","paths":["/_flush/synced","/{index}/_flush/synced"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string for all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),le=JSON.parse('{"indices.forcemerge":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-forcemerge.html","methods":["POST"],"url":{"path":"/_forcemerge","paths":["/_forcemerge","/{index}/_forcemerge"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"flush":{"type":"boolean","description":"Specify whether the index should be flushed after performing the operation (default: true)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"max_num_segments":{"type":"number","description":"The number of segments the index should be merged into (default: dynamic)"},"only_expunge_deletes":{"type":"boolean","description":"Specify whether the operation should only expunge deleted documents"},"operation_threading":{"description":"TODO: ?"},"wait_for_merge":{"type":"boolean","description":"Specify whether the request should block until the merge process is finished (default: true)"}}},"body":null}}'),pe=JSON.parse('{"indices.get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-index.html","methods":["GET"],"url":{"path":"/{index}","paths":["/{index}","/{index}/{feature}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names"},"feature":{"type":"list","description":"A comma-separated list of features","options":["_settings","_mappings","_aliases"]}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Ignore unavailable indexes (default: false)"},"allow_no_indices":{"type":"boolean","description":"Ignore if a wildcard expression resolves to no concrete indices (default: false)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether wildcard expressions should get expanded to open or closed indices (default: open)"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"include_defaults":{"type":"boolean","description":"Whether to return all default setting for each of the indices.","default":false}}},"body":null}}'),ue=JSON.parse('{"indices.get_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html","methods":["GET"],"url":{"path":"/_alias/","paths":["/_alias","/_alias/{name}","/{index}/_alias/{name}","/{index}/_alias"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"all","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),he=JSON.parse('{"indices.get_field_mapping":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-field-mapping.html","methods":["GET"],"url":{"path":"/_mapping/field/{fields}","paths":["/_mapping/field/{fields}","/{index}/_mapping/field/{fields}","/_mapping/{type}/field/{fields}","/{index}/_mapping/{type}/field/{fields}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names"},"type":{"type":"list","description":"A comma-separated list of document types"},"fields":{"type":"list","description":"A comma-separated list of fields","required":true}},"params":{"include_defaults":{"type":"boolean","description":"Whether the default mapping values should be returned as well"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),me=JSON.parse('{"indices.get_mapping":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-mapping.html","methods":["GET"],"url":{"path":"/_mapping","paths":["/_mapping","/{index}/_mapping","/_mapping/{type}","/{index}/_mapping/{type}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names"},"type":{"type":"list","description":"A comma-separated list of document types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),fe=JSON.parse('{"indices.get_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-get-settings.html","methods":["GET"],"url":{"path":"/_settings","paths":["/_settings","/{index}/_settings","/{index}/_settings/{name}","/_settings/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"name":{"type":"list","description":"The name of the settings that should be included"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":["open","closed"],"description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"include_defaults":{"type":"boolean","description":"Whether to return all default setting for each of the indices.","default":false}}},"body":null}}'),ye=JSON.parse('{"indices.get_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html","methods":["GET"],"url":{"path":"/_template/{name}","paths":["/_template","/_template/{name}"],"parts":{"name":{"type":"list","required":false,"description":"The comma separated names of the index templates"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ge=JSON.parse('{"indices.get_upgrade":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-upgrade.html","methods":["GET"],"url":{"path":"/_upgrade","paths":["/_upgrade","/{index}/_upgrade"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),_e=JSON.parse('{"indices.open":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-open-close.html","methods":["POST"],"url":{"path":"/{index}/_open","paths":["/{index}/_open"],"parts":{"index":{"type":"list","required":true,"description":"A comma separated list of indices to open"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"closed","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),be=JSON.parse('{"indices.put_alias":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html","methods":["PUT","POST"],"url":{"path":"/{index}/_alias/{name}","paths":["/{index}/_alias/{name}","/{index}/_aliases/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices."},"name":{"type":"string","required":true,"description":"The name of the alias to be created or updated"}},"params":{"timeout":{"type":"time","description":"Explicit timestamp for the document"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The settings for the alias, such as `routing` or `filter`","required":false}}}'),we=JSON.parse('{"indices.put_mapping":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-put-mapping.html","methods":["PUT","POST"],"url":{"path":"/{index}/{type}/_mapping","paths":["/{index}/{type}/_mapping","/{index}/_mapping/{type}","/_mapping/{type}","/{index}/{type}/_mappings","/{index}/_mappings/{type}","/_mappings/{type}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices."},"type":{"type":"string","required":true,"description":"The name of the document type"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"update_all_types":{"type":"boolean","description":"Whether to update the mapping for all fields with the same name across all types or not"}}},"body":{"description":"The mapping definition","required":true}}}'),xe=JSON.parse('{"indices.put_settings":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-update-settings.html","methods":["PUT"],"url":{"path":"/_settings","paths":["/_settings","/{index}/_settings"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"preserve_existing":{"type":"boolean","description":"Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"}}},"body":{"description":"The index settings to be updated","required":true}}}'),ve=JSON.parse('{"indices.put_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-templates.html","methods":["PUT","POST"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"order":{"type":"number","description":"The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)"},"create":{"type":"boolean","description":"Whether the index template should only be added if new or can also replace an existing one","default":false},"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"}}},"body":{"description":"The template definition","required":true}}}'),Te=JSON.parse('{"indices.recovery":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-recovery.html","methods":["GET"],"url":{"path":"/_recovery","paths":["/_recovery","/{index}/_recovery"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"detailed":{"type":"boolean","description":"Whether to display detailed information about shard recovery","default":false},"active_only":{"type":"boolean","description":"Display only those recoveries that are currently on-going","default":false}}},"body":null}}'),Ee=JSON.parse('{"indices.refresh":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-refresh.html","methods":["POST","GET"],"url":{"path":"/_refresh","paths":["/_refresh","/{index}/_refresh"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),Se=JSON.parse('{"indices.rollover":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-rollover-index.html","methods":["POST"],"url":{"path":"/{alias}/_rollover","paths":["/{alias}/_rollover","/{alias}/_rollover/{new_index}"],"parts":{"alias":{"type":"string","required":true,"description":"The name of the alias to rollover"},"new_index":{"type":"string","required":false,"description":"The name of the rollover index"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"dry_run":{"type":"boolean","description":"If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"wait_for_active_shards":{"type":"string","description":"Set the number of active shards to wait for on the newly created rollover index before the operation returns."}}},"body":{"description":"The conditions that needs to be met for executing rollover"}}}'),Oe=JSON.parse('{"indices.segments":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-segments.html","methods":["GET"],"url":{"path":"/_segments","paths":["/_segments","/{index}/_segments"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"},"verbose":{"type":"boolean","description":"Includes detailed memory usage by Lucene.","default":false}}},"body":null}}'),Ae=JSON.parse('{"indices.shard_stores":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-shards-stores.html","methods":["GET"],"url":{"path":"/_shard_stores","paths":["/_shard_stores","/{index}/_shard_stores"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"status":{"type":"list","options":["green","yellow","red","all"],"description":"A comma-separated list of statuses used to filter on shards to get store information for"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"}}},"body":null}}'),qe=JSON.parse('{"indices.shrink":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-shrink-index.html","methods":["PUT","POST"],"url":{"path":"/{index}/_shrink/{target}","paths":["/{index}/_shrink/{target}"],"parts":{"index":{"type":"string","required":true,"description":"The name of the source index to shrink"},"target":{"type":"string","required":true,"description":"The name of the target index to shrink into"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"wait_for_active_shards":{"type":"string","description":"Set the number of active shards to wait for on the shrunken index before the operation returns."}}},"body":{"description":"The configuration for the target index (`settings` and `aliases`)"}}}'),Re=JSON.parse('{"indices.stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-stats.html","methods":["GET"],"url":{"path":"/_stats","paths":["/_stats","/_stats/{metric}","/{index}/_stats","/{index}/_stats/{metric}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"metric":{"type":"list","options":["_all","completion","docs","fielddata","query_cache","flush","get","indexing","merge","percolate","request_cache","refresh","search","segments","store","warmer","suggest"],"description":"Limit the information returned the specific metrics."}},"params":{"completion_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` index metric (supports wildcards)"},"fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)"},"groups":{"type":"list","description":"A comma-separated list of search groups for `search` index metric"},"level":{"type":"enum","description":"Return stats aggregated at cluster, index or shard level","options":["cluster","indices","shards"],"default":"indices"},"types":{"type":"list","description":"A comma-separated list of document types for the `indexing` index metric"},"include_segment_file_sizes":{"type":"boolean","description":"Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)","default":false}}},"body":null}}'),Ne=JSON.parse('{"indices.update_aliases":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-aliases.html","methods":["POST"],"url":{"path":"/_aliases","paths":["/_aliases"],"parts":{},"params":{"timeout":{"type":"time","description":"Request timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The definition of `actions` to perform","required":true}}}'),Ce=JSON.parse('{"indices.upgrade":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/indices-upgrade.html","methods":["POST"],"url":{"path":"/_upgrade","paths":["/_upgrade","/{index}/_upgrade"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"wait_for_completion":{"type":"boolean","description":"Specify whether the request should block until the all segments are upgraded (default: false)"},"only_ancient_segments":{"type":"boolean","description":"If true, only ancient (an older Lucene major release) segments will be upgraded"}}},"body":null}}'),ke=JSON.parse('{"indices.validate_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-validate.html","methods":["GET","POST"],"url":{"path":"/_validate/query","paths":["/_validate/query","/{index}/_validate/query","/{index}/{type}/_validate/query"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types"}},"params":{"explain":{"type":"boolean","description":"Return detailed information about the error"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"rewrite":{"type":"boolean","description":"Provide a more detailed explanation showing the actual Lucene query that will be executed."},"all_shards":{"type":"boolean","description":"Execute validation on all shards instead of one random shard per index"}}},"body":{"description":"The query definition specified with the Query DSL"}}}'),Ie=JSON.parse('{"info":{"documentation":"https://www.elastic.co/guide/","methods":["GET"],"url":{"path":"/","paths":["/"],"parts":{},"params":{}},"body":null}}'),De=JSON.parse('{"ingest.delete_pipeline":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html","methods":["DELETE"],"url":{"path":"/_ingest/pipeline/{id}","paths":["/_ingest/pipeline/{id}"],"parts":{"id":{"type":"string","description":"Pipeline ID","required":true}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),Pe=JSON.parse('{"ingest.get_pipeline":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html","methods":["GET"],"url":{"path":"/_ingest/pipeline/{id}","paths":["/_ingest/pipeline","/_ingest/pipeline/{id}"],"parts":{"id":{"type":"string","description":"Comma separated list of pipeline ids. Wildcards supported"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),Le=JSON.parse('{"ingest.processor.grok":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html","methods":["GET"],"url":{"path":"/_ingest/processor/grok","paths":["/_ingest/processor/grok"],"parts":{},"params":{}},"body":null}}'),We=JSON.parse('{"ingest.put_pipeline":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html","methods":["PUT"],"url":{"path":"/_ingest/pipeline/{id}","paths":["/_ingest/pipeline/{id}"],"parts":{"id":{"type":"string","description":"Pipeline ID","required":true}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The ingest definition","required":true}}}'),Ge=JSON.parse('{"ingest.simulate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/5.x/ingest.html","methods":["GET","POST"],"url":{"path":"/_ingest/pipeline/_simulate","paths":["/_ingest/pipeline/_simulate","/_ingest/pipeline/{id}/_simulate"],"parts":{"id":{"type":"string","description":"Pipeline ID","required":false}},"params":{"verbose":{"type":"boolean","description":"Verbose mode. Display data output for each processor in executed pipeline","default":false}}},"body":{"description":"The simulate definition","required":true}}}'),Je=JSON.parse('{"mget":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-multi-get.html","methods":["GET","POST"],"url":{"path":"/_mget","paths":["/_mget","/{index}/_mget","/{index}/{type}/_mget"],"parts":{"index":{"type":"string","description":"The name of the index"},"type":{"type":"string","description":"The type of the document"}},"params":{"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"}}},"body":{"description":"Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.","required":true}}}'),Me=JSON.parse('{"mpercolate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html","methods":["GET","POST"],"url":{"path":"/_mpercolate","paths":["/_mpercolate","/{index}/_mpercolate","/{index}/{type}/_mpercolate"],"parts":{"index":{"type":"string","description":"The index of the document being count percolated to use as default"},"type":{"type":"string","description":"The type of the document being percolated to use as default."}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":{"description":"The percolate request definitions (header & body pair), separated by newlines","required":true,"serialize":"bulk"}}}'),je=JSON.parse('{"msearch":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-multi-search.html","methods":["GET","POST"],"url":{"path":"/_msearch","paths":["/_msearch","/{index}/_msearch","/{index}/{type}/_msearch"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to use as default"},"type":{"type":"list","description":"A comma-separated list of document types to use as default"}},"params":{"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch"],"description":"Search operation type"},"max_concurrent_searches":{"type":"number","description":"Controls the maximum number of concurrent searches the multi search api will execute"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"},"pre_filter_shard_size":{"type":"number","description":"A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it\'s rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.","default":128}}},"body":{"description":"The request definitions (metadata-search request definition pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),Ue=JSON.parse('{"msearch_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html","methods":["GET","POST"],"url":{"path":"/_msearch/template","paths":["/_msearch/template","/{index}/_msearch/template","/{index}/{type}/_msearch/template"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to use as default"},"type":{"type":"list","description":"A comma-separated list of document types to use as default"}},"params":{"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch"],"description":"Search operation type"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"},"max_concurrent_searches":{"type":"number","description":"Controls the maximum number of concurrent searches the multi search api will execute"}}},"body":{"description":"The request definitions (metadata-search request definition pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),Be=JSON.parse('{"mtermvectors":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-multi-termvectors.html","methods":["GET","POST"],"url":{"path":"/_mtermvectors","paths":["/_mtermvectors","/{index}/_mtermvectors","/{index}/{type}/_mtermvectors"],"parts":{"index":{"type":"string","description":"The index in which the document resides."},"type":{"type":"string","description":"The type of the document."}},"params":{"ids":{"type":"list","description":"A comma-separated list of documents ids. You must define ids as parameter or set \\"ids\\" or \\"docs\\" in the request body","required":false},"term_statistics":{"type":"boolean","description":"Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":false,"required":false},"field_statistics":{"type":"boolean","description":"Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"fields":{"type":"list","description":"A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"offsets":{"type":"boolean","description":"Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"positions":{"type":"boolean","description":"Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"payloads":{"type":"boolean","description":"Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"routing":{"type":"string","description":"Specific routing value. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"parent":{"type":"string","description":"Parent id of documents. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"realtime":{"type":"boolean","description":"Specifies if requests are real-time as opposed to near-real-time (default: true).","required":false},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.","required":false}}}'),Fe=JSON.parse('{"nodes.hot_threads":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-hot-threads.html","methods":["GET"],"url":{"path":"/_nodes/hot_threads","paths":["/_cluster/nodes/hotthreads","/_cluster/nodes/hot_threads","/_cluster/nodes/{node_id}/hotthreads","/_cluster/nodes/{node_id}/hot_threads","/_nodes/hotthreads","/_nodes/hot_threads","/_nodes/{node_id}/hotthreads","/_nodes/{node_id}/hot_threads"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"interval":{"type":"time","description":"The interval for the second sampling of threads"},"snapshots":{"type":"number","description":"Number of samples of thread stacktrace (default: 10)"},"threads":{"type":"number","description":"Specify the number of threads to provide information for (default: 3)"},"ignore_idle_threads":{"type":"boolean","description":"Don\'t show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)"},"type":{"type":"enum","options":["cpu","wait","block"],"description":"The type to sample (default: cpu)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),He=JSON.parse('{"nodes.info":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-info.html","methods":["GET"],"url":{"path":"/_nodes","paths":["/_nodes","/_nodes/{node_id}","/_nodes/{metric}","/_nodes/{node_id}/{metric}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"metric":{"type":"list","options":["settings","os","process","jvm","thread_pool","transport","http","plugins","ingest"],"description":"A comma-separated list of metrics you wish returned. Leave empty to return all."}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),ze=JSON.parse('{"nodes.stats":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-nodes-stats.html","methods":["GET"],"url":{"path":"/_nodes/stats","paths":["/_nodes/stats","/_nodes/{node_id}/stats","/_nodes/stats/{metric}","/_nodes/{node_id}/stats/{metric}","/_nodes/stats/{metric}/{index_metric}","/_nodes/{node_id}/stats/{metric}/{index_metric}"],"parts":{"metric":{"type":"list","options":["_all","breaker","fs","http","indices","jvm","os","process","thread_pool","transport","discovery"],"description":"Limit the information returned to the specified metrics"},"index_metric":{"type":"list","options":["_all","completion","docs","fielddata","query_cache","flush","get","indexing","merge","percolate","request_cache","refresh","search","segments","store","warmer","suggest"],"description":"Limit the information returned for `indices` metric to the specific index metrics. Isn\'t used if `indices` (or `all`) metric isn\'t specified."},"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"completion_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` index metric (supports wildcards)"},"fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)"},"groups":{"type":"boolean","description":"A comma-separated list of search groups for `search` index metric"},"level":{"type":"enum","description":"Return indices stats aggregated at index, node or shard level","options":["indices","node","shards"],"default":"node"},"types":{"type":"list","description":"A comma-separated list of document types for the `indexing` index metric"},"timeout":{"type":"time","description":"Explicit operation timeout"},"include_segment_file_sizes":{"type":"boolean","description":"Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)","default":false}}},"body":null}}'),Ve=JSON.parse('{"percolate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-percolate.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_percolate","paths":["/{index}/{type}/_percolate","/{index}/{type}/{id}/_percolate"],"parts":{"index":{"type":"string","required":true,"description":"The index of the document being percolated."},"type":{"type":"string","required":true,"description":"The type of the document being percolated."},"id":{"type":"string","required":false,"description":"Substitute the document in the request body with a document that is known by the specified id. On top of the id, the index and type parameter will be used to retrieve the document from within the cluster."}},"params":{"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"percolate_index":{"type":"string","description":"The index to percolate the document into. Defaults to index."},"percolate_type":{"type":"string","description":"The type to percolate document into. Defaults to type."},"percolate_routing":{"type":"string","description":"The routing value to use when percolating the existing document."},"percolate_preference":{"type":"string","description":"Which shard to prefer when executing the percolate request."},"percolate_format":{"type":"enum","options":["ids"],"description":"Return an array of matching query IDs instead of objects"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"The percolator request definition using the percolate DSL","required":false}}}'),Qe=JSON.parse('{"ping":{"documentation":"https://www.elastic.co/guide/","methods":["HEAD"],"url":{"path":"/","paths":["/"],"parts":{},"params":{}},"body":null}}'),Ke=JSON.parse('{"put_script":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-scripting.html","methods":["PUT","POST"],"url":{"path":"/_scripts/{lang}","paths":["/_scripts/{lang}","/_scripts/{lang}/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"lang":{"type":"string","description":"Script language","required":true}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The document","required":true}}}'),Ye=JSON.parse('{"put_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-template.html","methods":["PUT","POST"],"url":{"path":"/_search/template/{id}","paths":["/_search/template/{id}"],"parts":{"id":{"type":"string","description":"Template ID","required":true}},"params":{}},"body":{"description":"The document","required":true}}}'),Xe=JSON.parse('{"reindex":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-reindex.html","methods":["POST"],"url":{"path":"/_reindex","paths":["/_reindex"],"parts":{},"params":{"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"wait_for_completion":{"type":"boolean","default":true,"description":"Should the request should block until the reindex is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle to set on this request in sub-requests per second. -1 means no throttle."},"slices":{"type":"number","default":1,"description":"The number of slices this task should be divided into. Defaults to 1 meaning the task isn\'t sliced into subtasks."}}},"body":{"description":"The search definition using the Query DSL and the prototype for the index request.","required":true}}}'),$e=JSON.parse('{"reindex_rethrottle":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-reindex.html","methods":["POST"],"url":{"path":"/_reindex/{task_id}/_rethrottle","paths":["/_reindex/{task_id}/_rethrottle","/_update_by_query/{task_id}/_rethrottle","/_delete_by_query/{task_id}/_rethrottle"],"parts":{"task_id":{"type":"string","description":"The task id to rethrottle"}},"params":{"requests_per_second":{"type":"number","required":true,"description":"The throttle to set on this request in floating sub-requests per second. -1 means set no throttle."}}},"body":null}}'),Ze=JSON.parse('{"remote.info":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/5.x/cluster-remote-info.html","methods":["GET"],"url":{"path":"/_remote/info","paths":["/_remote/info"],"params":{}},"body":null}}'),et=JSON.parse('{"render_search_template":{"documentation":"http://www.elasticsearch.org/guide/en/elasticsearch/reference/5.x/search-template.html","methods":["GET","POST"],"url":{"path":"/_render/template","paths":["/_render/template","/_render/template/{id}"],"parts":{"id":{"type":"string","description":"The id of the stored search template"}}},"body":{"description":"The search definition template and its params"}}}'),tt=JSON.parse('{"scroll":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-request-scroll.html","methods":["GET","POST"],"url":{"path":"/_search/scroll","paths":["/_search/scroll","/_search/scroll/{scroll_id}"],"parts":{"scroll_id":{"type":"string","description":"The scroll ID"}},"params":{"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"scroll_id":{"type":"string","description":"The scroll ID for scrolled search"}}},"body":{"description":"The scroll ID if not passed by URL or query parameter."}}}'),it=JSON.parse('{"search":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-search.html","methods":["GET","POST"],"url":{"path":"/_search","paths":["/_search","/{index}/_search","/{index}/{type}/_search"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"explain":{"type":"boolean","description":"Specify whether to return detailed information about score computation as part of a hit"},"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return as part of a hit"},"docvalue_fields":{"type":"list","description":"A comma-separated list of fields to return as the docvalue representation of a field for each hit"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields to return as the docvalue representation of a field for each hit"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"suggest_field":{"type":"string","description":"Specify which field to use for suggestions"},"suggest_mode":{"type":"enum","options":["missing","popular","always"],"default":"missing","description":"Specify suggest mode"},"suggest_size":{"type":"number","description":"How many suggestions to return in response"},"suggest_text":{"type":"string","description":"The source text for which the suggestions should be returned"},"timeout":{"type":"time","description":"Explicit operation timeout"},"track_scores":{"type":"boolean","description":"Whether to calculate and return scores even if they are not used for sorting"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"batched_reduce_size":{"type":"number","description":"The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.","default":512},"max_concurrent_shard_requests":{"type":"number","description":"The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests","default":"The default grows with the number of nodes in the cluster but is at most 256."},"pre_filter_shard_size":{"type":"number","description":"A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it\'s rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.","default":128}}},"body":{"description":"The search definition using the Query DSL"}}}'),ot=JSON.parse('{"search_shards":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-shards.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_search_shards","paths":["/_search_shards","/{index}/_search_shards","/{index}/{type}/_search_shards"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),st=JSON.parse('{"search_template":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html","methods":["GET","POST"],"url":{"path":"/_search/template","paths":["/_search/template","/{index}/_search/template","/{index}/{type}/_search/template"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch"],"description":"Search operation type"},"explain":{"type":"boolean","description":"Specify whether to return detailed information about score computation as part of a hit"},"profile":{"type":"boolean","description":"Specify whether to profile the query execution"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"}}},"body":{"description":"The search definition template and its params"}}}'),rt=JSON.parse('{"snapshot.create":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["PUT","POST"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"wait_for_completion":{"type":"boolean","description":"Should this request wait until the operation has completed before returning","default":false}}},"body":{"description":"The snapshot definition","required":false}}}'),nt=JSON.parse('{"snapshot.create_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["PUT","POST"],"url":{"path":"/_snapshot/{repository}","paths":["/_snapshot/{repository}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"verify":{"type":"boolean","description":"Whether to verify the repository after creation"}}},"body":{"description":"The repository definition","required":true}}}'),at=JSON.parse('{"snapshot.delete":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["DELETE"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),dt=JSON.parse('{"snapshot.delete_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["DELETE"],"url":{"path":"/_snapshot/{repository}","paths":["/_snapshot/{repository}"],"parts":{"repository":{"type":"list","required":true,"description":"A comma-separated list of repository names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),ct=JSON.parse('{"snapshot.get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"list","required":true,"description":"A comma-separated list of snapshot names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"ignore_unavailable":{"type":"boolean","description":"Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown"},"verbose":{"type":"boolean","description":"Whether to show verbose snapshot info or only show the basic info found in the repository index blob"}}},"body":null}}'),lt=JSON.parse('{"snapshot.get_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot","paths":["/_snapshot","/_snapshot/{repository}"],"parts":{"repository":{"type":"list","description":"A comma-separated list of repository names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),pt=JSON.parse('{"snapshot.restore":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["POST"],"url":{"path":"/_snapshot/{repository}/{snapshot}/_restore","paths":["/_snapshot/{repository}/{snapshot}/_restore"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"wait_for_completion":{"type":"boolean","description":"Should this request wait until the operation has completed before returning","default":false}}},"body":{"description":"Details of what to restore","required":false}}}'),ut=JSON.parse('{"snapshot.status":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot/_status","paths":["/_snapshot/_status","/_snapshot/{repository}/_status","/_snapshot/{repository}/{snapshot}/_status"],"parts":{"repository":{"type":"string","description":"A repository name"},"snapshot":{"type":"list","description":"A comma-separated list of snapshot names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"ignore_unavailable":{"type":"boolean","description":"Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown"}}},"body":null}}'),ht=JSON.parse('{"snapshot.verify_repository":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/modules-snapshots.html","methods":["POST"],"url":{"path":"/_snapshot/{repository}/_verify","paths":["/_snapshot/{repository}/_verify"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),mt=JSON.parse('{"suggest":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/search-suggesters.html","methods":["POST"],"url":{"path":"/_suggest","paths":["/_suggest","/{index}/_suggest"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"}}},"body":{"description":"The request definition","required":true}}}'),ft=JSON.parse('{"tasks.cancel":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html","methods":["POST"],"url":{"path":"/_tasks","paths":["/_tasks/_cancel","/_tasks/{task_id}/_cancel"],"parts":{"task_id":{"type":"string","description":"Cancel the task with specified task id (node_id:task_number)"}},"params":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be cancelled. Leave empty to cancel all."},"parent_node":{"type":"string","description":"Cancel tasks with specified parent node."},"parent_task":{"type":"string","description":"Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all."}}},"body":null}}'),yt=JSON.parse('{"tasks.get":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html","methods":["GET"],"url":{"path":"/_tasks/{task_id}","paths":["/_tasks/{task_id}"],"parts":{"task_id":{"type":"string","description":"Return the task with specified id (node_id:task_number)"}},"params":{"wait_for_completion":{"type":"boolean","description":"Wait for the matching tasks to complete (default: false)"}}},"body":null}}'),gt=JSON.parse('{"tasks.list":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/tasks.html","methods":["GET"],"url":{"path":"/_tasks","paths":["/_tasks"],"parts":{},"params":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be returned. Leave empty to return all."},"detailed":{"type":"boolean","description":"Return detailed task information (default: false)"},"parent_node":{"type":"string","description":"Return tasks with specified parent node."},"parent_task":{"type":"string","description":"Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all."},"wait_for_completion":{"type":"boolean","description":"Wait for the matching tasks to complete (default: false)"},"group_by":{"type":"enum","description":"Group tasks by nodes or parent/child relationships","options":["nodes","parents"],"default":"nodes"}}},"body":null}}'),_t=JSON.parse('{"termvectors":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-termvectors.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_termvectors","paths":["/{index}/{type}/_termvectors","/{index}/{type}/{id}/_termvectors"],"parts":{"index":{"type":"string","description":"The index in which the document resides.","required":true},"type":{"type":"string","description":"The type of the document.","required":true},"id":{"type":"string","description":"The id of the document, when not specified a doc param should be supplied."}},"params":{"term_statistics":{"type":"boolean","description":"Specifies if total term frequency and document frequency should be returned.","default":false,"required":false},"field_statistics":{"type":"boolean","description":"Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.","default":true,"required":false},"fields":{"type":"list","description":"A comma-separated list of fields to return.","required":false},"offsets":{"type":"boolean","description":"Specifies if term offsets should be returned.","default":true,"required":false},"positions":{"type":"boolean","description":"Specifies if term positions should be returned.","default":true,"required":false},"payloads":{"type":"boolean","description":"Specifies if term payloads should be returned.","default":true,"required":false},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random).","required":false},"routing":{"type":"string","description":"Specific routing value.","required":false},"parent":{"type":"string","description":"Parent id of documents.","required":false},"realtime":{"type":"boolean","description":"Specifies if request is real-time as opposed to near-real-time (default: true).","required":false},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"Define parameters and or supply a document to get termvectors for. See documentation.","required":false}}}'),bt=JSON.parse('{"update":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-update.html","methods":["POST"],"url":{"path":"/{index}/{type}/{id}/_update","paths":["/{index}/{type}/{id}/_update"],"parts":{"id":{"type":"string","required":true,"description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"fields":{"type":"list","description":"A comma-separated list of fields to return in the response"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"lang":{"type":"string","description":"The script language (default: painless)"},"parent":{"type":"string","description":"ID of the parent document. Is is only used for routing and when for the upsert request"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"retry_on_conflict":{"type":"number","description":"Specify how many times should the operation be retried when a conflict occurs (default: 0)"},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","force"],"description":"Specific version type"}}},"body":{"description":"The request definition using either `script` or partial `doc`"}}}'),wt=JSON.parse('{"update_by_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/5.x/docs-update-by-query.html","methods":["POST"],"url":{"path":"/{index}/_update_by_query","paths":["/{index}/_update_by_query","/{index}/{type}/_update_by_query"],"comment":"most things below this are just copied from search.json","parts":{"index":{"required":true,"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"conflicts":{"note":"This is not copied from search","type":"enum","options":["abort","proceed"],"default":"abort","description":"What to do when the update by query hits version conflicts?"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"pipeline":{"type":"string","description":"Ingest pipeline to set on index requests made by this action. (default: none)"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"search_timeout":{"type":"time","description":"Explicit timeout for each search request. Defaults to no timeout."},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"version_type":{"type":"boolean","description":"Should the document increment the version number (internal) on hit or not (reindex)"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"scroll_size":{"type":"number","defaut_value":100,"description":"Size on the scroll request powering the update_by_query"},"wait_for_completion":{"type":"boolean","default":true,"description":"Should the request should block until the update by query operation is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle to set on this request in sub-requests per second. -1 means no throttle."},"slices":{"type":"number","default":1,"description":"The number of slices this task should be divided into. Defaults to 1 meaning the task isn\'t sliced into subtasks."}}},"body":{"description":"The search definition using the Query DSL"}}}');t.default={_common:o,bulk:s.bulk,"cat.aliases":r["cat.aliases"],"cat.allocation":n["cat.allocation"],"cat.count":a["cat.count"],"cat.fielddata":d["cat.fielddata"],"cat.health":c["cat.health"],"cat.help":l["cat.help"],"cat.indices":p["cat.indices"],"cat.master":u["cat.master"],"cat.nodeattrs":h["cat.nodeattrs"],"cat.nodes":m["cat.nodes"],"cat.pending_tasks":f["cat.pending_tasks"],"cat.plugins":y["cat.plugins"],"cat.recovery":g["cat.recovery"],"cat.repositories":_["cat.repositories"],"cat.segments":b["cat.segments"],"cat.shards":w["cat.shards"],"cat.snapshots":x["cat.snapshots"],"cat.tasks":v["cat.tasks"],"cat.templates":T["cat.templates"],"cat.thread_pool":E["cat.thread_pool"],clear_scroll:S.clear_scroll,"cluster.allocation_explain":O["cluster.allocation_explain"],"cluster.get_settings":A["cluster.get_settings"],"cluster.health":q["cluster.health"],"cluster.pending_tasks":R["cluster.pending_tasks"],"cluster.put_settings":N["cluster.put_settings"],"cluster.reroute":C["cluster.reroute"],"cluster.state":k["cluster.state"],"cluster.stats":I["cluster.stats"],count:D.count,count_percolate:P.count_percolate,create:L.create,delete:W.delete,delete_by_query:G.delete_by_query,delete_script:J.delete_script,delete_template:M.delete_template,exists:j.exists,exists_source:U.exists_source,explain:B.explain,field_caps:F.field_caps,field_stats:H.field_stats,get:z.get,get_script:V.get_script,get_source:Q.get_source,get_template:K.get_template,index:Y.index,"indices.analyze":X["indices.analyze"],"indices.clear_cache":$["indices.clear_cache"],"indices.close":Z["indices.close"],"indices.create":ee["indices.create"],"indices.delete":te["indices.delete"],"indices.delete_alias":ie["indices.delete_alias"],"indices.delete_template":oe["indices.delete_template"],"indices.exists":se["indices.exists"],"indices.exists_alias":re["indices.exists_alias"],"indices.exists_template":ne["indices.exists_template"],"indices.exists_type":ae["indices.exists_type"],"indices.flush":de["indices.flush"],"indices.flush_synced":ce["indices.flush_synced"],"indices.forcemerge":le["indices.forcemerge"],"indices.get":pe["indices.get"],"indices.get_alias":ue["indices.get_alias"],"indices.get_field_mapping":he["indices.get_field_mapping"],"indices.get_mapping":me["indices.get_mapping"],"indices.get_settings":fe["indices.get_settings"],"indices.get_template":ye["indices.get_template"],"indices.get_upgrade":ge["indices.get_upgrade"],"indices.open":_e["indices.open"],"indices.put_alias":be["indices.put_alias"],"indices.put_mapping":we["indices.put_mapping"],"indices.put_settings":xe["indices.put_settings"],"indices.put_template":ve["indices.put_template"],"indices.recovery":Te["indices.recovery"],"indices.refresh":Ee["indices.refresh"],"indices.rollover":Se["indices.rollover"],"indices.segments":Oe["indices.segments"],"indices.shard_stores":Ae["indices.shard_stores"],"indices.shrink":qe["indices.shrink"],"indices.stats":Re["indices.stats"],"indices.update_aliases":Ne["indices.update_aliases"],"indices.upgrade":Ce["indices.upgrade"],"indices.validate_query":ke["indices.validate_query"],info:Ie.info,"ingest.delete_pipeline":De["ingest.delete_pipeline"],"ingest.get_pipeline":Pe["ingest.get_pipeline"],"ingest.processor.grok":Le["ingest.processor.grok"],"ingest.put_pipeline":We["ingest.put_pipeline"],"ingest.simulate":Ge["ingest.simulate"],mget:Je.mget,mpercolate:Me.mpercolate,msearch:je.msearch,msearch_template:Ue.msearch_template,mtermvectors:Be.mtermvectors,"nodes.hot_threads":Fe["nodes.hot_threads"],"nodes.info":He["nodes.info"],"nodes.stats":ze["nodes.stats"],percolate:Ve.percolate,ping:Qe.ping,put_script:Ke.put_script,put_template:Ye.put_template,reindex:Xe.reindex,reindex_rethrottle:$e.reindex_rethrottle,"remote.info":Ze["remote.info"],render_search_template:et.render_search_template,scroll:tt.scroll,search:it.search,search_shards:ot.search_shards,search_template:st.search_template,"snapshot.create":rt["snapshot.create"],"snapshot.create_repository":nt["snapshot.create_repository"],"snapshot.delete":at["snapshot.delete"],"snapshot.delete_repository":dt["snapshot.delete_repository"],"snapshot.get":ct["snapshot.get"],"snapshot.get_repository":lt["snapshot.get_repository"],"snapshot.restore":pt["snapshot.restore"],"snapshot.status":ut["snapshot.status"],"snapshot.verify_repository":ht["snapshot.verify_repository"],suggest:mt.suggest,"tasks.cancel":ft["tasks.cancel"],"tasks.get":yt["tasks.get"],"tasks.list":gt["tasks.list"],termvectors:_t.termvectors,update:bt.update,update_by_query:wt.update_by_query}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=JSON.parse('{"description":"Parameters that are accepted by all API endpoints.","documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html","params":{"pretty":{"type":"boolean","description":"Pretty format the returned JSON response.","default":false},"human":{"type":"boolean","description":"Return human readable values for statistics.","default":true},"error_trace":{"type":"boolean","description":"Include the stack trace of returned errors.","default":false},"source":{"type":"string","description":"The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests."},"filter_path":{"type":"list","description":"A comma-separated list of filters used to reduce the respone."}}}'),s=JSON.parse('{"bulk":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html","methods":["POST","PUT"],"url":{"path":"/_bulk","paths":["/_bulk","/{index}/_bulk","/{index}/{type}/_bulk"],"parts":{"index":{"type":"string","description":"Default index for items which don\'t provide one"},"type":{"type":"string","description":"Default document type for items which don\'t provide one"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"type":{"type":"string","description":"Default document type for items which don\'t provide one"},"fields":{"type":"list","description":"Default comma-separated list of fields to return in the response for updates, can be overridden on each sub-request"},"_source":{"type":"list","description":"True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request"},"_source_exclude":{"type":"list","description":"Default list of fields to exclude from the returned _source field, can be overridden on each sub-request"},"_source_include":{"type":"list","description":"Default list of fields to extract and return from the _source field, can be overridden on each sub-request"},"pipeline":{"type":"string","description":"The pipeline id to preprocess incoming documents with"}}},"body":{"description":"The operation definition and data (action-data pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),r=JSON.parse('{"cat.aliases":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html","methods":["GET"],"url":{"path":"/_cat/aliases","paths":["/_cat/aliases","/_cat/aliases/{name}"],"parts":{"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),n=JSON.parse('{"cat.allocation":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html","methods":["GET"],"url":{"path":"/_cat/allocation","paths":["/_cat/allocation","/_cat/allocation/{node_id}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),a=JSON.parse('{"cat.count":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html","methods":["GET"],"url":{"path":"/_cat/count","paths":["/_cat/count","/_cat/count/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),d=JSON.parse('{"cat.fielddata":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html","methods":["GET"],"url":{"path":"/_cat/fielddata","paths":["/_cat/fielddata","/_cat/fielddata/{fields}"],"parts":{"fields":{"type":"list","description":"A comma-separated list of fields to return the fielddata size"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false},"fields":{"type":"list","description":"A comma-separated list of fields to return in the output"}}},"body":null}}'),c=JSON.parse('{"cat.health":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html","methods":["GET"],"url":{"path":"/_cat/health","paths":["/_cat/health"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"ts":{"type":"boolean","description":"Set to false to disable timestamping","default":true},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),l=JSON.parse('{"cat.help":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html","methods":["GET"],"url":{"path":"/_cat","paths":["/_cat"],"parts":{},"params":{"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"}}},"body":null}}'),p=JSON.parse('{"cat.indices":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html","methods":["GET"],"url":{"path":"/_cat/indices","paths":["/_cat/indices","/_cat/indices/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","m","g"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"health":{"type":"enum","options":["green","yellow","red"],"default":null,"description":"A health status (\\"green\\", \\"yellow\\", or \\"red\\" to filter only indices matching the specified health status"},"help":{"type":"boolean","description":"Return help information","default":false},"pri":{"type":"boolean","description":"Set to true to return stats only for primary shards","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),u=JSON.parse('{"cat.master":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html","methods":["GET"],"url":{"path":"/_cat/master","paths":["/_cat/master"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),h=JSON.parse('{"cat.nodeattrs":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html","methods":["GET"],"url":{"path":"/_cat/nodeattrs","paths":["/_cat/nodeattrs"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),m=JSON.parse('{"cat.nodes":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html","methods":["GET"],"url":{"path":"/_cat/nodes","paths":["/_cat/nodes"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"full_id":{"type":"boolean","description":"Return the full node ID instead of the shortened version (default: false)"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),f=JSON.parse('{"cat.pending_tasks":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html","methods":["GET"],"url":{"path":"/_cat/pending_tasks","paths":["/_cat/pending_tasks"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),y=JSON.parse('{"cat.plugins":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html","methods":["GET"],"url":{"path":"/_cat/plugins","paths":["/_cat/plugins"],"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),g=JSON.parse('{"cat.recovery":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html","methods":["GET"],"url":{"path":"/_cat/recovery","paths":["/_cat/recovery","/_cat/recovery/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),_=JSON.parse('{"cat.repositories":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html","methods":["GET"],"url":{"path":"/_cat/repositories","paths":["/_cat/repositories"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node","default":false},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),b=JSON.parse('{"cat.segments":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html","methods":["GET"],"url":{"path":"/_cat/segments","paths":["/_cat/segments","/_cat/segments/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),w=JSON.parse('{"cat.shards":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html","methods":["GET"],"url":{"path":"/_cat/shards","paths":["/_cat/shards","/_cat/shards/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to limit the returned information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"bytes":{"type":"enum","description":"The unit in which to display byte values","options":["b","k","kb","m","mb","g","gb","t","tb","p","pb"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),x=JSON.parse('{"cat.snapshots":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html","methods":["GET"],"url":{"path":"/_cat/snapshots","paths":["/_cat/snapshots","/_cat/snapshots/{repository}"],"parts":{"repository":{"type":"list","description":"Name of repository from which to fetch the snapshot information"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"ignore_unavailable":{"type":"boolean","description":"Set to true to ignore unavailable snapshots","default":false},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),v=JSON.parse('{"cat.tasks":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html","methods":["GET"],"url":{"path":"/_cat/tasks","paths":["/_cat/tasks"],"parts":{},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be returned. Leave empty to return all."},"detailed":{"type":"boolean","description":"Return detailed task information (default: false)"},"parent_node":{"type":"string","description":"Return tasks with specified parent node."},"parent_task":{"type":"number","description":"Return tasks with specified parent task id. Set to -1 to return all."},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),T=JSON.parse('{"cat.templates":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html","methods":["GET"],"url":{"path":"/_cat/templates","paths":["/_cat/templates","/_cat/templates/{name}"],"parts":{"name":{"type":"string","description":"A pattern that returned template names must match"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),E=JSON.parse('{"cat.thread_pool":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html","methods":["GET"],"url":{"path":"/_cat/thread_pool","paths":["/_cat/thread_pool","/_cat/thread_pool/{thread_pool_patterns}"],"parts":{"thread_pool_patterns":{"type":"list","description":"A comma-separated list of regular-expressions to filter the thread pools in the output"}},"params":{"format":{"type":"string","description":"a short version of the Accept header, e.g. json, yaml"},"size":{"type":"enum","description":"The multiplier in which to display values","options":["","k","m","g","t","p"]},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"h":{"type":"list","description":"Comma-separated list of column names to display"},"help":{"type":"boolean","description":"Return help information","default":false},"s":{"type":"list","description":"Comma-separated list of column names or column aliases to sort by"},"v":{"type":"boolean","description":"Verbose mode. Display column headers","default":false}}},"body":null}}'),S=JSON.parse('{"clear_scroll":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html","methods":["DELETE"],"url":{"path":"/_search/scroll/{scroll_id}","paths":["/_search/scroll/{scroll_id}","/_search/scroll"],"parts":{"scroll_id":{"type":"list","description":"A comma-separated list of scroll IDs to clear"}},"params":{}},"body":{"description":"A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter"}}}'),O=JSON.parse('{"cluster.allocation_explain":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html","methods":["GET","POST"],"url":{"path":"/_cluster/allocation/explain","paths":["/_cluster/allocation/explain"],"parts":{},"params":{"include_yes_decisions":{"type":"boolean","description":"Return \'YES\' decisions in explanation (default: false)"},"include_disk_info":{"type":"boolean","description":"Return information about disk usage and shard sizes (default: false)"}}},"body":{"description":"The index, shard, and primary flag to explain. Empty means \'explain the first unassigned shard\'"}}}'),A=JSON.parse('{"cluster.get_settings":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html","methods":["GET"],"url":{"path":"/_cluster/settings","paths":["/_cluster/settings"],"parts":{},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"include_defaults":{"type":"boolean","description":"Whether to return all default clusters setting.","default":false}}},"body":null}}'),q=JSON.parse('{"cluster.health":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html","methods":["GET"],"url":{"path":"/_cluster/health","paths":["/_cluster/health","/_cluster/health/{index}"],"parts":{"index":{"type":"list","description":"Limit the information returned to a specific index"}},"params":{"level":{"type":"enum","options":["cluster","indices","shards"],"default":"cluster","description":"Specify the level of detail for returned information"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"wait_for_active_shards":{"type":"string","description":"Wait until the specified number of shards is active"},"wait_for_nodes":{"type":"string","description":"Wait until the specified number of nodes is available"},"wait_for_events":{"type":"enum","options":["immediate","urgent","high","normal","low","languid"],"description":"Wait until all currently queued events with the given priority are processed"},"wait_for_no_relocating_shards":{"type":"boolean","description":"Whether to wait until there are no relocating shards in the cluster"},"wait_for_status":{"type":"enum","options":["green","yellow","red"],"default":null,"description":"Wait until cluster is in a specific state"}}},"body":null}}'),R=JSON.parse('{"cluster.pending_tasks":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html","methods":["GET"],"url":{"path":"/_cluster/pending_tasks","paths":["/_cluster/pending_tasks"],"parts":{},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),N=JSON.parse('{"cluster.put_settings":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html","methods":["PUT"],"url":{"path":"/_cluster/settings","paths":["/_cluster/settings"],"parts":{},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart)."}}}'),C=JSON.parse('{"cluster.reroute":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html","methods":["POST"],"url":{"path":"/_cluster/reroute","paths":["/_cluster/reroute"],"parts":{},"params":{"dry_run":{"type":"boolean","description":"Simulate the operation only and return the resulting state"},"explain":{"type":"boolean","description":"Return an explanation of why the commands can or cannot be executed"},"retry_failed":{"type":"boolean","description":"Retries allocation of shards that are blocked due to too many subsequent allocation failures"},"metric":{"type":"list","options":["_all","blocks","metadata","nodes","routing_table","master_node","version"],"description":"Limit the information returned to the specified metrics. Defaults to all but metadata"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The definition of `commands` to perform (`move`, `cancel`, `allocate`)"}}}'),k=JSON.parse('{"cluster.state":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html","methods":["GET"],"url":{"path":"/_cluster/state","paths":["/_cluster/state","/_cluster/state/{metric}","/_cluster/state/{metric}/{index}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"metric":{"type":"list","options":["_all","blocks","metadata","nodes","routing_table","routing_nodes","master_node","version"],"description":"Limit the information returned to the specified metrics"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),I=JSON.parse('{"cluster.stats":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html","methods":["GET"],"url":{"path":"/_cluster/stats","paths":["/_cluster/stats","/_cluster/stats/nodes/{node_id}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),D=JSON.parse('{"count":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html","methods":["POST","GET"],"url":{"path":"/_count","paths":["/_count","/{index}/_count","/{index}/{type}/_count"],"parts":{"index":{"type":"list","description":"A comma-separated list of indices to restrict the results"},"type":{"type":"list","description":"A comma-separated list of types to restrict the results"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"min_score":{"type":"number","description":"Include only documents with a specific `_score` value in the result"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"terminate_after":{"type":"number","description":"The maximum count for each shard, upon reaching which the query execution will terminate early"}}},"body":{"description":"A query to restrict the results specified with the Query DSL (optional)"}}}'),P=JSON.parse('{"create":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html","methods":["PUT","POST"],"url":{"path":"/{index}/{type}/{id}/_create","paths":["/{index}/{type}/{id}/_create"],"parts":{"id":{"type":"string","required":true,"description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"parent":{"type":"string","description":"ID of the parent document"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"},"pipeline":{"type":"string","description":"The pipeline id to preprocess incoming documents with"}}},"body":{"description":"The document","required":true}}}'),L=JSON.parse('{"delete":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html","methods":["DELETE"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"parent":{"type":"string","description":"ID of parent document"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),W=JSON.parse('{"delete_by_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html","methods":["POST"],"url":{"path":"/{index}/_delete_by_query","paths":["/{index}/_delete_by_query","/{index}/{type}/_delete_by_query"],"comment":"most things below this are just copied from search.json","parts":{"index":{"required":true,"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"conflicts":{"note":"This is not copied from search","type":"enum","options":["abort","proceed"],"default":"abort","description":"What to do when the delete-by-query hits version conflicts?"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"search_timeout":{"type":"time","description":"Explicit timeout for each search request. Defaults to no timeout."},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"scroll_size":{"type":"number","defaut_value":100,"description":"Size on the scroll request powering the update_by_query"},"wait_for_completion":{"type":"boolean","default":true,"description":"Should the request should block until the delete-by-query is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle for this request in sub-requests per second. -1 means no throttle."},"slices":{"type":"number","default":1,"description":"The number of slices this task should be divided into. Defaults to 1 meaning the task isn\'t sliced into subtasks."}}},"body":{"description":"The search definition using the Query DSL","required":true}}}'),G=JSON.parse('{"delete_script":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html","methods":["DELETE"],"url":{"path":"/_scripts/{id}","paths":["/_scripts/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),J=JSON.parse('{"exists":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html","methods":["HEAD"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document (use `_all` to fetch the first document matching the ID across all types)"}},"params":{"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),M=JSON.parse('{"exists_source":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html","methods":["HEAD"],"url":{"path":"/{index}/{type}/{id}/_source","paths":["/{index}/{type}/{id}/_source"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document; use `_all` to fetch the first document matching the ID across all types"}},"params":{"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),j=JSON.parse('{"explain":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/{id}/_explain","paths":["/{index}/{type}/{id}/_explain"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)"},"analyzer":{"type":"string","description":"The analyzer for the query string query"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The default field for query string query (default: _all)"},"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"}}},"body":{"description":"The query definition using the Query DSL"}}}'),U=JSON.parse('{"field_caps":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-caps.html","methods":["GET","POST"],"url":{"path":"/_field_caps","paths":["/_field_caps","/{index}/_field_caps"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"fields":{"type":"list","description":"A comma-separated list of field names"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":{"description":"Field json objects containing an array of field names","required":false}}}'),B=JSON.parse('{"get":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html","methods":["GET"],"url":{"path":"/{index}/{type}/{id}","paths":["/{index}/{type}/{id}"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document (use `_all` to fetch the first document matching the ID across all types)"}},"params":{"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),F=JSON.parse('{"get_script":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html","methods":["GET"],"url":{"path":"/_scripts/{id}","paths":["/_scripts/{id}"],"parts":{"id":{"type":"string","description":"Script ID","required":true}},"params":{}},"body":null}}'),H=JSON.parse('{"get_source":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html","methods":["GET"],"url":{"path":"/{index}/{type}/{id}/_source","paths":["/{index}/{type}/{id}/_source"],"parts":{"id":{"type":"string","required":true,"description":"The document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document; use `_all` to fetch the first document matching the ID across all types"}},"params":{"parent":{"type":"string","description":"The ID of the parent document"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":null}}'),z=JSON.parse('{"index":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html","methods":["POST","PUT"],"url":{"path":"/{index}/{type}","paths":["/{index}/{type}","/{index}/{type}/{id}"],"parts":{"id":{"type":"string","description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"op_type":{"type":"enum","options":["index","create"],"default":"index","description":"Explicit operation type"},"parent":{"type":"string","description":"ID of the parent document"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"},"pipeline":{"type":"string","description":"The pipeline id to preprocess incoming documents with"}}},"body":{"description":"The document","required":true}}}'),V=JSON.parse('{"indices.analyze":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html","methods":["GET","POST"],"url":{"path":"/_analyze","paths":["/_analyze","/{index}/_analyze"],"parts":{"index":{"type":"string","description":"The name of the index to scope the operation"}},"params":{"index":{"type":"string","description":"The name of the index to scope the operation"},"prefer_local":{"type":"boolean","description":"With `true`, specify that a local shard should be used if available, with `false`, use a random shard (default: true)"},"format":{"type":"enum","options":["detailed","text"],"default":"detailed","description":"Format of the output"}}},"body":{"description":"Define analyzer/tokenizer parameters and the text on which the analysis should be performed"}}}'),Q=JSON.parse('{"indices.clear_cache":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html","methods":["POST","GET"],"url":{"path":"/_cache/clear","paths":["/_cache/clear","/{index}/_cache/clear"],"parts":{"index":{"type":"list","description":"A comma-separated list of index name to limit the operation"}},"params":{"field_data":{"type":"boolean","description":"Clear field data"},"fielddata":{"type":"boolean","description":"Clear field data"},"fields":{"type":"list","description":"A comma-separated list of fields to clear when using the `field_data` parameter (default: all)"},"query":{"type":"boolean","description":"Clear query caches"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"index":{"type":"list","description":"A comma-separated list of index name to limit the operation"},"recycler":{"type":"boolean","description":"Clear the recycler cache"},"request_cache":{"type":"boolean","description":"Clear request cache"},"request":{"type":"boolean","description":"Clear request cache"}}},"body":null}}'),K=JSON.parse('{"indices.close":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html","methods":["POST"],"url":{"path":"/{index}/_close","paths":["/{index}/_close"],"parts":{"index":{"type":"list","required":true,"description":"A comma separated list of indices to close"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),Y=JSON.parse('{"indices.create":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html","methods":["PUT"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"string","required":true,"description":"The name of the index"}},"params":{"wait_for_active_shards":{"type":"string","description":"Set the number of active shards to wait for before the operation returns."},"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"update_all_types":{"type":"boolean","description":"Whether to update the mapping for all fields with the same name across all types or not"}}},"body":{"description":"The configuration for the index (`settings` and `mappings`)"}}}'),X=JSON.parse('{"indices.delete":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html","methods":["DELETE"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Ignore unavailable indexes (default: false)"},"allow_no_indices":{"type":"boolean","description":"Ignore if a wildcard expression resolves to no concrete indices (default: false)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether wildcard expressions should get expanded to open or closed indices (default: open)"}}},"body":null}}'),$=JSON.parse('{"indices.delete_alias":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html","methods":["DELETE"],"url":{"path":"/{index}/_alias/{name}","paths":["/{index}/_alias/{name}","/{index}/_aliases/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names (supports wildcards); use `_all` for all indices"},"name":{"type":"list","required":true,"description":"A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices."}},"params":{"timeout":{"type":"time","description":"Explicit timestamp for the document"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),Z=JSON.parse('{"indices.delete_template":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html","methods":["DELETE"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":null}}'),ee=JSON.parse('{"indices.exists":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html","methods":["HEAD"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Ignore unavailable indexes (default: false)"},"allow_no_indices":{"type":"boolean","description":"Ignore if a wildcard expression resolves to no concrete indices (default: false)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether wildcard expressions should get expanded to open or closed indices (default: open)"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"include_defaults":{"type":"boolean","description":"Whether to return all default setting for each of the indices.","default":false}}},"body":null}}'),te=JSON.parse('{"indices.exists_alias":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html","methods":["HEAD"],"url":{"path":"/_alias/{name}","paths":["/_alias/{name}","/{index}/_alias/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"all","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ie=JSON.parse('{"indices.exists_template":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html","methods":["HEAD"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"list","required":true,"description":"The comma separated names of the index templates"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),oe=JSON.parse('{"indices.exists_type":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html","methods":["HEAD"],"url":{"path":"/{index}/_mapping/{type}","paths":["/{index}/_mapping/{type}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names; use `_all` to check the types across all indices"},"type":{"type":"list","required":true,"description":"A comma-separated list of document types to check"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),se=JSON.parse('{"indices.flush":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html","methods":["POST","GET"],"url":{"path":"/_flush","paths":["/_flush","/{index}/_flush"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string for all indices"}},"params":{"force":{"type":"boolean","description":"Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)"},"wait_if_ongoing":{"type":"boolean","description":"If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running."},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),re=JSON.parse('{"indices.flush_synced":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html","methods":["POST","GET"],"url":{"path":"/_flush/synced","paths":["/_flush/synced","/{index}/_flush/synced"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string for all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),ne=JSON.parse('{"indices.forcemerge":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html","methods":["POST"],"url":{"path":"/_forcemerge","paths":["/_forcemerge","/{index}/_forcemerge"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"flush":{"type":"boolean","description":"Specify whether the index should be flushed after performing the operation (default: true)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"max_num_segments":{"type":"number","description":"The number of segments the index should be merged into (default: dynamic)"},"only_expunge_deletes":{"type":"boolean","description":"Specify whether the operation should only expunge deleted documents"},"operation_threading":{"description":"TODO: ?"},"wait_for_merge":{"type":"boolean","description":"Specify whether the request should block until the merge process is finished (default: true)"}}},"body":null}}'),ae=JSON.parse('{"indices.get":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html","methods":["GET"],"url":{"path":"/{index}","paths":["/{index}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names"}},"params":{"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Ignore unavailable indexes (default: false)"},"allow_no_indices":{"type":"boolean","description":"Ignore if a wildcard expression resolves to no concrete indices (default: false)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether wildcard expressions should get expanded to open or closed indices (default: open)"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"include_defaults":{"type":"boolean","description":"Whether to return all default setting for each of the indices.","default":false}}},"body":null}}'),de=JSON.parse('{"indices.get_alias":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html","methods":["GET"],"url":{"path":"/_alias/","paths":["/_alias","/_alias/{name}","/{index}/_alias/{name}","/{index}/_alias"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to filter aliases"},"name":{"type":"list","description":"A comma-separated list of alias names to return"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"all","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),ce=JSON.parse('{"indices.get_field_mapping":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html","methods":["GET"],"url":{"path":"/_mapping/field/{fields}","paths":["/_mapping/field/{fields}","/{index}/_mapping/field/{fields}","/_mapping/{type}/field/{fields}","/{index}/_mapping/{type}/field/{fields}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names"},"type":{"type":"list","description":"A comma-separated list of document types"},"fields":{"type":"list","description":"A comma-separated list of fields","required":true}},"params":{"include_defaults":{"type":"boolean","description":"Whether the default mapping values should be returned as well"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),le=JSON.parse('{"indices.get_mapping":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html","methods":["GET"],"url":{"path":"/_mapping","paths":["/_mapping","/{index}/_mapping","/_mapping/{type}","/{index}/_mapping/{type}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names"},"type":{"type":"list","description":"A comma-separated list of document types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),pe=JSON.parse('{"indices.get_settings":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html","methods":["GET"],"url":{"path":"/_settings","paths":["/_settings","/{index}/_settings","/{index}/_settings/{name}","/_settings/{name}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"name":{"type":"list","description":"The name of the settings that should be included"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":["open","closed"],"description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"include_defaults":{"type":"boolean","description":"Whether to return all default setting for each of the indices.","default":false}}},"body":null}}'),ue=JSON.parse('{"indices.get_template":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html","methods":["GET"],"url":{"path":"/_template/{name}","paths":["/_template","/_template/{name}"],"parts":{"name":{"type":"list","required":false,"description":"The comma separated names of the index templates"}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),he=JSON.parse('{"indices.get_upgrade":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html","methods":["GET"],"url":{"path":"/_upgrade","paths":["/_upgrade","/{index}/_upgrade"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),me=JSON.parse('{"indices.open":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html","methods":["POST"],"url":{"path":"/{index}/_open","paths":["/{index}/_open"],"parts":{"index":{"type":"list","required":true,"description":"A comma separated list of indices to open"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"closed","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),fe=JSON.parse('{"indices.put_alias":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html","methods":["PUT","POST"],"url":{"path":"/{index}/_alias/{name}","paths":["/{index}/_alias/{name}","/{index}/_aliases/{name}"],"parts":{"index":{"type":"list","required":true,"description":"A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices."},"name":{"type":"string","required":true,"description":"The name of the alias to be created or updated"}},"params":{"timeout":{"type":"time","description":"Explicit timestamp for the document"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The settings for the alias, such as `routing` or `filter`","required":false}}}'),ye=JSON.parse('{"indices.put_mapping":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html","methods":["PUT","POST"],"url":{"path":"/{index}/{type}/_mapping","paths":["/{index}/{type}/_mapping","/{index}/_mapping/{type}","/_mapping/{type}","/{index}/{type}/_mappings","/{index}/_mappings/{type}","/_mappings/{type}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices."},"type":{"type":"string","required":true,"description":"The name of the document type"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"update_all_types":{"type":"boolean","description":"Whether to update the mapping for all fields with the same name across all types or not"}}},"body":{"description":"The mapping definition","required":true}}}'),ge=JSON.parse('{"indices.put_settings":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html","methods":["PUT"],"url":{"path":"/_settings","paths":["/_settings","/{index}/_settings"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"preserve_existing":{"type":"boolean","description":"Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"}}},"body":{"description":"The index settings to be updated","required":true}}}'),_e=JSON.parse('{"indices.put_template":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html","methods":["PUT","POST"],"url":{"path":"/_template/{name}","paths":["/_template/{name}"],"parts":{"name":{"type":"string","required":true,"description":"The name of the template"}},"params":{"order":{"type":"number","description":"The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)"},"create":{"type":"boolean","description":"Whether the index template should only be added if new or can also replace an existing one","default":false},"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"}}},"body":{"description":"The template definition","required":true}}}'),be=JSON.parse('{"indices.recovery":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html","methods":["GET"],"url":{"path":"/_recovery","paths":["/_recovery","/{index}/_recovery"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"detailed":{"type":"boolean","description":"Whether to display detailed information about shard recovery","default":false},"active_only":{"type":"boolean","description":"Display only those recoveries that are currently on-going","default":false}}},"body":null}}'),we=JSON.parse('{"indices.refresh":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html","methods":["POST","GET"],"url":{"path":"/_refresh","paths":["/_refresh","/{index}/_refresh"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),xe=JSON.parse('{"indices.rollover":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html","methods":["POST"],"url":{"path":"/{alias}/_rollover","paths":["/{alias}/_rollover","/{alias}/_rollover/{new_index}"],"parts":{"alias":{"type":"string","required":true,"description":"The name of the alias to rollover"},"new_index":{"type":"string","required":false,"description":"The name of the rollover index"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"dry_run":{"type":"boolean","description":"If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"wait_for_active_shards":{"type":"string","description":"Set the number of active shards to wait for on the newly created rollover index before the operation returns."}}},"body":{"description":"The conditions that needs to be met for executing rollover"}}}'),ve=JSON.parse('{"indices.segments":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html","methods":["GET"],"url":{"path":"/_segments","paths":["/_segments","/{index}/_segments"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"},"verbose":{"type":"boolean","description":"Includes detailed memory usage by Lucene.","default":false}}},"body":null}}'),Te=JSON.parse('{"indices.shard_stores":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html","methods":["GET"],"url":{"path":"/_shard_stores","paths":["/_shard_stores","/{index}/_shard_stores"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"status":{"type":"list","options":["green","yellow","red","all"],"description":"A comma-separated list of statuses used to filter on shards to get store information for"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"}}},"body":null}}'),Ee=JSON.parse('{"indices.shrink":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html","methods":["PUT","POST"],"url":{"path":"/{index}/_shrink/{target}","paths":["/{index}/_shrink/{target}"],"parts":{"index":{"type":"string","required":true,"description":"The name of the source index to shrink"},"target":{"type":"string","required":true,"description":"The name of the target index to shrink into"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"wait_for_active_shards":{"type":"string","description":"Set the number of active shards to wait for on the shrunken index before the operation returns."}}},"body":{"description":"The configuration for the target index (`settings` and `aliases`)"}}}'),Se=JSON.parse('{"indices.stats":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html","methods":["GET"],"url":{"path":"/_stats","paths":["/_stats","/_stats/{metric}","/{index}/_stats","/{index}/_stats/{metric}"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"},"metric":{"type":"list","options":["_all","completion","docs","fielddata","query_cache","flush","get","indexing","merge","request_cache","refresh","search","segments","store","warmer","suggest"],"description":"Limit the information returned the specific metrics."}},"params":{"completion_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` index metric (supports wildcards)"},"fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)"},"groups":{"type":"list","description":"A comma-separated list of search groups for `search` index metric"},"level":{"type":"enum","description":"Return stats aggregated at cluster, index or shard level","options":["cluster","indices","shards"],"default":"indices"},"types":{"type":"list","description":"A comma-separated list of document types for the `indexing` index metric"},"include_segment_file_sizes":{"type":"boolean","description":"Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)","default":false}}},"body":null}}'),Oe=JSON.parse('{"indices.update_aliases":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html","methods":["POST"],"url":{"path":"/_aliases","paths":["/_aliases"],"parts":{},"params":{"timeout":{"type":"time","description":"Request timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"}}},"body":{"description":"The definition of `actions` to perform","required":true}}}'),Ae=JSON.parse('{"indices.upgrade":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html","methods":["POST"],"url":{"path":"/_upgrade","paths":["/_upgrade","/{index}/_upgrade"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices"}},"params":{"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"wait_for_completion":{"type":"boolean","description":"Specify whether the request should block until the all segments are upgraded (default: false)"},"only_ancient_segments":{"type":"boolean","description":"If true, only ancient (an older Lucene major release) segments will be upgraded"}}},"body":null}}'),qe=JSON.parse('{"indices.validate_query":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html","methods":["GET","POST"],"url":{"path":"/_validate/query","paths":["/_validate/query","/{index}/_validate/query","/{index}/{type}/_validate/query"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types"}},"params":{"explain":{"type":"boolean","description":"Return detailed information about the error"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"operation_threading":{"description":"TODO: ?"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"rewrite":{"type":"boolean","description":"Provide a more detailed explanation showing the actual Lucene query that will be executed."},"all_shards":{"type":"boolean","description":"Execute validation on all shards instead of one random shard per index"}}},"body":{"description":"The query definition specified with the Query DSL"}}}'),Re=JSON.parse('{"info":{"documentation":"http://www.elastic.co/guide/","methods":["GET"],"url":{"path":"/","paths":["/"],"parts":{},"params":{}},"body":null}}'),Ne=JSON.parse('{"ingest.delete_pipeline":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html","methods":["DELETE"],"url":{"path":"/_ingest/pipeline/{id}","paths":["/_ingest/pipeline/{id}"],"parts":{"id":{"type":"string","description":"Pipeline ID","required":true}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),Ce=JSON.parse('{"ingest.get_pipeline":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html","methods":["GET"],"url":{"path":"/_ingest/pipeline/{id}","paths":["/_ingest/pipeline","/_ingest/pipeline/{id}"],"parts":{"id":{"type":"string","description":"Comma separated list of pipeline ids. Wildcards supported"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),ke=JSON.parse('{"ingest.processor.grok":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html","methods":["GET"],"url":{"path":"/_ingest/processor/grok","paths":["/_ingest/processor/grok"],"parts":{},"params":{}},"body":null}}'),Ie=JSON.parse('{"ingest.put_pipeline":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html","methods":["PUT"],"url":{"path":"/_ingest/pipeline/{id}","paths":["/_ingest/pipeline/{id}"],"parts":{"id":{"type":"string","description":"Pipeline ID","required":true}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":{"description":"The ingest definition","required":true}}}'),De=JSON.parse('{"ingest.simulate":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html","methods":["GET","POST"],"url":{"path":"/_ingest/pipeline/_simulate","paths":["/_ingest/pipeline/_simulate","/_ingest/pipeline/{id}/_simulate"],"parts":{"id":{"type":"string","description":"Pipeline ID","required":false}},"params":{"verbose":{"type":"boolean","description":"Verbose mode. Display data output for each processor in executed pipeline","default":false}}},"body":{"description":"The simulate definition","required":true}}}'),Pe=JSON.parse('{"mget":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html","methods":["GET","POST"],"url":{"path":"/_mget","paths":["/_mget","/{index}/_mget","/{index}/{type}/_mget"],"parts":{"index":{"type":"string","description":"The name of the index"},"type":{"type":"string","description":"The type of the document"}},"params":{"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return in the response"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"realtime":{"type":"boolean","description":"Specify whether to perform the operation in realtime or search mode"},"refresh":{"type":"boolean","description":"Refresh the shard containing the document before performing the operation"},"routing":{"type":"string","description":"Specific routing value"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"}}},"body":{"description":"Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.","required":true}}}'),Le=JSON.parse('{"msearch":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html","methods":["GET","POST"],"url":{"path":"/_msearch","paths":["/_msearch","/{index}/_msearch","/{index}/{type}/_msearch"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to use as default"},"type":{"type":"list","description":"A comma-separated list of document types to use as default"}},"params":{"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch"],"description":"Search operation type"},"max_concurrent_searches":{"type":"number","description":"Controls the maximum number of concurrent searches the multi search api will execute"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"},"pre_filter_shard_size":{"type":"number","description":"A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it\'s rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.","default":128}}},"body":{"description":"The request definitions (metadata-search request definition pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),We=JSON.parse('{"msearch_template":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html","methods":["GET","POST"],"url":{"path":"/_msearch/template","paths":["/_msearch/template","/{index}/_msearch/template","/{index}/{type}/_msearch/template"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to use as default"},"type":{"type":"list","description":"A comma-separated list of document types to use as default"}},"params":{"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch"],"description":"Search operation type"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"},"max_concurrent_searches":{"type":"number","description":"Controls the maximum number of concurrent searches the multi search api will execute"}}},"body":{"description":"The request definitions (metadata-search request definition pairs), separated by newlines","required":true,"serialize":"bulk"}}}'),Ge=JSON.parse('{"mtermvectors":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html","methods":["GET","POST"],"url":{"path":"/_mtermvectors","paths":["/_mtermvectors","/{index}/_mtermvectors","/{index}/{type}/_mtermvectors"],"parts":{"index":{"type":"string","description":"The index in which the document resides."},"type":{"type":"string","description":"The type of the document."}},"params":{"ids":{"type":"list","description":"A comma-separated list of documents ids. You must define ids as parameter or set \\"ids\\" or \\"docs\\" in the request body","required":false},"term_statistics":{"type":"boolean","description":"Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":false,"required":false},"field_statistics":{"type":"boolean","description":"Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"fields":{"type":"list","description":"A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"offsets":{"type":"boolean","description":"Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"positions":{"type":"boolean","description":"Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"payloads":{"type":"boolean","description":"Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","default":true,"required":false},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"routing":{"type":"string","description":"Specific routing value. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"parent":{"type":"string","description":"Parent id of documents. Applies to all returned documents unless otherwise specified in body \\"params\\" or \\"docs\\".","required":false},"realtime":{"type":"boolean","description":"Specifies if requests are real-time as opposed to near-real-time (default: true).","required":false},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.","required":false}}}'),Je=JSON.parse('{"nodes.hot_threads":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html","methods":["GET"],"url":{"path":"/_nodes/hot_threads","paths":["/_cluster/nodes/hotthreads","/_cluster/nodes/hot_threads","/_cluster/nodes/{node_id}/hotthreads","/_cluster/nodes/{node_id}/hot_threads","/_nodes/hotthreads","/_nodes/hot_threads","/_nodes/{node_id}/hotthreads","/_nodes/{node_id}/hot_threads"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"interval":{"type":"time","description":"The interval for the second sampling of threads"},"snapshots":{"type":"number","description":"Number of samples of thread stacktrace (default: 10)"},"threads":{"type":"number","description":"Specify the number of threads to provide information for (default: 3)"},"ignore_idle_threads":{"type":"boolean","description":"Don\'t show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)"},"type":{"type":"enum","options":["cpu","wait","block"],"description":"The type to sample (default: cpu)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),Me=JSON.parse('{"nodes.info":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html","methods":["GET"],"url":{"path":"/_nodes","paths":["/_nodes","/_nodes/{node_id}","/_nodes/{metric}","/_nodes/{node_id}/{metric}"],"parts":{"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"metric":{"type":"list","options":["settings","os","process","jvm","thread_pool","transport","http","plugins","ingest"],"description":"A comma-separated list of metrics you wish returned. Leave empty to return all."}},"params":{"flat_settings":{"type":"boolean","description":"Return settings in flat format (default: false)"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),je=JSON.parse('{"nodes.stats":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html","methods":["GET"],"url":{"path":"/_nodes/stats","paths":["/_nodes/stats","/_nodes/{node_id}/stats","/_nodes/stats/{metric}","/_nodes/{node_id}/stats/{metric}","/_nodes/stats/{metric}/{index_metric}","/_nodes/{node_id}/stats/{metric}/{index_metric}"],"parts":{"metric":{"type":"list","options":["_all","breaker","fs","http","indices","jvm","os","process","thread_pool","transport","discovery"],"description":"Limit the information returned to the specified metrics"},"index_metric":{"type":"list","options":["_all","completion","docs","fielddata","query_cache","flush","get","indexing","merge","request_cache","refresh","search","segments","store","warmer","suggest"],"description":"Limit the information returned for `indices` metric to the specific index metrics. Isn\'t used if `indices` (or `all`) metric isn\'t specified."},"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"completion_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)"},"fielddata_fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` index metric (supports wildcards)"},"fields":{"type":"list","description":"A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)"},"groups":{"type":"boolean","description":"A comma-separated list of search groups for `search` index metric"},"level":{"type":"enum","description":"Return indices stats aggregated at index, node or shard level","options":["indices","node","shards"],"default":"node"},"types":{"type":"list","description":"A comma-separated list of document types for the `indexing` index metric"},"timeout":{"type":"time","description":"Explicit operation timeout"},"include_segment_file_sizes":{"type":"boolean","description":"Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)","default":false}}},"body":null}}'),Ue=JSON.parse('{"nodes.usage":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-usage.html","methods":["GET"],"url":{"path":"/_nodes/usage","paths":["/_nodes/usage","/_nodes/{node_id}/usage","/_nodes/usage/{metric}","/_nodes/{node_id}/usage/{metric}"],"parts":{"metric":{"type":"list","options":["_all","rest_actions"],"description":"Limit the information returned to the specified metrics"},"node_id":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"}},"params":{"human":{"type":"boolean","description":"Whether to return time and byte values in human-readable format.","default":false},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),Be=JSON.parse('{"ping":{"documentation":"http://www.elastic.co/guide/","methods":["HEAD"],"url":{"path":"/","paths":["/"],"parts":{},"params":{}},"body":null}}'),Fe=JSON.parse('{"put_script":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html","methods":["PUT","POST"],"url":{"path":"/_scripts/{id}","paths":["/_scripts/{id}","/_scripts/{id}/{context}"],"parts":{"id":{"type":"string","description":"Script ID","required":true},"context":{"type":"string","description":"Script context"}},"params":{"timeout":{"type":"time","description":"Explicit operation timeout"},"master_timeout":{"type":"time","description":"Specify timeout for connection to master"},"context":{"type":"string","description":"Context name to compile script against"}}},"body":{"description":"The document","required":true}}}'),He=JSON.parse('{"reindex":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html","methods":["POST"],"url":{"path":"/_reindex","paths":["/_reindex"],"parts":{},"params":{"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"wait_for_completion":{"type":"boolean","default":true,"description":"Should the request should block until the reindex is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle to set on this request in sub-requests per second. -1 means no throttle."},"slices":{"type":"number","default":1,"description":"The number of slices this task should be divided into. Defaults to 1 meaning the task isn\'t sliced into subtasks."}}},"body":{"description":"The search definition using the Query DSL and the prototype for the index request.","required":true}}}'),ze=JSON.parse('{"reindex_rethrottle":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html","methods":["POST"],"url":{"path":"/_reindex/{task_id}/_rethrottle","paths":["/_reindex/{task_id}/_rethrottle","/_update_by_query/{task_id}/_rethrottle","/_delete_by_query/{task_id}/_rethrottle"],"parts":{"task_id":{"type":"string","description":"The task id to rethrottle"}},"params":{"requests_per_second":{"type":"number","required":true,"description":"The throttle to set on this request in floating sub-requests per second. -1 means set no throttle."}}},"body":null}}'),Ve=JSON.parse('{"remote.info":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-remote-info.html","methods":["GET"],"url":{"path":"/_remote/info","paths":["/_remote/info"],"params":{}},"body":null}}'),Qe=JSON.parse('{"render_search_template":{"documentation":"http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html","methods":["GET","POST"],"url":{"path":"/_render/template","paths":["/_render/template","/_render/template/{id}"],"parts":{"id":{"type":"string","description":"The id of the stored search template"}}},"body":{"description":"The search definition template and its params"}}}'),Ke=JSON.parse('{"scroll":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html","methods":["GET","POST"],"url":{"path":"/_search/scroll","paths":["/_search/scroll","/_search/scroll/{scroll_id}"],"parts":{"scroll_id":{"type":"string","description":"The scroll ID"}},"params":{"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"scroll_id":{"type":"string","description":"The scroll ID for scrolled search"}}},"body":{"description":"The scroll ID if not passed by URL or query parameter."}}}'),Ye=JSON.parse('{"search":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html","methods":["GET","POST"],"url":{"path":"/_search","paths":["/_search","/{index}/_search","/{index}/{type}/_search"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"explain":{"type":"boolean","description":"Specify whether to return detailed information about score computation as part of a hit"},"stored_fields":{"type":"list","description":"A comma-separated list of stored fields to return as part of a hit"},"docvalue_fields":{"type":"list","description":"A comma-separated list of fields to return as the docvalue representation of a field for each hit"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"suggest_field":{"type":"string","description":"Specify which field to use for suggestions"},"suggest_mode":{"type":"enum","options":["missing","popular","always"],"default":"missing","description":"Specify suggest mode"},"suggest_size":{"type":"number","description":"How many suggestions to return in response"},"suggest_text":{"type":"string","description":"The source text for which the suggestions should be returned"},"timeout":{"type":"time","description":"Explicit operation timeout"},"track_scores":{"type":"boolean","description":"Whether to calculate and return scores even if they are not used for sorting"},"track_total_hits":{"type":"boolean","description":"Indicate if the number of documents that match the query should be tracked"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"batched_reduce_size":{"type":"number","description":"The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.","default":512},"max_concurrent_shard_requests":{"type":"number","description":"The number of concurrent shard requests this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests","default":"The default grows with the number of nodes in the cluster but is at most 256."},"pre_filter_shard_size":{"type":"number","description":"A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on it\'s rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.","default":128}}},"body":{"description":"The search definition using the Query DSL"}}}'),Xe=JSON.parse('{"search_shards":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html","methods":["GET","POST"],"url":{"path":"/{index}/_search_shards","paths":["/_search_shards","/{index}/_search_shards"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"}},"params":{"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"string","description":"Specific routing value"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."}}},"body":null}}'),$e=JSON.parse('{"search_template":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html","methods":["GET","POST"],"url":{"path":"/_search/template","paths":["/_search/template","/{index}/_search/template","/{index}/{type}/_search/template"],"parts":{"index":{"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","query_and_fetch","dfs_query_then_fetch","dfs_query_and_fetch"],"description":"Search operation type"},"explain":{"type":"boolean","description":"Specify whether to return detailed information about score computation as part of a hit"},"profile":{"type":"boolean","description":"Specify whether to profile the query execution"},"typed_keys":{"type":"boolean","description":"Specify whether aggregation and suggester names should be prefixed by their respective types in the response"}}},"body":{"description":"The search definition template and its params"}}}'),Ze=JSON.parse('{"snapshot.create":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["PUT","POST"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"wait_for_completion":{"type":"boolean","description":"Should this request wait until the operation has completed before returning","default":false}}},"body":{"description":"The snapshot definition","required":false}}}'),et=JSON.parse('{"snapshot.create_repository":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["PUT","POST"],"url":{"path":"/_snapshot/{repository}","paths":["/_snapshot/{repository}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"},"verify":{"type":"boolean","description":"Whether to verify the repository after creation"}}},"body":{"description":"The repository definition","required":true}}}'),tt=JSON.parse('{"snapshot.delete":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["DELETE"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"}}},"body":null}}'),it=JSON.parse('{"snapshot.delete_repository":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["DELETE"],"url":{"path":"/_snapshot/{repository}","paths":["/_snapshot/{repository}"],"parts":{"repository":{"type":"list","required":true,"description":"A comma-separated list of repository names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),ot=JSON.parse('{"snapshot.get":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot/{repository}/{snapshot}","paths":["/_snapshot/{repository}/{snapshot}"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"list","required":true,"description":"A comma-separated list of snapshot names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"ignore_unavailable":{"type":"boolean","description":"Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown"},"verbose":{"type":"boolean","description":"Whether to show verbose snapshot info or only show the basic info found in the repository index blob"}}},"body":null}}'),st=JSON.parse('{"snapshot.get_repository":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot","paths":["/_snapshot","/_snapshot/{repository}"],"parts":{"repository":{"type":"list","description":"A comma-separated list of repository names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"local":{"type":"boolean","description":"Return local information, do not retrieve the state from master node (default: false)"}}},"body":null}}'),rt=JSON.parse('{"snapshot.restore":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["POST"],"url":{"path":"/_snapshot/{repository}/{snapshot}/_restore","paths":["/_snapshot/{repository}/{snapshot}/_restore"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"},"snapshot":{"type":"string","required":true,"description":"A snapshot name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"wait_for_completion":{"type":"boolean","description":"Should this request wait until the operation has completed before returning","default":false}}},"body":{"description":"Details of what to restore","required":false}}}'),nt=JSON.parse('{"snapshot.status":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["GET"],"url":{"path":"/_snapshot/_status","paths":["/_snapshot/_status","/_snapshot/{repository}/_status","/_snapshot/{repository}/{snapshot}/_status"],"parts":{"repository":{"type":"string","description":"A repository name"},"snapshot":{"type":"list","description":"A comma-separated list of snapshot names"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"ignore_unavailable":{"type":"boolean","description":"Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown"}}},"body":null}}'),at=JSON.parse('{"snapshot.verify_repository":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html","methods":["POST"],"url":{"path":"/_snapshot/{repository}/_verify","paths":["/_snapshot/{repository}/_verify"],"parts":{"repository":{"type":"string","required":true,"description":"A repository name"}},"params":{"master_timeout":{"type":"time","description":"Explicit operation timeout for connection to master node"},"timeout":{"type":"time","description":"Explicit operation timeout"}}},"body":null}}'),dt=JSON.parse('{"tasks.cancel":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html","methods":["POST"],"url":{"path":"/_tasks","paths":["/_tasks/_cancel","/_tasks/{task_id}/_cancel"],"parts":{"task_id":{"type":"string","description":"Cancel the task with specified task id (node_id:task_number)"}},"params":{"nodes":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be cancelled. Leave empty to cancel all."},"parent_node":{"type":"string","description":"Cancel tasks with specified parent node."},"parent_task_id":{"type":"string","description":"Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all."}}},"body":null}}'),ct=JSON.parse('{"tasks.get":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html","methods":["GET"],"url":{"path":"/_tasks/{task_id}","paths":["/_tasks/{task_id}"],"parts":{"task_id":{"type":"string","description":"Return the task with specified id (node_id:task_number)"}},"params":{"wait_for_completion":{"type":"boolean","description":"Wait for the matching tasks to complete (default: false)"}}},"body":null}}'),lt=JSON.parse('{"tasks.list":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html","methods":["GET"],"url":{"path":"/_tasks","paths":["/_tasks"],"parts":{},"params":{"nodes":{"type":"list","description":"A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you\'re connecting to, leave empty to get information from all nodes"},"actions":{"type":"list","description":"A comma-separated list of actions that should be returned. Leave empty to return all."},"detailed":{"type":"boolean","description":"Return detailed task information (default: false)"},"parent_node":{"type":"string","description":"Return tasks with specified parent node."},"parent_task_id":{"type":"string","description":"Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all."},"wait_for_completion":{"type":"boolean","description":"Wait for the matching tasks to complete (default: false)"},"group_by":{"type":"enum","description":"Group tasks by nodes or parent/child relationships","options":["nodes","parents"],"default":"nodes"}}},"body":null}}'),pt=JSON.parse('{"termvectors":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html","methods":["GET","POST"],"url":{"path":"/{index}/{type}/_termvectors","paths":["/{index}/{type}/_termvectors","/{index}/{type}/{id}/_termvectors"],"parts":{"index":{"type":"string","description":"The index in which the document resides.","required":true},"type":{"type":"string","description":"The type of the document.","required":true},"id":{"type":"string","description":"The id of the document, when not specified a doc param should be supplied."}},"params":{"term_statistics":{"type":"boolean","description":"Specifies if total term frequency and document frequency should be returned.","default":false,"required":false},"field_statistics":{"type":"boolean","description":"Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.","default":true,"required":false},"fields":{"type":"list","description":"A comma-separated list of fields to return.","required":false},"offsets":{"type":"boolean","description":"Specifies if term offsets should be returned.","default":true,"required":false},"positions":{"type":"boolean","description":"Specifies if term positions should be returned.","default":true,"required":false},"payloads":{"type":"boolean","description":"Specifies if term payloads should be returned.","default":true,"required":false},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random).","required":false},"routing":{"type":"string","description":"Specific routing value.","required":false},"parent":{"type":"string","description":"Parent id of documents.","required":false},"realtime":{"type":"boolean","description":"Specifies if request is real-time as opposed to near-real-time (default: true).","required":false},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","external","external_gte","force"],"description":"Specific version type"}}},"body":{"description":"Define parameters and or supply a document to get termvectors for. See documentation.","required":false}}}'),ut=JSON.parse('{"update":{"documentation":"http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html","methods":["POST"],"url":{"path":"/{index}/{type}/{id}/_update","paths":["/{index}/{type}/{id}/_update"],"parts":{"id":{"type":"string","required":true,"description":"Document ID"},"index":{"type":"string","required":true,"description":"The name of the index"},"type":{"type":"string","required":true,"description":"The type of the document"}},"params":{"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"fields":{"type":"list","description":"A comma-separated list of fields to return in the response"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"lang":{"type":"string","description":"The script language (default: painless)"},"parent":{"type":"string","description":"ID of the parent document. Is is only used for routing and when for the upsert request"},"refresh":{"type":"enum","options":["true","false","wait_for"],"description":"If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes."},"retry_on_conflict":{"type":"number","description":"Specify how many times should the operation be retried when a conflict occurs (default: 0)"},"routing":{"type":"string","description":"Specific routing value"},"timeout":{"type":"time","description":"Explicit operation timeout"},"timestamp":{"type":"time","description":"Explicit timestamp for the document"},"ttl":{"type":"time","description":"Expiration time for the document"},"version":{"type":"number","description":"Explicit version number for concurrency control"},"version_type":{"type":"enum","options":["internal","force"],"description":"Specific version type"}}},"body":{"description":"The request definition using either `script` or partial `doc`"}}}'),ht=JSON.parse('{"update_by_query":{"documentation":"https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html","methods":["POST"],"url":{"path":"/{index}/_update_by_query","paths":["/{index}/_update_by_query","/{index}/{type}/_update_by_query"],"comment":"most things below this are just copied from search.json","parts":{"index":{"required":true,"type":"list","description":"A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices"},"type":{"type":"list","description":"A comma-separated list of document types to search; leave empty to perform the operation on all types"}},"params":{"analyzer":{"type":"string","description":"The analyzer to use for the query string"},"analyze_wildcard":{"type":"boolean","description":"Specify whether wildcard and prefix queries should be analyzed (default: false)"},"default_operator":{"type":"enum","options":["AND","OR"],"default":"OR","description":"The default operator for query string query (AND or OR)"},"df":{"type":"string","description":"The field to use as default where no field prefix is given in the query string"},"from":{"type":"number","description":"Starting offset (default: 0)"},"ignore_unavailable":{"type":"boolean","description":"Whether specified concrete indices should be ignored when unavailable (missing or closed)"},"allow_no_indices":{"type":"boolean","description":"Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)"},"conflicts":{"note":"This is not copied from search","type":"enum","options":["abort","proceed"],"default":"abort","description":"What to do when the update by query hits version conflicts?"},"expand_wildcards":{"type":"enum","options":["open","closed","none","all"],"default":"open","description":"Whether to expand wildcard expression to concrete indices that are open, closed or both."},"lenient":{"type":"boolean","description":"Specify whether format-based query failures (such as providing text to a numeric field) should be ignored"},"pipeline":{"type":"string","description":"Ingest pipeline to set on index requests made by this action. (default: none)"},"preference":{"type":"string","description":"Specify the node or shard the operation should be performed on (default: random)"},"q":{"type":"string","description":"Query in the Lucene query string syntax"},"routing":{"type":"list","description":"A comma-separated list of specific routing values"},"scroll":{"type":"time","description":"Specify how long a consistent view of the index should be maintained for scrolled search"},"search_type":{"type":"enum","options":["query_then_fetch","dfs_query_then_fetch"],"description":"Search operation type"},"search_timeout":{"type":"time","description":"Explicit timeout for each search request. Defaults to no timeout."},"size":{"type":"number","description":"Number of hits to return (default: 10)"},"sort":{"type":"list","description":"A comma-separated list of <field>:<direction> pairs"},"_source":{"type":"list","description":"True or false to return the _source field or not, or a list of fields to return"},"_source_exclude":{"type":"list","description":"A list of fields to exclude from the returned _source field"},"_source_include":{"type":"list","description":"A list of fields to extract and return from the _source field"},"terminate_after":{"type":"number","description":"The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early."},"stats":{"type":"list","description":"Specific \'tag\' of the request for logging and statistical purposes"},"version":{"type":"boolean","description":"Specify whether to return document version as part of a hit"},"version_type":{"type":"boolean","description":"Should the document increment the version number (internal) on hit or not (reindex)"},"request_cache":{"type":"boolean","description":"Specify if request cache should be used for this request or not, defaults to index level setting"},"refresh":{"type":"boolean","description":"Should the effected indexes be refreshed?"},"timeout":{"type":"time","default":"1m","description":"Time each individual bulk request should wait for shards that are unavailable."},"wait_for_active_shards":{"type":"string","description":"Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)"},"scroll_size":{"type":"number","defaut_value":100,"description":"Size on the scroll request powering the update_by_query"},"wait_for_completion":{"type":"boolean","default":true,"description":"Should the request should block until the update by query operation is complete."},"requests_per_second":{"type":"number","default":0,"description":"The throttle to set on this request in sub-requests per second. -1 means no throttle."},"slices":{"type":"number","default":1,"description":"The number of slices this task should be divided into. Defaults to 1 meaning the task isn\'t sliced into subtasks."}}},"body":{"description":"The search definition using the Query DSL"}}}');t.default={_common:o,bulk:s.bulk,"cat.aliases":r["cat.aliases"],"cat.allocation":n["cat.allocation"],"cat.count":a["cat.count"],"cat.fielddata":d["cat.fielddata"],"cat.health":c["cat.health"],"cat.help":l["cat.help"],"cat.indices":p["cat.indices"],"cat.master":u["cat.master"],"cat.nodeattrs":h["cat.nodeattrs"],"cat.nodes":m["cat.nodes"],"cat.pending_tasks":f["cat.pending_tasks"],"cat.plugins":y["cat.plugins"],"cat.recovery":g["cat.recovery"],"cat.repositories":_["cat.repositories"],"cat.segments":b["cat.segments"],"cat.shards":w["cat.shards"],"cat.snapshots":x["cat.snapshots"],"cat.tasks":v["cat.tasks"],"cat.templates":T["cat.templates"],"cat.thread_pool":E["cat.thread_pool"],clear_scroll:S.clear_scroll,"cluster.allocation_explain":O["cluster.allocation_explain"],"cluster.get_settings":A["cluster.get_settings"],"cluster.health":q["cluster.health"],"cluster.pending_tasks":R["cluster.pending_tasks"],"cluster.put_settings":N["cluster.put_settings"],"cluster.reroute":C["cluster.reroute"],"cluster.state":k["cluster.state"],"cluster.stats":I["cluster.stats"],count:D.count,create:P.create,delete:L.delete,delete_by_query:W.delete_by_query,delete_script:G.delete_script,exists:J.exists,exists_source:M.exists_source,explain:j.explain,field_caps:U.field_caps,get:B.get,get_script:F.get_script,get_source:H.get_source,index:z.index,"indices.analyze":V["indices.analyze"],"indices.clear_cache":Q["indices.clear_cache"],"indices.close":K["indices.close"],"indices.create":Y["indices.create"],"indices.delete":X["indices.delete"],"indices.delete_alias":$["indices.delete_alias"],"indices.delete_template":Z["indices.delete_template"],"indices.exists":ee["indices.exists"],"indices.exists_alias":te["indices.exists_alias"],"indices.exists_template":ie["indices.exists_template"],"indices.exists_type":oe["indices.exists_type"],"indices.flush":se["indices.flush"],"indices.flush_synced":re["indices.flush_synced"],"indices.forcemerge":ne["indices.forcemerge"],"indices.get":ae["indices.get"],"indices.get_alias":de["indices.get_alias"],"indices.get_field_mapping":ce["indices.get_field_mapping"],"indices.get_mapping":le["indices.get_mapping"],"indices.get_settings":pe["indices.get_settings"],"indices.get_template":ue["indices.get_template"],"indices.get_upgrade":he["indices.get_upgrade"],"indices.open":me["indices.open"],"indices.put_alias":fe["indices.put_alias"],"indices.put_mapping":ye["indices.put_mapping"],"indices.put_settings":ge["indices.put_settings"],"indices.put_template":_e["indices.put_template"],"indices.recovery":be["indices.recovery"],"indices.refresh":we["indices.refresh"],"indices.rollover":xe["indices.rollover"],"indices.segments":ve["indices.segments"],"indices.shard_stores":Te["indices.shard_stores"],"indices.shrink":Ee["indices.shrink"],"indices.stats":Se["indices.stats"],"indices.update_aliases":Oe["indices.update_aliases"],"indices.upgrade":Ae["indices.upgrade"],"indices.validate_query":qe["indices.validate_query"],info:Re.info,"ingest.delete_pipeline":Ne["ingest.delete_pipeline"],"ingest.get_pipeline":Ce["ingest.get_pipeline"],"ingest.processor.grok":ke["ingest.processor.grok"],"ingest.put_pipeline":Ie["ingest.put_pipeline"],"ingest.simulate":De["ingest.simulate"],mget:Pe.mget,msearch:Le.msearch,msearch_template:We.msearch_template,mtermvectors:Ge.mtermvectors,"nodes.hot_threads":Je["nodes.hot_threads"],"nodes.info":Me["nodes.info"],"nodes.stats":je["nodes.stats"],"nodes.usage":Ue["nodes.usage"],ping:Be.ping,put_script:Fe.put_script,reindex:He.reindex,reindex_rethrottle:ze.reindex_rethrottle,"remote.info":Ve["remote.info"],render_search_template:Qe.render_search_template,scroll:Ke.scroll,search:Ye.search,search_shards:Xe.search_shards,search_template:$e.search_template,"snapshot.create":Ze["snapshot.create"],"snapshot.create_repository":et["snapshot.create_repository"],"snapshot.delete":tt["snapshot.delete"],"snapshot.delete_repository":it["snapshot.delete_repository"],"snapshot.get":ot["snapshot.get"],"snapshot.get_repository":st["snapshot.get_repository"],"snapshot.restore":rt["snapshot.restore"],"snapshot.status":nt["snapshot.status"],"snapshot.verify_repository":at["snapshot.verify_repository"],"tasks.cancel":dt["tasks.cancel"],"tasks.get":ct["tasks.get"],"tasks.list":lt["tasks.list"],termvectors:pt.termvectors,update:ut.update,update_by_query:ht.update_by_query}},function(e,t,i){"use strict";i.r(t);var o=i(43),s=i.n(o),r=i(8),n=i.n(r),a={WHITESPACE:"whitespace",WORD:"word",STRING:"string",RESERVED:"reserved",RESERVED_TOPLEVEL:"reserved-toplevel",RESERVED_NEWLINE:"reserved-newline",OPERATOR:"operator",OPEN_PAREN:"open-paren",CLOSE_PAREN:"close-paren",LINE_COMMENT:"line-comment",BLOCK_COMMENT:"block-comment",NUMBER:"number",PLACEHOLDER:"placeholder"},d=i(44),c=i.n(d),l=i(45),p=i.n(l);class u{constructor(e){this.indent=e||"  ",this.indentTypes=[]}getIndent(){return c()(this.indent,this.indentTypes.length)}increaseToplevel(){this.indentTypes.push("top-level")}increaseBlockLevel(){this.indentTypes.push("block-level")}decreaseTopLevel(){"top-level"===p()(this.indentTypes)&&this.indentTypes.pop()}decreaseBlockLevel(){for(;this.indentTypes.length>0;){if("top-level"!==this.indentTypes.pop())break}}}class h{constructor(){this.level=0}beginIfPossible(e,t){0===this.level&&this.isInlineBlock(e,t)?this.level=1:this.level>0?this.level++:this.level=0}end(){this.level--}isActive(){return this.level>0}isInlineBlock(e,t){let i=0,o=0;for(let s=t;s<e.length;s++){const t=e[s];if(i+=t.value.length,i>50)return!1;if(t.type===a.OPEN_PAREN)o++;else if(t.type===a.CLOSE_PAREN&&(o--,0===o))return!0;if(this.isForbiddenToken(t))return!1}return!1}isForbiddenToken({type:e,value:t}){return e===a.RESERVED_TOPLEVEL||e===a.RESERVED_NEWLINE||e===a.COMMENT||e===a.BLOCK_COMMENT||";"===t}}class m{constructor(e){this.params=e,this.index=0}get({key:e,value:t}){return this.params?e?this.params[e]:this.params[this.index++]:t}}class f{constructor(e,t){this.cfg=e||{},this.indentation=new u(this.cfg.indent),this.inlineBlock=new h,this.params=new m(this.cfg.params),this.tokenizer=t,this.previousReservedWord={},this.tokens=[],this.index=0}format(e){this.tokens=this.tokenizer.tokenize(e);return this.getFormattedQueryFromTokens().trim()}getFormattedQueryFromTokens(){let e="";return this.tokens.forEach((t,i)=>{this.index=i,t.type===a.WHITESPACE||(t.type===a.LINE_COMMENT?e=this.formatLineComment(t,e):t.type===a.BLOCK_COMMENT?e=this.formatBlockComment(t,e):t.type===a.RESERVED_TOPLEVEL?(e=this.formatToplevelReservedWord(t,e),this.previousReservedWord=t):t.type===a.RESERVED_NEWLINE?(e=this.formatNewlineReservedWord(t,e),this.previousReservedWord=t):t.type===a.RESERVED?(e=this.formatWithSpaces(t,e),this.previousReservedWord=t):e=t.type===a.OPEN_PAREN?this.formatOpeningParentheses(t,e):t.type===a.CLOSE_PAREN?this.formatClosingParentheses(t,e):t.type===a.PLACEHOLDER?this.formatPlaceholder(t,e):","===t.value?this.formatComma(t,e):":"===t.value?this.formatWithSpaceAfter(t,e):"."===t.value?this.formatWithoutSpaces(t,e):";"===t.value?this.formatQuerySeparator(t,e):this.formatWithSpaces(t,e))}),e}formatLineComment(e,t){return this.addNewline(t+e.value)}formatBlockComment(e,t){return this.addNewline(this.addNewline(t)+this.indentComment(e.value))}indentComment(e){return e.replace(/\n/g,"\n"+this.indentation.getIndent())}formatToplevelReservedWord(e,t){return this.indentation.decreaseTopLevel(),t=this.addNewline(t),this.indentation.increaseToplevel(),t+=this.equalizeWhitespace(e.value),this.addNewline(t)}formatNewlineReservedWord(e,t){return this.addNewline(t)+this.equalizeWhitespace(e.value)+" "}equalizeWhitespace(e){return e.replace(/\s+/g," ")}formatOpeningParentheses(e,t){const i=[a.WHITESPACE,a.OPEN_PAREN,a.LINE_COMMENT];return s()(i,this.previousToken().type)||(t=n()(t)),t+=e.value,this.inlineBlock.beginIfPossible(this.tokens,this.index),this.inlineBlock.isActive()||(this.indentation.increaseBlockLevel(),t=this.addNewline(t)),t}formatClosingParentheses(e,t){return this.inlineBlock.isActive()?(this.inlineBlock.end(),this.formatWithSpaceAfter(e,t)):(this.indentation.decreaseBlockLevel(),this.formatWithSpaces(e,this.addNewline(t)))}formatPlaceholder(e,t){return t+this.params.get(e)+" "}formatComma(e,t){return t=this.trimTrailingWhitespace(t)+e.value+" ",this.inlineBlock.isActive()||/^LIMIT$/i.test(this.previousReservedWord.value)?t:this.addNewline(t)}formatWithSpaceAfter(e,t){return this.trimTrailingWhitespace(t)+e.value+" "}formatWithoutSpaces(e,t){return this.trimTrailingWhitespace(t)+e.value}formatWithSpaces(e,t){return t+e.value+" "}formatQuerySeparator(e,t){return this.trimTrailingWhitespace(t)+e.value+"\n"}addNewline(e){return n()(e)+"\n"+this.indentation.getIndent()}trimTrailingWhitespace(e){return this.previousNonWhitespaceToken().type===a.LINE_COMMENT?n()(e)+"\n":n()(e)}previousNonWhitespaceToken(){let e=1;for(;this.previousToken(e).type===a.WHITESPACE;)e++;return this.previousToken(e)}previousToken(e=1){return this.tokens[this.index-e]||{}}}var y=i(46),g=i.n(y),_=i(9),b=i.n(_);class w{constructor(e){this.WHITESPACE_REGEX=/^(\s+)/,this.NUMBER_REGEX=/^((-\s*)?[0-9]+(\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\b/,this.OPERATOR_REGEX=/^(!=|<>|==|<=|>=|!<|!>|\|\||::|->>|->|~~\*|~~|!~~\*|!~~|~\*|!~\*|!~|.)/,this.BLOCK_COMMENT_REGEX=/^(\/\*[^]*?(?:\*\/|$))/,this.LINE_COMMENT_REGEX=this.createLineCommentRegex(e.lineCommentTypes),this.RESERVED_TOPLEVEL_REGEX=this.createReservedWordRegex(e.reservedToplevelWords),this.RESERVED_NEWLINE_REGEX=this.createReservedWordRegex(e.reservedNewlineWords),this.RESERVED_PLAIN_REGEX=this.createReservedWordRegex(e.reservedWords),this.WORD_REGEX=this.createWordRegex(e.specialWordChars),this.STRING_REGEX=this.createStringRegex(e.stringTypes),this.OPEN_PAREN_REGEX=this.createParenRegex(e.openParens),this.CLOSE_PAREN_REGEX=this.createParenRegex(e.closeParens),this.INDEXED_PLACEHOLDER_REGEX=this.createPlaceholderRegex(e.indexedPlaceholderTypes,"[0-9]*"),this.IDENT_NAMED_PLACEHOLDER_REGEX=this.createPlaceholderRegex(e.namedPlaceholderTypes,"[a-zA-Z0-9._$]+"),this.STRING_NAMED_PLACEHOLDER_REGEX=this.createPlaceholderRegex(e.namedPlaceholderTypes,this.createStringPattern(e.stringTypes))}createLineCommentRegex(e){return new RegExp(`^((?:${e.map(e=>b()(e)).join("|")}).*)`)}createReservedWordRegex(e){const t=e.join("|").replace(/ /g,"\\s+");return new RegExp(`^(${t})\\b`,"i")}createWordRegex(e=[]){return new RegExp(`^([\\w${e.join("")}]+)`)}createStringRegex(e){return new RegExp("^("+this.createStringPattern(e)+")")}createStringPattern(e){const t={"``":"((`[^`]*($|`))+)","[]":"((\\[[^\\]]*($|\\]))(\\][^\\]]*($|\\]))*)",'""':'(("[^"\\\\]*(?:\\\\.[^"\\\\]*)*("|$))+)',"''":"(('[^'\\\\]*(?:\\\\.[^'\\\\]*)*('|$))+)","N''":"((N'[^N'\\\\]*(?:\\\\.[^N'\\\\]*)*('|$))+)"};return e.map(e=>t[e]).join("|")}createParenRegex(e){return new RegExp("^("+e.map(e=>this.escapeParen(e)).join("|")+")","i")}escapeParen(e){return 1===e.length?b()(e):"\\b"+e+"\\b"}createPlaceholderRegex(e,t){if(g()(e))return!1;const i=e.map(b.a).join("|");return new RegExp(`^((?:${i})(?:${t}))`)}tokenize(e){const t=[];let i;for(;e.length;)i=this.getNextToken(e,i),e=e.substring(i.value.length),t.push(i);return t}getNextToken(e,t){return this.getWhitespaceToken(e)||this.getCommentToken(e)||this.getStringToken(e)||this.getOpenParenToken(e)||this.getCloseParenToken(e)||this.getPlaceholderToken(e)||this.getNumberToken(e)||this.getReservedWordToken(e,t)||this.getWordToken(e)||this.getOperatorToken(e)}getWhitespaceToken(e){return this.getTokenOnFirstMatch({input:e,type:a.WHITESPACE,regex:this.WHITESPACE_REGEX})}getCommentToken(e){return this.getLineCommentToken(e)||this.getBlockCommentToken(e)}getLineCommentToken(e){return this.getTokenOnFirstMatch({input:e,type:a.LINE_COMMENT,regex:this.LINE_COMMENT_REGEX})}getBlockCommentToken(e){return this.getTokenOnFirstMatch({input:e,type:a.BLOCK_COMMENT,regex:this.BLOCK_COMMENT_REGEX})}getStringToken(e){return this.getTokenOnFirstMatch({input:e,type:a.STRING,regex:this.STRING_REGEX})}getOpenParenToken(e){return this.getTokenOnFirstMatch({input:e,type:a.OPEN_PAREN,regex:this.OPEN_PAREN_REGEX})}getCloseParenToken(e){return this.getTokenOnFirstMatch({input:e,type:a.CLOSE_PAREN,regex:this.CLOSE_PAREN_REGEX})}getPlaceholderToken(e){return this.getIdentNamedPlaceholderToken(e)||this.getStringNamedPlaceholderToken(e)||this.getIndexedPlaceholderToken(e)}getIdentNamedPlaceholderToken(e){return this.getPlaceholderTokenWithKey({input:e,regex:this.IDENT_NAMED_PLACEHOLDER_REGEX,parseKey:e=>e.slice(1)})}getStringNamedPlaceholderToken(e){return this.getPlaceholderTokenWithKey({input:e,regex:this.STRING_NAMED_PLACEHOLDER_REGEX,parseKey:e=>this.getEscapedPlaceholderKey({key:e.slice(2,-1),quoteChar:e.slice(-1)})})}getIndexedPlaceholderToken(e){return this.getPlaceholderTokenWithKey({input:e,regex:this.INDEXED_PLACEHOLDER_REGEX,parseKey:e=>e.slice(1)})}getPlaceholderTokenWithKey({input:e,regex:t,parseKey:i}){const o=this.getTokenOnFirstMatch({input:e,regex:t,type:a.PLACEHOLDER});return o&&(o.key=i(o.value)),o}getEscapedPlaceholderKey({key:e,quoteChar:t}){return e.replace(new RegExp(b()("\\")+t,"g"),t)}getNumberToken(e){return this.getTokenOnFirstMatch({input:e,type:a.NUMBER,regex:this.NUMBER_REGEX})}getOperatorToken(e){return this.getTokenOnFirstMatch({input:e,type:a.OPERATOR,regex:this.OPERATOR_REGEX})}getReservedWordToken(e,t){if(!t||!t.value||"."!==t.value)return this.getToplevelReservedToken(e)||this.getNewlineReservedToken(e)||this.getPlainReservedToken(e)}getToplevelReservedToken(e){return this.getTokenOnFirstMatch({input:e,type:a.RESERVED_TOPLEVEL,regex:this.RESERVED_TOPLEVEL_REGEX})}getNewlineReservedToken(e){return this.getTokenOnFirstMatch({input:e,type:a.RESERVED_NEWLINE,regex:this.RESERVED_NEWLINE_REGEX})}getPlainReservedToken(e){return this.getTokenOnFirstMatch({input:e,type:a.RESERVED,regex:this.RESERVED_PLAIN_REGEX})}getWordToken(e){return this.getTokenOnFirstMatch({input:e,type:a.WORD,regex:this.WORD_REGEX})}getTokenOnFirstMatch({input:e,type:t,regex:i}){const o=e.match(i);if(o)return{type:t,value:o[1]}}}const x=["A","ACCESSIBLE","AGENT","AGGREGATE","ALL","ALTER","ANY","ARRAY","AS","ASC","AT","ATTRIBUTE","AUTHID","AVG","BETWEEN","BFILE_BASE","BINARY_INTEGER","BINARY","BLOB_BASE","BLOCK","BODY","BOOLEAN","BOTH","BOUND","BULK","BY","BYTE","C","CALL","CALLING","CASCADE","CASE","CHAR_BASE","CHAR","CHARACTER","CHARSET","CHARSETFORM","CHARSETID","CHECK","CLOB_BASE","CLONE","CLOSE","CLUSTER","CLUSTERS","COALESCE","COLAUTH","COLLECT","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPILED","COMPRESS","CONNECT","CONSTANT","CONSTRUCTOR","CONTEXT","CONTINUE","CONVERT","COUNT","CRASH","CREATE","CREDENTIAL","CURRENT","CURRVAL","CURSOR","CUSTOMDATUM","DANGLING","DATA","DATE_BASE","DATE","DAY","DECIMAL","DEFAULT","DEFINE","DELETE","DESC","DETERMINISTIC","DIRECTORY","DISTINCT","DO","DOUBLE","DROP","DURATION","ELEMENT","ELSIF","EMPTY","ESCAPE","EXCEPTIONS","EXCLUSIVE","EXECUTE","EXISTS","EXIT","EXTENDS","EXTERNAL","EXTRACT","FALSE","FETCH","FINAL","FIRST","FIXED","FLOAT","FOR","FORALL","FORCE","FROM","FUNCTION","GENERAL","GOTO","GRANT","GROUP","HASH","HEAP","HIDDEN","HOUR","IDENTIFIED","IF","IMMEDIATE","IN","INCLUDING","INDEX","INDEXES","INDICATOR","INDICES","INFINITE","INSTANTIABLE","INT","INTEGER","INTERFACE","INTERVAL","INTO","INVALIDATE","IS","ISOLATION","JAVA","LANGUAGE","LARGE","LEADING","LENGTH","LEVEL","LIBRARY","LIKE","LIKE2","LIKE4","LIKEC","LIMITED","LOCAL","LOCK","LONG","MAP","MAX","MAXLEN","MEMBER","MERGE","MIN","MINUS","MINUTE","MLSLABEL","MOD","MODE","MONTH","MULTISET","NAME","NAN","NATIONAL","NATIVE","NATURAL","NATURALN","NCHAR","NEW","NEXTVAL","NOCOMPRESS","NOCOPY","NOT","NOWAIT","NULL","NULLIF","NUMBER_BASE","NUMBER","OBJECT","OCICOLL","OCIDATE","OCIDATETIME","OCIDURATION","OCIINTERVAL","OCILOBLOCATOR","OCINUMBER","OCIRAW","OCIREF","OCIREFCURSOR","OCIROWID","OCISTRING","OCITYPE","OF","OLD","ON","ONLY","OPAQUE","OPEN","OPERATOR","OPTION","ORACLE","ORADATA","ORDER","ORGANIZATION","ORLANY","ORLVARY","OTHERS","OUT","OVERLAPS","OVERRIDING","PACKAGE","PARALLEL_ENABLE","PARAMETER","PARAMETERS","PARENT","PARTITION","PASCAL","PCTFREE","PIPE","PIPELINED","PLS_INTEGER","PLUGGABLE","POSITIVE","POSITIVEN","PRAGMA","PRECISION","PRIOR","PRIVATE","PROCEDURE","PUBLIC","RAISE","RANGE","RAW","READ","REAL","RECORD","REF","REFERENCE","RELEASE","RELIES_ON","REM","REMAINDER","RENAME","RESOURCE","RESULT_CACHE","RESULT","RETURN","RETURNING","REVERSE","REVOKE","ROLLBACK","ROW","ROWID","ROWNUM","ROWTYPE","SAMPLE","SAVE","SAVEPOINT","SB1","SB2","SB4","SECOND","SEGMENT","SELF","SEPARATE","SEQUENCE","SERIALIZABLE","SHARE","SHORT","SIZE_T","SIZE","SMALLINT","SOME","SPACE","SPARSE","SQL","SQLCODE","SQLDATA","SQLERRM","SQLNAME","SQLSTATE","STANDARD","START","STATIC","STDDEV","STORED","STRING","STRUCT","STYLE","SUBMULTISET","SUBPARTITION","SUBSTITUTABLE","SUBTYPE","SUCCESSFUL","SUM","SYNONYM","SYSDATE","TABAUTH","TABLE","TDO","THE","THEN","TIME","TIMESTAMP","TIMEZONE_ABBR","TIMEZONE_HOUR","TIMEZONE_MINUTE","TIMEZONE_REGION","TO","TRAILING","TRANSACTION","TRANSACTIONAL","TRIGGER","TRUE","TRUSTED","TYPE","UB1","UB2","UB4","UID","UNDER","UNIQUE","UNPLUG","UNSIGNED","UNTRUSTED","USE","USER","USING","VALIDATE","VALIST","VALUE","VARCHAR","VARCHAR2","VARIABLE","VARIANCE","VARRAY","VARYING","VIEW","VIEWS","VOID","WHENEVER","WHILE","WITH","WORK","WRAPPED","WRITE","YEAR","ZONE"],v=["ADD","ALTER COLUMN","ALTER TABLE","BEGIN","CONNECT BY","DECLARE","DELETE FROM","DELETE","END","EXCEPT","EXCEPTION","FETCH FIRST","FROM","GROUP BY","HAVING","INSERT INTO","INSERT","INTERSECT","LIMIT","LOOP","MODIFY","ORDER BY","SELECT","SET CURRENT SCHEMA","SET SCHEMA","SET","START WITH","UNION ALL","UNION","UPDATE","VALUES","WHERE"],T=["AND","CROSS APPLY","CROSS JOIN","ELSE","END","INNER JOIN","JOIN","LEFT JOIN","LEFT OUTER JOIN","OR","OUTER APPLY","OUTER JOIN","RIGHT JOIN","RIGHT OUTER JOIN","WHEN","XOR"];let E;class S{constructor(e){this.cfg=e}format(e){return E||(E=new w({reservedWords:x,reservedToplevelWords:v,reservedNewlineWords:T,stringTypes:['""',"N''","''","``"],openParens:["(","CASE"],closeParens:[")","END"],indexedPlaceholderTypes:["?"],namedPlaceholderTypes:[":"],lineCommentTypes:["--"],specialWordChars:["_","$","#",".","@"]})),new f(this.cfg,E).format(e)}}const O=["ACCESSIBLE","ACTION","AGAINST","AGGREGATE","ALGORITHM","ALL","ALTER","ANALYSE","ANALYZE","AS","ASC","AUTOCOMMIT","AUTO_INCREMENT","BACKUP","BEGIN","BETWEEN","BINLOG","BOTH","CASCADE","CASE","CHANGE","CHANGED","CHARACTER SET","CHARSET","CHECK","CHECKSUM","COLLATE","COLLATION","COLUMN","COLUMNS","COMMENT","COMMIT","COMMITTED","COMPRESSED","CONCURRENT","CONSTRAINT","CONTAINS","CONVERT","CREATE","CROSS","CURRENT_TIMESTAMP","DATABASE","DATABASES","DAY","DAY_HOUR","DAY_MINUTE","DAY_SECOND","DEFAULT","DEFINER","DELAYED","DELETE","DESC","DESCRIBE","DETERMINISTIC","DISTINCT","DISTINCTROW","DIV","DO","DROP","DUMPFILE","DUPLICATE","DYNAMIC","ELSE","ENCLOSED","END","ENGINE","ENGINES","ENGINE_TYPE","ESCAPE","ESCAPED","EVENTS","EXEC","EXECUTE","EXISTS","EXPLAIN","EXTENDED","FAST","FETCH","FIELDS","FILE","FIRST","FIXED","FLUSH","FOR","FORCE","FOREIGN","FULL","FULLTEXT","FUNCTION","GLOBAL","GRANT","GRANTS","GROUP_CONCAT","HEAP","HIGH_PRIORITY","HOSTS","HOUR","HOUR_MINUTE","HOUR_SECOND","IDENTIFIED","IF","IFNULL","IGNORE","IN","INDEX","INDEXES","INFILE","INSERT","INSERT_ID","INSERT_METHOD","INTERVAL","INTO","INVOKER","IS","ISOLATION","KEY","KEYS","KILL","LAST_INSERT_ID","LEADING","LEVEL","LIKE","LINEAR","LINES","LOAD","LOCAL","LOCK","LOCKS","LOGS","LOW_PRIORITY","MARIA","MASTER","MASTER_CONNECT_RETRY","MASTER_HOST","MASTER_LOG_FILE","MATCH","MAX_CONNECTIONS_PER_HOUR","MAX_QUERIES_PER_HOUR","MAX_ROWS","MAX_UPDATES_PER_HOUR","MAX_USER_CONNECTIONS","MEDIUM","MERGE","MINUTE","MINUTE_SECOND","MIN_ROWS","MODE","MODIFY","MONTH","MRG_MYISAM","MYISAM","NAMES","NATURAL","NOT","NOW()","NULL","OFFSET","ON DELETE","ON UPDATE","ON","ONLY","OPEN","OPTIMIZE","OPTION","OPTIONALLY","OUTFILE","PACK_KEYS","PAGE","PARTIAL","PARTITION","PARTITIONS","PASSWORD","PRIMARY","PRIVILEGES","PROCEDURE","PROCESS","PROCESSLIST","PURGE","QUICK","RAID0","RAID_CHUNKS","RAID_CHUNKSIZE","RAID_TYPE","RANGE","READ","READ_ONLY","READ_WRITE","REFERENCES","REGEXP","RELOAD","RENAME","REPAIR","REPEATABLE","REPLACE","REPLICATION","RESET","RESTORE","RESTRICT","RETURN","RETURNS","REVOKE","RLIKE","ROLLBACK","ROW","ROWS","ROW_FORMAT","SECOND","SECURITY","SEPARATOR","SERIALIZABLE","SESSION","SHARE","SHOW","SHUTDOWN","SLAVE","SONAME","SOUNDS","SQL","SQL_AUTO_IS_NULL","SQL_BIG_RESULT","SQL_BIG_SELECTS","SQL_BIG_TABLES","SQL_BUFFER_RESULT","SQL_CACHE","SQL_CALC_FOUND_ROWS","SQL_LOG_BIN","SQL_LOG_OFF","SQL_LOG_UPDATE","SQL_LOW_PRIORITY_UPDATES","SQL_MAX_JOIN_SIZE","SQL_NO_CACHE","SQL_QUOTE_SHOW_CREATE","SQL_SAFE_UPDATES","SQL_SELECT_LIMIT","SQL_SLAVE_SKIP_COUNTER","SQL_SMALL_RESULT","SQL_WARNINGS","START","STARTING","STATUS","STOP","STORAGE","STRAIGHT_JOIN","STRING","STRIPED","SUPER","TABLE","TABLES","TEMPORARY","TERMINATED","THEN","TO","TRAILING","TRANSACTIONAL","TRUE","TRUNCATE","TYPE","TYPES","UNCOMMITTED","UNIQUE","UNLOCK","UNSIGNED","USAGE","USE","USING","VARIABLES","VIEW","WHEN","WITH","WORK","WRITE","YEAR_MONTH"],A=["ADD","AFTER","ALTER COLUMN","ALTER TABLE","DELETE FROM","EXCEPT","FETCH FIRST","FROM","GROUP BY","GO","HAVING","INSERT INTO","INSERT","INTERSECT","LIMIT","MODIFY","ORDER BY","SELECT","SET CURRENT SCHEMA","SET SCHEMA","SET","UNION ALL","UNION","UPDATE","VALUES","WHERE"],q=["AND","CROSS APPLY","CROSS JOIN","ELSE","INNER JOIN","JOIN","LEFT JOIN","LEFT OUTER JOIN","OR","OUTER APPLY","OUTER JOIN","RIGHT JOIN","RIGHT OUTER JOIN","WHEN","XOR"];let R;class N{constructor(e){this.cfg=e}format(e){return R||(R=new w({reservedWords:O,reservedToplevelWords:A,reservedNewlineWords:q,stringTypes:['""',"N''","''","``","[]"],openParens:["(","CASE"],closeParens:[")","END"],indexedPlaceholderTypes:["?"],namedPlaceholderTypes:["@",":"],lineCommentTypes:["#","--"]})),new f(this.cfg,R).format(e)}}t.default={format:(e,t)=>{switch((t=t||{}).language){case"pl/sql":return new S(t).format(e);case"sql":case void 0:return new N(t).format(e);default:throw Error("Unsupported SQL dialect: "+t.language)}}}}]));